import{U as Y,e as g,V as $,W as T,X as V,Y as Z}from"./chunk-vendor-DMkv9cqe.js";import{E as F,H as Q,s as ee,D as C,V as v,R as S,S as te,a as se,m as ne,L as A,j as W,h as K,c as j,y as ie,x as oe,b as ae,d as re,C as R,e as ce,A as le,f as de,v as he,g as ue,k as me,l as ge,i as fe}from"./chunk-codemirror-TrSH-Re_.js";import{F as pe,g as b}from"./chunk-git-BBkYZzBr.js";import{c as we}from"./chunk-gpt-tokenizer-Chi8naDl.js";import{e as B}from"./chunk-eruda-BdGqt1fq.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(i){if(i.ep)return;i.ep=!0;const o=t(i);fetch(i.href,o)}})();class H{constructor({targetSelector:e,items:t,containerItems:s=[],itemSelector:i,dataAttribute:o}){if(this.targetSelector=e,this.items=t,this.containerItems=s,this.itemSelector=i,o){const a=o.replace("data-","");this.dataAttributeKey=a.replace(/-([a-z])/g,r=>r[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const s=this.itemSelector?e.target.closest(this.itemSelector):null;s?this.showMenu(e.clientX,e.clientY,this.items,s):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const s=this.itemSelector?e.target.closest(this.itemSelector):null,i=s?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,i,s||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,s,i){this.menuElement.innerHTML="",this.menuElement.style.display="block";const o=this.dataAttributeKey&&i.dataset[this.dataAttributeKey]?i.dataset[this.dataAttributeKey]:null;s.forEach(u=>{if(u.type==="separator"){const f=document.createElement("div");f.className="context-menu-separator",this.menuElement.appendChild(f);return}const m=document.createElement("button");m.className="context-menu-item",m.textContent=u.label,m.addEventListener("click",()=>{u.action(o),this.hideMenu()}),this.menuElement.appendChild(m)});const a=this.menuElement.offsetWidth,r=this.menuElement.offsetHeight,{innerWidth:l,innerHeight:c}=window;let h=e,d=t;e+a>l&&(h=l-a-5),t+r>c&&(d=c-r-5),this.menuElement.style.top=`${d}px`,this.menuElement.style.left=`${h}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class y{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const s=document.createElement("button");return s.textContent=e,s.addEventListener("click",t),this.footer.appendChild(s),s}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:s=""}){return new Promise(i=>{const o=new y({title:e}),a=`modal-input-${Date.now()}`,r=`
        <div class="modal-prompt" style="display: flex; flex-direction: column; gap: 10px;">
          <label for="${a}">${t}</label>
          <input type="text" id="${a}" value="${s}" style="padding: 8px; background: #1e1e1e; color: #ccc; border: 1px solid #555; border-radius: 3px;">
        </div>
      `;o.updateContent(r);const l=o.content.querySelector(`#${a}`),c=()=>{i(l.value),o.destroy()},h=()=>{i(null),o.destroy()};l.addEventListener("keydown",d=>{d.key==="Enter"?(d.preventDefault(),c()):d.key==="Escape"&&h()}),o.addFooterButton("OK",c),o.addFooterButton("Cancel",h),o.show(),l.focus(),l.select()})}static confirm({title:e,message:t,okText:s="OK",cancelText:i="Cancel",destructive:o=!1}){return new Promise(a=>{const r=new y({title:e});r.updateContent(`<p>${t}</p>`);const l=()=>{a(!0),r.destroy()},c=()=>{a(!1),r.destroy()},h=r.addFooterButton(s,l);o&&h.classList.add("destructive"),r.addFooterButton(i,c),r.show()})}}const ye={async renderFiles(n){try{const e=await this.listFiles(this.gitClient,"/"),t=new Map;for(const[o,a,r]of n)a!==r&&t.set(`/${o}`,"modified");const s=decodeURIComponent(window.location.hash.substring(1)),i=e.sort().map(o=>{const a=`#${o}`,r=t.get(o)||"unmodified",l=o.startsWith("/")?o.substring(1):o,c=[`status-${r}`];return o===s&&c.push("active"),`<li><a href="${a}" class="${c.join(" ")}" data-filepath="${o}">${l}</a></li>`}).join("");this.contentContainer.innerHTML=`<ul>${i}</ul>`}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleNewFile(){const n=await y.prompt({title:"New File",label:"Enter new file name:"});if(!n)return;const e=`/${n}`;try{await this.gitClient.pfs.stat(e),await this.showAlert({title:"File Exists",message:`File "${n}" already exists.`})}catch(t){t.code==="ENOENT"?(await this.gitClient.writeFile(e,""),window.location.hash=`#${e}`):(console.error("Error checking for file:",t),await this.showAlert({title:"Error",message:"An error occurred while creating the file."}))}},async handleRename(n){const e=await y.prompt({title:"Rename File",label:`Enter new name for ${n.substring(1)}:`,defaultValue:n.substring(1)});if(!e||e===n.substring(1))return;const t=`/${e}`;try{const s=t.substring(0,t.lastIndexOf("/"));s&&await this.ensureDir(s),await this.gitClient.pfs.rename(n,t),decodeURIComponent(window.location.hash)===`#${n}`?window.location.hash=`#${t}`:await this.refresh()}catch(s){console.error("Error renaming file:",s),await this.showAlert({title:"Error",message:"Failed to rename file. Check console for details."})}},async handleDuplicate(n){const e=n.substring(0,n.lastIndexOf("/")),t=n.substring(n.lastIndexOf("/")+1),s=t.lastIndexOf("."),i=s>0;let o;if(i){const l=t.substring(0,s),c=t.substring(s);o=`${l} (copy)${c}`}else o=`${t} (copy)`;const a=await y.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:o});if(!a)return;const r=`${e}/${a}`;try{const l=await this.gitClient.pfs.readFile(n,"utf8");await this.gitClient.writeFile(r,l),await this.refresh()}catch(l){console.error("Error duplicating file:",l),await this.showAlert({title:"Error",message:"Failed to duplicate file."})}},async handleDelete(n){if(await this.showConfirm({title:"Delete File",message:`Are you sure you want to permanently delete "${n}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=decodeURIComponent(window.location.hash)===`#${n}`;await this.gitClient.pfs.unlink(n),t?(window.location.hash="#/README",await this.editor.loadFile("/README")):await this.refresh()}catch(t){console.error("Error deleting file:",t),await this.showAlert({title:"Error",message:"Failed to delete file."})}}};class E{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new pe(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),console.log(`Garden "${this.gardenName}" already exists. Loading it.`);return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await b.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/README",e,"utf8"),this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async stage(e){const t=e.startsWith("/")?e.substring(1):e;await b.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await b.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){console.log(`[discard] Starting discard for: ${e}`);const t=e.startsWith("/")?e.substring(1):e;try{const i=(await this.getStatuses()).find(a=>a[0]===t);if(!i){console.warn(`[discard] Could not find status for "${t}".`);return}i[1]===0?(console.log(`[discard] File is untracked. Deleting: ${e}`),await this.pfs.unlink(e),console.log(`[discard] Successfully unlinked ${e}.`)):(console.log(`[discard] File is tracked. Force checking out from HEAD: ${t}`),await b.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0}),console.log(`[discard] Successfully checked out ${t}.`))}catch(s){console.error(`[discard] An error occurred for ${e}:`,s)}}async commit(e){const t=await b.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async log(){try{return await b.log({fs:this.fs,dir:"/",depth:20})}catch{return console.log("No commit history found."),[]}}async getChangedFiles(e){try{const s=(await b.readCommit({fs:this.fs,dir:"/",oid:e})).commit.parent[0];if(!s)return(await b.listFiles({fs:this.fs,dir:"/",ref:e})).map(a=>({path:`/${a}`,type:"add"}));const i=[];return await b.walk({fs:this.fs,dir:"/",trees:[b.TREE({ref:s}),b.TREE({ref:e})],map:async function(o,[a,r]){if(o===".")return;const l=await a.oid(),c=await r.oid();l!==c&&i.push(`/${o}`)}}),i}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const s=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const i=e==="HEAD"?await b.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:o}=await b.readBlob({fs:this.fs,dir:"/",oid:i,filepath:s});return new TextDecoder().decode(o)}catch(i){return i.name==="NotFoundError"?"":(console.error(`Could not read blob for ${s} from commit ${e}:`,i),null)}}async readFile(e){try{return await this.pfs.readFile(e,"utf8")}catch{return console.warn(`File not found: ${e}`),`// File not found: ${e}
// Start typing to create it.`}}async writeFile(e,t){try{await this.pfs.writeFile(e,t,"utf8"),this.markGardenAsDirty(!0)}catch(s){if(s.code==="ENOENT")try{const i=e.substring(0,e.lastIndexOf("/"));i&&(await this.pfs.mkdir(i,{recursive:!0}),await this.pfs.writeFile(e,t,"utf8"),this.markGardenAsDirty(!0))}catch(i){console.error(`Error creating directory for ${e}:`,i)}else console.error(`Error writing file ${e}:`,s)}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),s=t?JSON.parse(t):[],i=s.indexOf(this.gardenName);e&&i===-1?s.push(this.gardenName):!e&&i!==-1&&s.splice(i,1),localStorage.setItem("dirty_gardens",JSON.stringify(s))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return b.statusMatrix({fs:this.fs,dir:"/"})}}const be={async renderGardens(){try{const n=localStorage.getItem("thoughtform_gardens"),e=n?JSON.parse(n):[],t=localStorage.getItem("dirty_gardens"),s=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let i="";for(const o of e.sort()){const a=decodeURIComponent(o),r=s.has(a),l=`/${encodeURIComponent(o)}`,c=this.gitClient.gardenName===a,h=[];c&&h.push("active"),r&&h.push("status-modified"),i+=`<li><a href="${l}" class="${h.join(" ")}" data-garden-name="${o}">${a}</a></li>`}this.contentContainer.innerHTML=`<ul>${i}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(o=>{o.addEventListener("click",a=>{this.gitClient.gardenName!==a.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(n){console.error("Error rendering garden list:",n),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const n=await y.prompt({title:"New Garden",label:"Enter new garden name:"});if(!n||!n.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(n)){await this.showAlert({title:"Garden Exists",message:`Garden "${n}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(n)}`},async handleDuplicateGarden(n){if(!n)return;const t=`${decodeURIComponent(n)} (copy)`,s=await y.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!s||!s.trim()||s===n)return;const i=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const o=new E(n),a=new E(s);await a.initRepo();const r=await this.listFiles(o,"/");let l=0;for(const c of r){l++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${l} of ${r.length}:<br>${c.substring(1)}</p>`;const h=await o.readFile(c);await a.writeFile(c,h)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(s)}`)},500)}catch(o){console.error("Error duplicating garden:",o),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=i}},100)},async handleDeleteGarden(n){if(!n)return;if(n==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${n}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let s=t?JSON.parse(t):[];s=s.filter(o=>o!==n),localStorage.setItem("thoughtform_gardens",JSON.stringify(s));const i=`garden-fs-${n}`;await new Promise((o,a)=>{const r=indexedDB.deleteDatabase(i);r.onsuccess=()=>o(),r.onerror=l=>a(l.target.error),r.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),a(new Error("Deletion blocked"))}}),this.gitClient.gardenName===n?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},Ce={async renderGitView(){try{const[n,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],s=[];for(const[h,d,u,m]of n){const f=`/${h}`;(d!==u||d!==m)&&(u===m?t.push({filepath:f,status:"staged"}):s.push({filepath:f,status:"unstaged"}))}const i=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,o=this.renderFileSection("Changes",s,!1),a=this.renderFileSection("Staged Changes",t,!0),r=this.renderHistorySection(e),l=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${i}
          ${a}
          ${o}
          ${r}
        </div>
      `;const c=this.contentContainer.querySelector("#git-commit-message");c&&(c.value=l),this.addGitViewListeners(),this.updateCommitButtonState()}catch(n){console.error("Error rendering Git view:",n),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderFileSection(n,e,t){const s=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let i="";return e.length>0?i=e.map(a=>{const r=a.filepath.startsWith("/")?a.filepath.substring(1):a.filepath;return`
          <li class="git-file-item ${this.editor.filePath===a.filepath?"active":""}" data-filepath="${a.filepath}">
            <span class="git-file-path">${r}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${s}
            </span>
          </li>
        `}).join(""):i=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${n} (${e.length})</h3>
        <ul class="git-file-list">
          ${i}
        </ul>
      </div>
    `},renderHistorySection(n){let e="";return n.length>0?e=n.map(t=>{const s=t.commit.message.split(`
`)[0],i=t.oid.substring(0,7),o=t.commit.author.name,a=new Date(t.commit.author.timestamp*1e3).toLocaleString(),r=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${r}" data-author="${o}" data-date="${a}">
                <div class="git-history-header">
                  <span class="git-history-message">${s}</span>
                  <span class="git-history-oid">${i}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const n=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!n||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,s=n.value.trim().length>0;e.disabled=!(t&&s)},addGitViewListeners(){const n=this.contentContainer.querySelector("#git-commit-message");n&&!n.dataset.listenerAttached&&(n.dataset.listenerAttached="true",n.addEventListener("input",()=>this.updateCommitButtonState()));const e=this.contentContainer.querySelector(".git-view-container");e&&!e.dataset.listenerAttached&&(e.dataset.listenerAttached="true",e.addEventListener("click",async s=>{const i=s.target,o=i.closest(".git-file-item"),a=i.closest(".git-history-item");if(o){const r=o.dataset.filepath;i.matches(".git-file-path")?(this.editor.filePath!==r&&await this.editor.loadFile(r),this.editor.showDiff(await this.gitClient.readBlob(r))):i.matches(".git-action-button")&&(s.stopPropagation(),i.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${r}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(r),this.editor.filePath===r&&await this.editor.forceReloadFile(r),await this.refresh()):i.classList.contains("stage")?(await this.gitClient.stage(r),await this.renderGitView()):i.classList.contains("unstage")&&(await this.gitClient.unstage(r),await this.renderGitView()))}else if(a&&i.closest(".git-history-header")){const r=a.querySelector(".git-history-details");if(r.style.display!=="none")r.style.display="none";else if(r.style.display="block",!r.dataset.loaded){r.innerHTML='<span class="no-changes">Loading...</span>';const c=a.dataset.oid,h=await this.gitClient.getChangedFiles(c),d=a.dataset.author,u=a.dataset.date,m=h.map(f=>{const p=typeof f=="string"?f:f.path;return`<div class="history-file-path" data-path="${p}">${p.substring(1)}</div>`}).join("");r.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${d}</div>
                      <div><strong>Date:</strong> ${u}</div>
                    </div>
                    <div class="history-file-list">${m||'<span class="no-changes">No files changed.</span>'}</div>
                  `,r.dataset.loaded="true"}}else if(i.closest(".history-file-path")){e.querySelectorAll(".history-file-path.active").forEach(d=>d.classList.remove("active")),i.classList.add("active");const r=i.closest(".git-history-item"),l=i.dataset.path,c=r.dataset.oid,h=r.dataset.parentOid;await this.editor.previewHistoricalFile(l,c,h)}}));const t=this.contentContainer.querySelector("#git-commit-button");t&&!t.dataset.listenerAttached&&(t.dataset.listenerAttached="true",t.addEventListener("click",async()=>{const i=this.contentContainer.querySelector("#git-commit-message").value.trim();if(i)try{t.disabled=!0,t.textContent="Committing...",await this.gitClient.commit(i),this.editor.hideDiff(),await this.refresh()}catch(o){console.error("Commit failed:",o),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),t.textContent="Commit"}}))}};class ve{constructor({target:e,gitClient:t,editor:s}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!s)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=s,this.targetSelector=e;const i=document.querySelector(this.targetSelector);if(!i){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=i,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,ye),Object.assign(this,be),Object.assign(this,Ce)}async init(){console.log("Initializing sidebar..."),this.renderTabs(),this.setupContextMenus(),await this.refresh(),console.log("Sidebar initialized.")}async showAlert({title:e="Notice",message:t}){return new Promise(s=>{const i=new y({title:e});i.updateContent(`<p>${t}</p>`),i.addFooterButton("OK",()=>{i.destroy(),s()}),i.show()})}async showConfirm({title:e,message:t,okText:s="OK",destructive:i=!1}){return y.confirm({title:e,message:t,okText:s,destructive:i,cancelText:"Cancel"})}async ensureDir(e){const t=e.split("/").filter(i=>i);let s="";for(const i of t){s+=`/${i}`;try{await this.gitClient.pfs.stat(s)}catch(o){if(o.code==="ENOENT")try{await this.gitClient.pfs.mkdir(s)}catch(a){if(a.code!=="EEXIST")throw a}else throw o}}}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new H({targetSelector:".sidebar-content.files-view",itemSelector:"[data-filepath]",dataAttribute:"data-filepath",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},...e]}),new H({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const s=t.target.dataset.tab,i=this.activeTab;if(this.activeTab=s,sessionStorage.setItem("sidebarActiveTab",this.activeTab),i==="Git"&&s!=="Git"){const o=this.editor.getFilePath(window.location.hash);this.editor.loadFile(o)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(s=>{s.classList.toggle("active",s.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,s,i])=>s!==i);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listFiles(e,t){const s=e.pfs;let i=[];try{const o=await s.readdir(t);for(const a of o){if(a===".git")continue;const r=`${t==="/"?"":t}/${a}`;try{(await s.stat(r)).isDirectory()?i=i.concat(await this.listFiles(e,r)):i.push(r)}catch{console.warn(`Could not stat ${r}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No files to list.`)}return i}}const Ee=Y.define(),xe=F.theme({"&":{color:"#ccc",backgroundColor:"#222"},".cm-content":{caretColor:"#fff"},"&.cm-focused .cm-cursor":{borderLeftColor:"#fff"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"#444"},".cm-gutters":{backgroundColor:"#222",color:"#888",border:"none"}},{dark:!0}),Se=Q.define([{tag:g.keyword,color:"#CF8E6D"},{tag:[g.name,g.deleted,g.character,g.propertyName,g.macroName],color:"#9CDCFE"},{tag:[g.processingInstruction,g.string,g.inserted],color:"#CE9178"},{tag:[g.function(g.variableName),g.labelName],color:"#DCDCAA"},{tag:[g.color,g.constant(g.name),g.standard(g.name)],color:"#B5CEA8"},{tag:[g.definition(g.name),g.separator],color:"#D4D4D4"},{tag:[g.typeName,g.className,g.number,g.changed,g.annotation,g.modifier,g.self,g.namespace],color:"#4EC9B0"},{tag:[g.operator,g.operatorKeyword,g.url,g.escape,g.regexp,g.link,g.special(g.string)],color:"#D4D4D4"},{tag:[g.meta,g.comment],color:"#6A9955"},{tag:Ee,color:"#C678DD",fontStyle:"italic"},{tag:g.strong,fontWeight:"bold"},{tag:g.emphasis,fontStyle:"italic"},{tag:g.strikethrough,textDecoration:"line-through"},{tag:g.link,color:"#6A9955",textDecoration:"underline"},{tag:g.heading,fontWeight:"bold",color:"#569CD6"},{tag:[g.atom,g.bool,g.special(g.variableName)],color:"#B5CEA8"},{tag:g.invalid,color:"#f00"}]),ke=[xe,ee(Se)];function Fe(n,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const s=c=>{c&&(t.innerHTML=`<p>${c}</p>`),t.classList.add("visible")},i=()=>{t.classList.remove("visible")},o=async c=>{const h=await c.text(),d=`/${c.name}`;console.log(`[DragDrop] Writing file: ${d}`),await n.writeFile(d,h)},a=async c=>{const h=await $.loadAsync(c),d=[];h.forEach((u,m)=>{if(!m.dir){const f=m.async("string").then(p=>{const w=`/${u}`;return console.log(`[DragDrop] Extracting: ${w}`),n.writeFile(w,p)});d.push(f)}}),await Promise.all(d)},r=async c=>{const h=[],d=[],u=async(f,p)=>{if(f.isFile){const w=await new Promise(k=>f.file(k)),I=`${p}/${w.name}`;w.name.toLowerCase().endsWith(".zip")?d.push(w):h.push({file:w,path:I})}else if(f.isDirectory){const w=f.createReader(),I=await new Promise(k=>w.readEntries(k));for(const k of I)await u(k,`${p}/${f.name}`)}};for(const f of c)await u(f,"");h.length>0&&d.length===0&&s(`Importing ${h.length} file(s)...`);const m=h.map(async({file:f,path:p})=>{const w=await f.text();return console.log(`[DragDrop] Writing file: ${p}`),n.writeFile(p,w)});await Promise.all(m);for(const f of d)await l(f)},l=c=>new Promise(h=>{const d=new y({title:`Import Zip File: ${c.name}`});d.updateContent("<p>How would you like to import this .zip file?</p>"),d.addFooterButton("Extract Files to Garden",async()=>{d.updateContent("<p>Extracting files...</p>"),d.clearFooter();try{await a(c)}catch(u){console.error("Zip extraction failed",u),d.updateContent("<p>Error during extraction. Check console.</p>")}d.destroy(),h()}),d.addFooterButton("Import as Single .zip File",async()=>{d.updateContent("<p>Importing file...</p>"),d.clearFooter();try{await o(c)}catch(u){console.error("Zip import failed",u),d.updateContent("<p>Error during import. Check console.</p>")}d.destroy(),h()}),d.addFooterButton("Cancel",()=>{d.destroy(),h()}),d.show()});window.addEventListener("dragenter",c=>{c.preventDefault(),c.dataTransfer.types.includes("Files")&&s("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",c=>{c.preventDefault()}),window.addEventListener("dragleave",c=>{c.clientX===0&&c.clientY===0&&i()}),window.addEventListener("drop",async c=>{c.preventDefault(),i();const h=c.dataTransfer.items;if(!h||h.length===0)return;const d=Array.from(h).map(u=>u.webkitGetAsEntry()).filter(Boolean);if(d.length>0){console.log(`[DragDrop] Processing ${d.length} dropped item(s).`);try{await r(d),console.log("[DragDrop] All items processed.")}catch(u){console.error("[DragDrop] An error occurred during import:",u),await e.showAlert({title:"Import Error",message:"An error occurred while importing. Please check the console."})}finally{await e.refresh(),setTimeout(()=>{i()},500)}}})}const Le=C.mark({class:"cm-hashtag"}),$e=v.fromClass(class{decorations;constructor(n){this.decorations=this.findHashtags(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findHashtags(n.view))}findHashtags(n){const e=new S,t=/#[\w-]+/g;for(const{from:s,to:i}of n.visibleRanges){const o=n.state.doc.sliceString(s,i);let a;for(;a=t.exec(o);){const r=s+a.index,l=r+a[0].length,c=n.state.doc.lineAt(r);if(r>c.from){const m=n.state.doc.sliceString(r-1,r);if(/\s/.test(m)===!1)continue}const h=/https?:\/\/[^\s]+/g;let d,u=!1;for(;d=h.exec(c.text);){const m=c.from+d.index,f=m+d[0].length;if(r>=m&&l<=f){u=!0;break}}u||e.add(r,l,Le)}}return e.finish()}},{decorations:n=>n.decorations}),De=C.mark({class:"cm-wikilink"}),Ie=v.fromClass(class{decorations;constructor(n){this.decorations=this.findWikilinks(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findWikilinks(n.view))}findWikilinks(n){const e=new S,t=/\[\[([^\[\]]+?)\]\]/g;for(const{from:s,to:i}of n.visibleRanges){const o=n.state.doc.sliceString(s,i);let a;for(;a=t.exec(o);){const r=s+a.index,l=r+a[0].length;e.add(r,l,De)}}return e.finish()}},{decorations:n=>n.decorations}),Te=C.mark({class:"cm-checkbox-todo"}),Ae=C.mark({class:"cm-checkbox-done"}),Ne=C.mark({class:"cm-checkbox-doing"}),Pe=v.fromClass(class{decorations;constructor(n){this.decorations=this.findCheckboxes(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findCheckboxes(n.view))}findCheckboxes(n){const e=new S,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:s,to:i}of n.visibleRanges){const o=n.state.doc.sliceString(s,i);let a;for(;a=t.exec(o);){const r=a[2],l=s+a.index+a[0].indexOf("["),c=l+3;r===" "?e.add(l,c,Te):r==="x"?e.add(l,c,Ae):r==="-"&&e.add(l,c,Ne)}}return e.finish()}},{decorations:n=>n.decorations}),Re=C.mark({class:"cm-timestamp"}),Me=v.fromClass(class{decorations;constructor(n){this.decorations=this.findTimestamps(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findTimestamps(n.view))}findTimestamps(n){const e=new S,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:s,to:i}of n.visibleRanges){const o=n.state.doc.sliceString(s,i);let a;for(;a=t.exec(o);){const r=a[0],l=a[1],c=s+a.index+r.indexOf(l),h=c+l.length;e.add(c,h,Re)}}return e.finish()}},{decorations:n=>n.decorations}),Be=C.mark({class:"cm-naked-link"}),He=v.fromClass(class{decorations;constructor(n){this.decorations=this.findLinks(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findLinks(n.view))}findLinks(n){const e=new S,t=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:s,to:i}of n.visibleRanges){const o=n.state.doc.sliceString(s,i);let a;for(;a=t.exec(o);){const r=n.state.doc.lineAt(s+a.index);if(/\[.*\]\(.*\)/.test(r.text))continue;const l=s+a.index,c=l+a[0].length;e.add(l,c,Be)}}return e.finish()}},{decorations:n=>n.decorations}),Ge=C.line({class:"cm-blockquote"}),Oe=v.fromClass(class{decorations;constructor(n){this.decorations=this.findBlockquotes(n)}update(n){(n.docChanged||n.viewportChanged)&&(this.decorations=this.findBlockquotes(n.view))}findBlockquotes(n){const e=new S,t=/^\s*>\s/;for(const{from:s,to:i}of n.visibleRanges){let o=s;for(;o<=i;){const a=n.state.doc.lineAt(o);t.test(a.text)&&e.add(a.from,a.from,Ge),o=a.to+1}}return e.finish()}},{decorations:n=>n.decorations}),qe=[$e,Ie,Pe,Me,He,Oe],G=te.define(se),ze=ne({base:re,codeLanguages:[A.of({name:"javascript",load:()=>Promise.resolve(W())}),A.of({name:"html",load:()=>Promise.resolve(K())}),A.of({name:"css",load:()=>Promise.resolve(j())})]});function O(n){const e=n.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return G}switch(t){case"js":return W();case"css":return j();case"html":return K();case"json":return ae();case"xml":return oe();case"yaml":case"yml":return ie();case"sh":case"bash":case"zsh":return G;default:return ze}}const Ue=C.mark({class:"cm-diff-inserted"});function q(n,e){const t=[],s=e.doc.toString(),i=T(n,s);let o=0;for(const[a,r]of i)a===T.INSERT&&t.push(Ue.range(o,o+r.length)),a!==T.DELETE&&(o+=r.length);return C.set(t)}const N=new R;function Ve(n){return ce.define({create(e){return q(n,e)},update(e,t){return t.docChanged?q(n,t.state):e.map(t.changes)},provide:e=>F.decorations.from(e)})}const We=v.fromClass(class{constructor(n){this.view=n,this.statusBar=document.createElement("div"),this.statusBar.className="token-status-bar",this.countElement=document.createElement("span"),this.countElement.className="token-count",this.statusBar.appendChild(this.countElement);const e=n.dom.closest("main");e?e.appendChild(this.statusBar):n.dom.parentNode.insertBefore(this.statusBar,n.dom.nextSibling),this.debouncedUpdate=V(this.updateTokenCount.bind(this),250),this.updateTokenCount()}update(n){n.docChanged&&this.debouncedUpdate()}updateTokenCount(){try{const n=this.view.state.doc.toString(),e=we(n);this.countElement.textContent=`Tokens: ${e.toLocaleString()}`}catch(n){console.warn("Token counting error:",n),this.countElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function Ke(){return We}const L=le.define();class D{static editors=[];constructor({url:e,target:t="body > main",editorConfig:s={},gitClient:i}={}){if(!i)throw new Error("Editor requires a gitClient instance.");window.location.hash||(window.location.hash="#/README"),this.targetSelector=t,this.url=e||window.location.hash,this.editorConfig=s,this.gitClient=i,this.editorView=null,this.sidebar=null,this.filePath=this.getFilePath(this.url),this.isReady=!1,this.languageCompartment=new R,this.tokenCounterCompartment=new R,this.debouncedHandleUpdate=V(this.handleUpdate.bind(this),500),this.init()}async init(){const e=document.querySelector(this.targetSelector);if(!e){console.error(`Target container not found: ${this.targetSelector}`);return}await this.gitClient.initRepo(),this.sidebar=new ve({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),Fe(this.gitClient,this.sidebar);const t=await this.gitClient.readFile(this.filePath),s=document.getElementById("loading-indicator");s&&s.remove(),e.style.display="flex";const i=F.updateListener.of(o=>{o.docChanged&&!o.transactions.some(a=>a.annotation(L))&&this.debouncedHandleUpdate(o.state.doc.toString())});de.map("jj","<Esc>","insert"),this.editorView=new F({doc:t,extensions:[he(),ue,me.of([fe]),F.lineWrapping,ge,ke,this.languageCompartment.of(O(this.filePath)),i,...qe,N.of([]),this.tokenCounterCompartment.of(Ke()),...this.editorConfig.extensions||[]],parent:e}),D.editors.push(this),this.isReady=!0,this.listenForNavigation(),this.editorView.focus()}async showDiff(e){if(e===null){console.error("Cannot show diff, original content is null."),this.hideDiff();return}const t=Ve(e);this.editorView.dispatch({effects:N.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:N.reconfigure([])})}listenForNavigation(){window.addEventListener("hashchange",async()=>{this.hideDiff();const e=this.getFilePath(window.location.hash);e!==this.filePath&&await this.loadFile(e)})}async previewHistoricalFile(e,t,s){const[i,o]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(s,e)]);if(i===null||o===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:i},annotations:L.of(!0)}),this.showDiff(o)}async loadFile(e){console.log(`Loading ${e}...`),this.hideDiff();const t=await this.gitClient.readFile(e);this.filePath=e;const s=O(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(s)});const i=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:i.length,insert:t},annotations:L.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){console.log(`[forceReloadFile] Forcibly reloading ${e} from disk.`);const t=await this.gitClient.readFile(e);this.filePath=e;const s=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:s.length,insert:t},annotations:L.of(!0)}),this.hideDiff()}async handleUpdate(e){if(this.isReady){if(this.filePath!==this.getFilePath(window.location.hash)){console.log("In preview mode, not saving changes.");return}console.log(`Saving ${this.filePath}...`),await this.gitClient.writeFile(this.filePath,e),this.sidebar&&await this.sidebar.refresh()}}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),(t==="/"||t==="")&&(t="/README"),t}}window.Editor=D;function je(){_e(),Je()}function _e(){const n=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!n||!e||!t)return;const s=document.createElement("button");s.id="sidebar-toggle-icon",s.title="Toggle Sidebar",e.appendChild(s);let i=0,o=!1;const a=()=>{if(n.classList.contains("sidebar-collapsed")){const m=localStorage.getItem("sidebarWidth")||"250px";n.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",m),localStorage.setItem("sidebarCollapsed","false"),s.textContent="‹"}else{const m=document.documentElement.style.getPropertyValue("--sidebar-width");m!=="0px"&&localStorage.setItem("sidebarWidth",m),n.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),s.textContent="›"}},r=u=>{u.type==="touchmove"&&u.preventDefault();const m=u.clientX||u.touches&&u.touches[0].clientX;if(Math.abs(m-i)>5&&(o=!0),o){const f=Math.max(24,Math.min(m,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${f}px`),n.classList.remove("sidebar-collapsed"),s.textContent="‹"}},l=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",r),document.removeEventListener("touchmove",r),document.removeEventListener("mouseup",l),document.removeEventListener("touchend",l),o){const u=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",u),localStorage.setItem("sidebarCollapsed","false")}else a()},c=u=>{i=u.clientX||u.touches&&u.touches[0].clientX,o=!1,u.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",r,{passive:!1}),document.addEventListener("touchmove",r,{passive:!1}),document.addEventListener("mouseup",l),document.addEventListener("touchend",l)};e.addEventListener("mousedown",c),e.addEventListener("touchstart",c,{passive:!1});const h=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(n.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),s.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",h||"250px"),s.textContent="‹")}function Je(){const n=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!n||!e)return;const s=document.createElement("button");s.id="eruda-toggle",s.title="Toggle Eruda Panel",e.appendChild(s);let i=0,o=!1;const a=()=>{if(!t)return;t.style.height==="0px"||t.offsetHeight<10?(t.style.height="250px",s.textContent="▼",localStorage.setItem("erudaCollapsed","false"),localStorage.setItem("erudaHeight","250px")):(localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",s.textContent="▲",localStorage.setItem("erudaCollapsed","true"))},r=d=>{d.type==="touchmove"&&d.preventDefault();const u=d.clientY||d.touches&&d.touches[0].clientY;if(Math.abs(u-i)>5&&(o=!0),!o)return;const m=window.innerHeight-u,f=42,p=window.innerHeight-100;t.style.height=`${Math.max(f,Math.min(m,p))}px`,s.textContent="▼"},l=d=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",r),document.removeEventListener("touchmove",r),document.removeEventListener("mouseup",l),document.removeEventListener("touchend",l),setTimeout(()=>{o&&(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false"))},0)},c=d=>{i=d.clientY||d.touches&&d.touches[0].clientY,o=!1,d.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",r),document.addEventListener("touchmove",r,{passive:!1}),document.addEventListener("mouseup",l),document.addEventListener("touchend",l))};e.addEventListener("mousedown",c),e.addEventListener("touchstart",c,{passive:!1}),e.addEventListener("click",()=>{o||a()});const h=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",s.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",s.textContent="▼"),h.disconnect())});h.observe(n,{childList:!0})}async function _(n,e){const t=n.pfs;let s=[];try{const i=await t.readdir(e);for(const o of i){if(o===".git")continue;const a=`${e==="/"?"":e}/${o}`;try{(await t.stat(a)).isDirectory()?s=s.concat(await _(n,a)):s.push(a)}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return s}async function Xe(n,e){e("Starting export...");const t=new $;if(!n||n.length===0)throw new Error("No gardens were selected for export.");for(const r of n){e(`Processing garden: "${r}"...`);const l=t.folder(r),c=new E(r),h=await _(c,"/");for(const d of h){const u=await c.readFile(d),m=d.startsWith("/")?d.substring(1):d;l.file(m,u)}}e("Generating zip file...");const s=await t.generateAsync({type:"blob"}),o=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,a=document.createElement("a");a.href=URL.createObjectURL(s),a.download=o,document.body.appendChild(a),a.click(),document.body.removeChild(a),e(`Export process initiated: ${o}`)}async function Ye(n){const e=await $.loadAsync(n),t=new Set;return e.forEach(s=>{if(s.includes("/")){const i=s.split("/")[0];t.add(i)}}),Array.from(t).sort()}async function Ze(n,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${n.name}...`);const s=await $.loadAsync(n);t("Zip file loaded. Starting import of selected gardens...");const i=[];s.forEach((o,a)=>{if(a.dir)return;const r=o.split("/")[0];if(e.includes(r)){const l=`/${o.substring(r.length+1)}`,c=a.async("string").then(async h=>{t(`  Importing: ${r}${l}`);const d=new E(r);await d.initRepo(),await d.writeFile(l,h)});i.push(c)}}),await Promise.all(i),t("Import complete! Reloading page..."),setTimeout(()=>{window.location.reload()},1500)}async function Qe(n,e){if(!n||n.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let s=t?JSON.parse(t):[];for(const i of n){e(`Deleting garden: "${i}"...`),s=s.filter(a=>a!==i);const o=`garden-fs-${i}`;await new Promise((a,r)=>{const l=indexedDB.deleteDatabase(o);l.onsuccess=()=>{e(`  Successfully deleted database: ${o}`),a()},l.onerror=c=>{e(`  Error deleting database: ${o}`),r(c.target.error)},l.onblocked=()=>{e(`  Deletion blocked for ${o}. Please refresh and try again.`),r(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(s)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const i=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(n.includes(i)||s.length===0){const o=new URL(import.meta.url).pathname,a=o.lastIndexOf("/src/"),r=a>-1?o.substring(0,a):"";window.location.href=`${window.location.origin}${r}/home`}else window.location.reload()},2e3)}function P(n,e,t=!0){const s=e.map(i=>`
    <label style="display: block; margin: 8px 0; font-family: monospace; cursor: pointer;">
      <input type="checkbox" class="garden-select-checkbox" value="${i}" ${t?"checked":""} style="margin-right: 8px; vertical-align: middle;">
      <span style="vertical-align: middle;">${i}</span>
    </label>
  `).join("");return`
    <div style="font-family: Arial, sans-serif;">
      <p style="margin-top: 0;">${n}</p>
      <div style="margin-bottom: 10px;">
        <button type="button" class="select-all-btn" style="margin-right: 5px;">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list" style="max-height: 200px; overflow-y: auto; border: 1px solid #444; padding: 10px; border-radius: 3px;">
        ${s}
      </div>
    </div>
  `}function et(){const n=document.getElementById("eruda-container");return n?(B.init({container:n,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1}),setTimeout(()=>{const t=n.querySelector(".eruda-elements");if(!t)return;let s=!1;new MutationObserver(()=>{const o=t.style.display!=="none";if(o&&!s){const a=document.querySelector(".eruda-control > .eruda-icon-select");a&&(a.click(),a.click())}s=o}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),B.add({name:"Data",init(t){this._$el=t,t.html(`
        <div style="padding: 10px; font-family: Arial, sans-serif; color: #ccc;">
          <h2 style="margin-top:0;">Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">
          
          <hr style="border: none; border-top: 1px solid #444; margin: 25px 0;">
          <h3 style="color: #F44747;">Danger Zone</h3>
          <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
        </div>
        <style>
          .eruda-button { 
            padding: 8px 12px; background-color: #4EC9B0; color: #111; 
            border: none; border-radius: 3px; cursor: pointer; font-weight: bold;
          }
          .eruda-button:hover { background-color: #5FDCC4; }
          .eruda-button.destructive { background-color: #F44747; color: #fff; }
          .eruda-button.destructive:hover { background-color: #FF5A5A; }
        </style>
      `);const s=t.find("#export-btn")[0],i=t.find("#import-btn")[0],o=t.find("#import-file-input")[0],a=t.find("#clear-data-btn")[0];s.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),l=r?JSON.parse(r):["home"],c=new y({title:"Select Gardens to Export"});c.updateContent(P("Choose which gardens to include in the export:",l));const h=c.content;h.querySelector(".select-all-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),h.querySelector(".select-none-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const d=async()=>{const u=Array.from(h.querySelectorAll(".garden-select-checkbox:checked")).map(w=>w.value);c.destroy();const m=new y({title:"Exporting Gardens..."});m.updateContent("<p>Preparing export. Please wait...</p>");let f=!1,p="";m.addFooterButton("Cancel",()=>{f=!0,m.destroy(),console.log("Export cancelled by user.")}),m.show();try{await Xe(u,w=>{if(f)throw new Error("Export cancelled by user.");console.log(w),p+=w+"<br>",m.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${p}</div>`)}),f||(m.clearFooter(),m.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>m.destroy(),3e3))}catch(w){f||(console.error("Export failed:",w.message),m.clearFooter(),m.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${w.message}</p>`),m.addFooterButton("Close",()=>m.destroy()))}};c.addFooterButton("Export Selected",d),c.addFooterButton("Cancel",()=>c.destroy()),c.show()}),i.addEventListener("click",()=>o.click()),o.addEventListener("change",async()=>{const r=o.files[0];if(!r)return;const l=new y({title:"Select Gardens to Import"});l.updateContent("Scanning zip file..."),l.show();try{const c=await Ye(r);if(c.length===0){l.updateContent("No valid gardens found in this zip file."),l.addFooterButton("Close",()=>l.destroy());return}l.updateContent(P(`Found ${c.length} garden(s). Select which to import:`,c));const h=l.content;h.querySelector(".select-all-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),h.querySelector(".select-none-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const d=async()=>{const u=Array.from(h.querySelectorAll(".garden-select-checkbox:checked")).map(f=>f.value);l.clearFooter(),l.updateContent("Starting import...");let m="";try{await Ze(r,u,f=>{m+=`${f}<br>`,l.updateContent(m)})}catch(f){console.error("Import failed:",f),l.updateContent(`<strong>Error during import:</strong><br>${f.message}`),l.addFooterButton("Close",()=>l.destroy())}};l.addFooterButton("Import Selected",d),l.addFooterButton("Cancel",()=>l.destroy())}catch(c){console.error("Failed to read zip file:",c),l.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${c.message}`),l.addFooterButton("Close",()=>l.destroy())}finally{o.value=""}}),a.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),l=r?JSON.parse(r):[],c=new y({title:"Clear Garden Data"});c.updateContent(P("Select gardens to permanently delete:",l,!1));const h=c.content;h.querySelector(".select-all-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(m=>m.checked=!0),h.querySelector(".select-none-btn").onclick=()=>h.querySelectorAll(".garden-select-checkbox").forEach(m=>m.checked=!1);const d=async()=>{const m=Array.from(h.querySelectorAll(".garden-select-checkbox:checked")).map(p=>p.value);c.clearFooter(),c.updateContent("Starting deletion...");let f="";try{await Qe(m,p=>{f+=`${p}<br>`,c.updateContent(f)})}catch(p){console.error("Deletion failed:",p),c.updateContent(`<strong>Error during deletion:</strong><br>${p.message}`),c.addFooterButton("Close",()=>c.destroy()).classList.add("destructive")}};c.addFooterButton("Delete Selected",d).classList.add("destructive"),c.addFooterButton("Cancel",()=>c.destroy()),c.show()})},show(){this._$el.show()},hide(){this._$el.hide()}})):void 0}class tt{constructor({gitClient:e,editor:t}){if(!e||!t)throw new Error("CommandPalette requires a gitClient and editor instance.");this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="cp-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="cp-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.input=document.createElement("input"),this.input.type="text",this.input.className="cp-input",this.input.placeholder="Find file across all gardens...",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="cp-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],s=[];await Promise.all(t.map(async i=>{const o=new E(i),a=await this.editor.sidebar.listFiles(o,"/");for(const r of a)s.push({garden:i,path:r,searchString:`${i} ${r.substring(1)}`.toLowerCase()})})),this.crossGardenFileCache=s}async open(){if(!this.isOpen){if(this.isOpen=!0,this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const e=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=e,this.input.disabled=!1,this.input.focus()}this.search("")}}close(){this.isOpen&&(this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown))}search(e){this.query=e.toLowerCase(),this.query?this.results=this.crossGardenFileCache.filter(t=>{let s=0,i=0;for(;s<this.query.length&&i<t.searchString.length;)this.query[s]===t.searchString[i]&&s++,i++;return s===this.query.length}).sort((t,s)=>{const i=t.garden===this.gitClient.gardenName,o=s.garden===this.gitClient.gardenName;return i&&!o?-1:!i&&o?1:0}):this.results=this.crossGardenFileCache.filter(t=>t.garden===this.gitClient.gardenName).slice(0,100),this.selectedIndex=0,this.renderResults()}renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="cp-no-results">No matches found</li>';return}this.results.forEach((e,t)=>{const s=document.createElement("li");s.className="cp-result-item",s.dataset.index=t;const i=e.path.startsWith("/")?e.path.substring(1):e.path;e.garden!==this.gitClient.gardenName?s.innerHTML=`<span class="cp-path">${i}</span> <span class="cp-garden">${e.garden}</span>`:s.textContent=i,t===this.selectedIndex&&(s.classList.add("active"),s.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(s)})}selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(t.garden!==this.gitClient.gardenName){const s=new URL(import.meta.url).pathname,i=s.lastIndexOf("/src/"),o=i>-1?s.substring(0,i):"";window.location.href=`${window.location.origin}${o}/${encodeURIComponent(t.garden)}#${encodeURIComponent(t.path)}`}else window.location.hash=`#${encodeURIComponent(t.path)}`;this.close()}handleInput(e){this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".cp-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}window.Buffer=Z;window.thoughtform={};const J=new URL(import.meta.url).pathname,z=J.lastIndexOf("/src/"),M=z>-1?J.substring(0,z):"";let x=window.location.pathname.startsWith(M)?window.location.pathname.substring(M.length):window.location.pathname;x=x.replace(/^\/|\/$/g,"")||"home";x=decodeURIComponent(x);console.log(`Base Path: "${M}"`);console.log(`Loading garden: "${x}"`);const X=new E(x);je();et();const U=new D({target:"main",gitClient:X}),st=setInterval(()=>{if(U.isReady){clearInterval(st);const n=new tt({gitClient:X,editor:U});window.thoughtform.commandPalette=n,window.addEventListener("keydown",e=>{(navigator.platform.toUpperCase().indexOf("MAC")>=0?e.metaKey:e.ctrlKey)&&e.key==="k"&&(e.preventDefault(),n.open())})}},100);
