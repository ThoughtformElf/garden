import{Q as be,e as f,R as A,U as ie,V as j,W as Ce}from"./chunk-vendor.js";import{E as I,H as ve,s as Se,D as k,V as P,R as T,S as oe,k as re,a as q,W as Ee,b as xe,c as ke,m as $e,L as O,j as ae,h as ce,d as le,y as Le,x as Pe,e as Te,f as Me,C as H,A as Fe,g as Ne,v as Ie,i as De,l as Re,n as Ae}from"./chunk-codemirror.js";import{F as Oe,g as v,i as V}from"./chunk-git.js";import{c as Be}from"./chunk-gpt-tokenizer.js";import{e as F}from"./chunk-eruda.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function t(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=t(n);fetch(n.href,o)}})();var de=!1;try{var B={};Object.defineProperty(B,"passive",{get(){return de=!0,!1}}),window.addEventListener("testpassive",null,B),window.removeEventListener("testpassive",null,B)}catch{}if(de){var _e=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(i,e,t){var s=t&&typeof t=="object",n=s?t.capture:t,o=s?Object.assign({},t):{};return o.passive===void 0&&(i==="touchstart"||i==="touchmove"||i==="wheel")&&(o.passive=!0),o.capture===void 0&&(o.capture=!!n),_e.call(this,i,e,o)}}class Y{constructor({targetSelector:e,items:t,containerItems:s=[],itemSelector:n,dataAttribute:o}){if(this.targetSelector=e,this.items=t,this.containerItems=s,this.itemSelector=n,o){const r=o.replace("data-","");this.dataAttributeKey=r.replace(/-([a-z])/g,a=>a[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const s=this.itemSelector?e.target.closest(this.itemSelector):null;s?this.showMenu(e.clientX,e.clientY,this.items,s):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const s=this.itemSelector?e.target.closest(this.itemSelector):null,n=s?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,n,s||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,s,n){this.menuElement.innerHTML="",this.menuElement.style.display="block";const o=this.dataAttributeKey&&n.dataset[this.dataAttributeKey]?n.dataset[this.dataAttributeKey]:null;s.forEach(u=>{if(u.type==="separator"){const m=document.createElement("div");m.className="context-menu-separator",this.menuElement.appendChild(m);return}const g=document.createElement("button");g.className="context-menu-item",g.textContent=u.label,g.addEventListener("click",()=>{u.action(o),this.hideMenu()}),this.menuElement.appendChild(g)});const r=this.menuElement.offsetWidth,a=this.menuElement.offsetHeight,{innerWidth:c,innerHeight:l}=window;let d=e,h=t;e+r>c&&(d=c-r-5),t+a>l&&(h=l-a-5),this.menuElement.style.top=`${h}px`,this.menuElement.style.left=`${d}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class w{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const s=document.createElement("button");return s.textContent=e,s.addEventListener("click",t),this.footer.appendChild(s),s}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:s=""}){return new Promise(n=>{const o=new w({title:e}),r=`modal-input-${Date.now()}`,a=`
        <div class="modal-prompt">
          <label for="${r}">${t}</label>
          <input type="text" id="${r}" value="${s}">
        </div>
      `;o.updateContent(a);const c=o.content.querySelector(`#${r}`),l=()=>{n(c.value),o.destroy()},d=()=>{n(null),o.destroy()};c.addEventListener("keydown",h=>{h.key==="Enter"?(h.preventDefault(),l()):h.key==="Escape"&&d()}),o.addFooterButton("OK",l),o.addFooterButton("Cancel",d),o.show(),c.focus(),c.select()})}static confirm({title:e,message:t,okText:s="OK",cancelText:n="Cancel",destructive:o=!1}){return new Promise(r=>{const a=new w({title:e});a.updateContent(`<p>${t}</p>`);const c=()=>{r(!0),a.destroy()},l=()=>{r(!1),a.destroy()},d=a.addFooterButton(s,c);o&&d.classList.add("destructive"),a.addFooterButton(n,l),a.show()})}static choice({title:e,message:t,choices:s}){return new Promise(n=>{const o=new w({title:e});o.updateContent(t),s.forEach(a=>{const c=o.addFooterButton(a.text,()=>{n(a.id),o.destroy()});a.class&&c.classList.add(a.class)});const r=a=>{a.key==="Escape"&&(n(null),o.destroy(),document.removeEventListener("keydown",r))};document.addEventListener("keydown",r),o.show()})}static selection({title:e,peerData:t,okText:s="Request"}){return new Promise(n=>{if(t.size===0){const l=new w({title:"No Peers Found"});l.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),l.addFooterButton("OK",()=>{l.destroy(),n(null)}),l.show();return}const o=new w({title:e});let r='<div class="peer-selection-container">';t.forEach((l,d)=>{const h=d.substring(0,8);r+=`
          <div class="peer-group" data-peer-id="${d}">
            <strong class="peer-title">Peer: ${h}...</strong>
            <div class="garden-checkbox-list">
              ${l.gardens.map(u=>`
                <label>
                  <input type="checkbox" class="garden-select-checkbox" value="${u}">
                  <span>${u}</span>
                </label>
              `).join("")}
            </div>
          </div>
        `}),r+="</div>",o.updateContent(r);const a=()=>{const l={};o.content.querySelectorAll(".peer-group").forEach(d=>{const h=d.dataset.peerId,u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);u.length>0&&(l[h]=u)}),n(Object.keys(l).length>0?l:null),o.destroy()},c=()=>{n(null),o.destroy()};o.addFooterButton(s,a),o.addFooterButton("Cancel",c),o.show()})}}const Ge={async renderFiles(i){try{const e=await this.listFiles(this.gitClient,"/"),t=new Map;for(const[o,r,a]of i)r!==a&&t.set(`/${o}`,"modified");const s=decodeURIComponent(window.location.hash.substring(1)),n=e.sort().map(o=>{const r=`#${o}`,a=t.get(o)||"unmodified",c=o.startsWith("/")?o.substring(1):o,l=[`status-${a}`];return o===s&&l.push("active"),`<li><a href="${r}" class="${l.join(" ")}" data-filepath="${o}">${c}</a></li>`}).join("");this.contentContainer.innerHTML=`<ul>${n}</ul>`}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleNewFile(){const i=await w.prompt({title:"New File",label:"Enter new file name:"});if(!i)return;const e=`/${i}`;try{await this.gitClient.pfs.stat(e),await this.showAlert({title:"File Exists",message:`File "${i}" already exists.`})}catch(t){t.code==="ENOENT"?(await this.gitClient.writeFile(e,""),window.location.hash=`#${e}`):(console.error("Error checking for file:",t),await this.showAlert({title:"Error",message:"An error occurred while creating the file."}))}},async handleRename(i){const e=await w.prompt({title:"Rename File",label:`Enter new name for ${i.substring(1)}:`,defaultValue:i.substring(1)});if(!e||e===i.substring(1))return;const t=`/${e}`;try{const s=t.substring(0,t.lastIndexOf("/"));s&&await this.ensureDir(s),await this.gitClient.pfs.rename(i,t),decodeURIComponent(window.location.hash)===`#${i}`?window.location.hash=`#${t}`:await this.refresh()}catch(s){console.error("Error renaming file:",s),await this.showAlert({title:"Error",message:"Failed to rename file. Check console for details."})}},async handleDuplicate(i){const e=i.substring(0,i.lastIndexOf("/")),t=i.substring(i.lastIndexOf("/")+1),s=t.lastIndexOf("."),n=s>0;let o;if(n){const c=t.substring(0,s),l=t.substring(s);o=`${c} (copy)${l}`}else o=`${t} (copy)`;const r=await w.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:o});if(!r)return;const a=`${e}/${r}`;try{const c=await this.gitClient.readFile(i);await this.gitClient.writeFile(a,c),await this.refresh()}catch(c){console.error("Error duplicating file:",c),await this.showAlert({title:"Error",message:"Failed to duplicate file."})}},async handleDelete(i){if(await this.showConfirm({title:"Delete File",message:`Are you sure you want to permanently delete "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=decodeURIComponent(window.location.hash)===`#${i}`;await this.gitClient.pfs.unlink(i),t?window.location.hash="#/home":await this.refresh()}catch(t){console.error("Error deleting file:",t),await this.showAlert({title:"Error",message:"Failed to delete file."})}}};class ${constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new Oe(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),this.registerNewGarden();return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await v.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/home",e,"utf8"),this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async rmrf(e){try{if((await this.pfs.stat(e)).isDirectory()){const s=await this.pfs.readdir(e);for(const n of s)await this.rmrf(`${e}/${n}`);await this.pfs.rmdir(e)}else await this.pfs.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async clearWorkdir(){const e=await this.pfs.readdir("/");for(const t of e)t!==".git"&&await this.rmrf(`/${t}`)}async ensureDir(e){const t=e.split("/").filter(n=>n);let s="";for(const n of t){s+=`/${n}`;try{await this.pfs.stat(s)}catch(o){if(o.code==="ENOENT")try{await this.pfs.mkdir(s)}catch(r){if(r.code!=="EEXIST")throw r}else throw o}}}async listAllFilesForClone(e="/"){let t=[];const s=await this.pfs.readdir(e);for(const n of s){const o=`${e==="/"?"":e}/${n}`;(await this.pfs.stat(o)).isDirectory()?t=t.concat(await this.listAllFilesForClone(o)):t.push(o)}return t}async stage(e){const t=e.startsWith("/")?e.substring(1):e,n=(await this.getStatuses()).find(r=>r[0]===t);if(!n){console.error(`Could not find status for "${t}". Cannot stage.`);return}n[2]===0?await v.remove({fs:this.fs,dir:"/",filepath:t}):await v.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await v.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){const t=e.startsWith("/")?e.substring(1):e;try{const n=(await this.getStatuses()).find(r=>r[0]===t);if(!n)return;n[1]===0?await this.pfs.unlink(e):await v.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0})}catch(s){console.error(`[discard] An error occurred for ${e}:`,s)}}async commit(e){const t=await v.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async push(e,t,s){return await v.push({fs:this.fs,http:V,dir:"/",url:e,onProgress:n=>s(`${n.phase}: ${n.loaded}/${n.total}`),onAuth:()=>({username:t})})}async pull(e,t,s){return await v.pull({fs:this.fs,http:V,dir:"/",url:e,onProgress:n=>s(`${n.phase}: ${n.loaded}/${n.total}`),onAuth:()=>({username:t}),author:{name:"User",email:"user@thoughtform.garden"},singleBranch:!0,fastForward:!0})}async log(){try{return await v.log({fs:this.fs,dir:"/",depth:20})}catch{return[]}}async getChangedFiles(e){try{const{commit:t}=await v.readCommit({fs:this.fs,dir:"/",oid:e}),s=t.parent[0];if(!s)return(await v.listFiles({fs:this.fs,dir:"/",ref:e})).map(o=>`/${o}`);const n=[];return await v.walk({fs:this.fs,dir:"/",trees:[v.TREE({ref:s}),v.TREE({ref:e})],map:async(o,[r,a])=>{if(o===".")return;const c=r&&await r.oid(),l=a&&await a.oid();if(c===l)return;(a?await a.type():await r.type())==="blob"&&n.push(`/${o}`)}}),n}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const s=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const n=e==="HEAD"?await v.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:o}=await v.readBlob({fs:this.fs,dir:"/",oid:n,filepath:s});return new TextDecoder().decode(o)}catch(n){return n.name==="NotFoundError"?"":null}}async readFile(e){try{return await this.pfs.readFile(e,"utf8")}catch{return`// "${e}" does not exist yet, type anywhere to create it.`}}async readFileAsBuffer(e){try{return await this.pfs.readFile(e)}catch{return null}}async writeFile(e,t){const s=typeof t=="string"?"utf8":void 0;try{await this.pfs.writeFile(e,t,s),this.markGardenAsDirty(!0)}catch(n){if(n.code==="ENOENT"){const o=e.substring(0,e.lastIndexOf("/"));if(o&&o!=="/")try{await this.ensureDir(o),await this.pfs.writeFile(e,t,s),this.markGardenAsDirty(!0)}catch(r){throw r}else throw n}else throw n}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),s=t?JSON.parse(t):[],n=s.indexOf(this.gardenName);e&&n===-1?s.push(this.gardenName):!e&&n!==-1&&s.splice(n,1),localStorage.setItem("dirty_gardens",JSON.stringify(s))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return v.statusMatrix({fs:this.fs,dir:"/"})}}const Ue={async renderGardens(){try{const i=localStorage.getItem("thoughtform_gardens"),e=i?JSON.parse(i):[],t=localStorage.getItem("dirty_gardens"),s=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let n="";for(const o of e.sort()){const r=decodeURIComponent(o),a=s.has(r),c=`/${encodeURIComponent(o)}`,l=this.gitClient.gardenName===r,d=[];l&&d.push("active"),a&&d.push("status-modified"),n+=`<li><a href="${c}" class="${d.join(" ")}" data-garden-name="${o}">${r}</a></li>`}this.contentContainer.innerHTML=`<ul>${n}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(o=>{o.addEventListener("click",r=>{this.gitClient.gardenName!==r.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(i){console.error("Error rendering garden list:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const i=await w.prompt({title:"New Garden",label:"Enter new garden name:"});if(!i||!i.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(i)){await this.showAlert({title:"Garden Exists",message:`Garden "${i}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(i)}`},async handleDuplicateGarden(i){if(!i)return;const t=`${decodeURIComponent(i)} (copy)`,s=await w.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!s||!s.trim()||s===i)return;const n=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const o=new $(i),r=new $(s);await r.initRepo();const a=await this.listFiles(o,"/");let c=0;for(const l of a){c++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${c} of ${a.length}:<br>${l.substring(1)}</p>`;const d=await o.readFile(l);await r.writeFile(l,d)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(s)}`)},500)}catch(o){console.error("Error duplicating garden:",o),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=n}},100)},async handleDeleteGarden(i){if(!i)return;if(i==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let s=t?JSON.parse(t):[];s=s.filter(o=>o!==i),localStorage.setItem("thoughtform_gardens",JSON.stringify(s));const n=`garden-fs-${i}`;await new Promise((o,r)=>{const a=indexedDB.deleteDatabase(n);a.onsuccess=()=>o(),a.onerror=c=>r(c.target.error),a.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),r(new Error("Deletion blocked"))}}),this.gitClient.gardenName===i?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},qe={async renderGitView(){try{const[i,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],s=[];for(const[h,u,g,m]of i){const y=`/${h}`;(u!==g||u!==m)&&(g===m?t.push({filepath:y,status:"staged"}):s.push({filepath:y,status:"unstaged"}))}const n=this.renderRemoteSection(),o=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,r=this.renderFileSection("Changes",s,!1),a=this.renderFileSection("Staged Changes",t,!0),c=this.renderHistorySection(e),l=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${n}
          ${o}
          ${a}
          ${r}
          ${c}
        </div>
      `;const d=this.contentContainer.querySelector("#git-commit-message");d&&(d.value=l),this.addGitViewListeners(),this.updateCommitButtonState()}catch(i){console.error("Error rendering Git view:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderRemoteSection(){const i=this.getRemoteConfig();return`
      <div class="git-remote-section">
        <h3>Remote</h3>
        <input type="text" id="git-remote-url" placeholder="Remote URL" value="${i.url}">
        <input type="password" id="git-remote-auth" placeholder="Username or Token" value="${i.auth}">
        <div class="git-remote-actions">
          <button id="git-pull-button">Pull</button>
          <button id="git-push-button">Push</button>
        </div>
        <div class="git-remote-log" id="git-remote-log">Ready</div>
      </div>
    `},renderFileSection(i,e,t){const s=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let n="";return e.length>0?n=e.map(r=>{const a=r.filepath.startsWith("/")?r.filepath.substring(1):r.filepath;return`
          <li class="git-file-item ${this.editor.filePath===r.filepath?"active":""}" data-filepath="${r.filepath}">
            <span class="git-file-path">${a}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${s}
            </span>
          </li>
        `}).join(""):n=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${i} (${e.length})</h3>
        <ul class="git-file-list">
          ${n}
        </ul>
      </div>
    `},renderHistorySection(i){let e="";return i.length>0?e=i.map(t=>{const s=t.commit.message.split(`
`)[0],n=t.oid.substring(0,7),o=t.commit.author.name,r=new Date(t.commit.author.timestamp*1e3).toLocaleString(),a=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${a}" data-author="${o}" data-date="${r}">
                <div class="git-history-header">
                  <span class="git-history-message">${s}</span>
                  <span class="git-history-oid">${n}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const i=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!i||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,s=i.value.trim().length>0;e.disabled=!(t&&s)},getRemoteConfig(){const i=`thoughtform_remote_config_${this.gitClient.gardenName}`;try{const e=localStorage.getItem(i);if(e)return JSON.parse(e)}catch(e){console.error("Could not parse remote config from localStorage",e)}return{url:"",auth:""}},saveRemoteConfig(i,e){const t=`thoughtform_remote_config_${this.gitClient.gardenName}`,s={url:i,auth:e};localStorage.setItem(t,JSON.stringify(s))},addGitViewListeners(){const i=this.contentContainer.querySelector("#git-remote-url"),e=this.contentContainer.querySelector("#git-remote-auth"),t=this.contentContainer.querySelector("#git-push-button"),s=this.contentContainer.querySelector("#git-pull-button"),n=this.contentContainer.querySelector("#git-remote-log"),o=()=>{this.saveRemoteConfig(i.value,e.value)};i.addEventListener("input",o),e.addEventListener("input",o);const r=async d=>{const h=i.value.trim(),u=e.value.trim();if(!h){n.textContent="Error: Remote URL is required.";return}t.disabled=!0,s.disabled=!0;const g=d==="push"?"Pushing":"Pulling";n.textContent=`${g} to ${h}...`;try{const m=await this.gitClient[d](h,u,y=>{n.textContent=y});m.ok?n.textContent=`${g} complete.`:n.textContent=`Error: ${m.error||"Unknown error"}`,d==="pull"&&(await this.refresh(),await this.editor.forceReloadFile(this.editor.filePath))}catch(m){console.error(`${g} failed:`,m),n.textContent=`Error: ${m.message||"Check console for details."}`}finally{t.disabled=!1,s.disabled=!1}};t.addEventListener("click",()=>r("push")),s.addEventListener("click",()=>r("pull"));const a=this.contentContainer.querySelector("#git-commit-message");a&&!a.dataset.listenerAttached&&(a.dataset.listenerAttached="true",a.addEventListener("input",()=>this.updateCommitButtonState()));const c=this.contentContainer.querySelector(".git-view-container");c&&!c.dataset.listenerAttached&&(c.dataset.listenerAttached="true",c.addEventListener("click",async d=>{const h=d.target,u=h.closest(".git-file-item"),g=h.closest(".git-history-item");if(u){const m=u.dataset.filepath;h.matches(".git-file-path")?(this.editor.filePath!==m&&await this.editor.loadFile(m),this.editor.showDiff(await this.gitClient.readBlob(m))):h.matches(".git-action-button")&&(d.stopPropagation(),h.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${m}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(m),this.editor.filePath===m&&await this.editor.forceReloadFile(m),await this.refresh()):h.classList.contains("stage")?(await this.gitClient.stage(m),await this.renderGitView()):h.classList.contains("unstage")&&(await this.gitClient.unstage(m),await this.renderGitView()))}else if(g&&h.closest(".git-history-header")){const m=g.querySelector(".git-history-details");if(m.style.display!=="none")m.style.display="none";else if(m.style.display="block",!m.dataset.loaded){m.innerHTML='<span class="no-changes">Loading...</span>';const S=g.dataset.oid,p=await this.gitClient.getChangedFiles(S),E=g.dataset.author,C=g.dataset.date,L=p.map(x=>{const z=typeof x=="string"?x:x.path;return`<div class="history-file-path" data-path="${z}">${z.substring(1)}</div>`}).join("");m.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${E}</div>
                      <div><strong>Date:</strong> ${C}</div>
                    </div>
                    <div class="history-file-list">${L||'<span class="no-changes">No files changed.</span>'}</div>
                  `,m.dataset.loaded="true"}}else if(h.closest(".history-file-path")){c.querySelectorAll(".history-file-path.active").forEach(E=>E.classList.remove("active")),h.classList.add("active");const m=h.closest(".git-history-item"),y=h.dataset.path,S=m.dataset.oid,p=m.dataset.parentOid;await this.editor.previewHistoricalFile(y,S,p)}}));const l=this.contentContainer.querySelector("#git-commit-button");l&&!l.dataset.listenerAttached&&(l.dataset.listenerAttached="true",l.addEventListener("click",async()=>{const d=this.contentContainer.querySelector("#git-commit-message"),h=d.value.trim();if(h)try{l.disabled=!0,l.textContent="Committing...",await this.gitClient.commit(h),this.editor.hideDiff(),d.value="",await this.refresh()}catch(u){console.error("Commit failed:",u),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),l.textContent="Commit"}}))}};class He{constructor({target:e,gitClient:t,editor:s}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!s)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=s,this.targetSelector=e;const n=document.querySelector(this.targetSelector);if(!n){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=n,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,Ge),Object.assign(this,Ue),Object.assign(this,qe)}async init(){this.renderTabs(),this.setupContextMenus(),await this.refresh()}async showAlert({title:e="Notice",message:t}){return new Promise(s=>{const n=new w({title:e});n.updateContent(`<p>${t}</p>`),n.addFooterButton("OK",()=>{n.destroy(),s()}),n.show()})}async showConfirm({title:e,message:t,okText:s="OK",destructive:n=!1}){return w.confirm({title:e,message:t,okText:s,destructive:n,cancelText:"Cancel"})}async ensureDir(e){const t=e.split("/").filter(n=>n);let s="";for(const n of t){s+=`/${n}`;try{await this.gitClient.pfs.stat(s)}catch(o){if(o.code==="ENOENT")try{await this.gitClient.pfs.mkdir(s)}catch(r){if(r.code!=="EEXIST")throw r}else throw o}}}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new Y({targetSelector:".sidebar-content.files-view",itemSelector:"[data-filepath]",dataAttribute:"data-filepath",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},...e]}),new Y({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const s=t.target.dataset.tab,n=this.activeTab;if(this.activeTab=s,sessionStorage.setItem("sidebarActiveTab",this.activeTab),n==="Git"&&s!=="Git"){const o=this.editor.getFilePath(window.location.hash);this.editor.loadFile(o)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(s=>{s.classList.toggle("active",s.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,s,n])=>s!==n);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listFiles(e,t){const s=e.pfs;let n=[];try{const o=await s.readdir(t);for(const r of o){if(r===".git")continue;const a=`${t==="/"?"":t}/${r}`;try{(await s.stat(a)).isDirectory()?n=n.concat(await this.listFiles(e,a)):n.push(a)}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No files to list.`)}return n}}const We=be.define(),je=I.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"},".cm-embed-container":{display:"block",padding:"10px 0"},".cm-embedded-image":{maxWidth:"100%",maxHeight:"500px",display:"block",margin:"0 auto",borderRadius:"4px",border:"1px solid var(--color-border)"},".cm-embed-placeholder, .cm-embed-error":{display:"block",padding:"10px",backgroundColor:"var(--color-background-secondary)",borderRadius:"4px",fontStyle:"italic",color:"var(--color-text-secondary)"},".cm-embed-error":{color:"var(--color-text-destructive)"}},{dark:!0}),ze=ve.define([{tag:f.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[f.name,f.deleted,f.character,f.propertyName,f.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[f.processingInstruction,f.string,f.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[f.function(f.variableName),f.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[f.color,f.constant(f.name),f.standard(f.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[f.definition(f.name),f.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[f.typeName,f.className,f.number,f.changed,f.annotation,f.modifier,f.self,f.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[f.operator,f.operatorKeyword,f.url,f.escape,f.regexp,f.link,f.special(f.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[f.meta,f.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:We,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:f.strong,fontWeight:"bold",class:"cm-strong"},{tag:f.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:f.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:f.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:f.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[f.atom,f.bool,f.special(f.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:f.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),Ve=[je,Se(ze)];function Ye(i,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const s=r=>{t.innerHTML=`<p>${r}</p>`,t.classList.add("visible")},n=()=>{t.classList.remove("visible")},o=async(r,a)=>{let c=r;if(r.some(p=>p.isDirectory&&p.name===".git")){const p=await w.choice({title:".git Directory Detected",message:"<p>The content you dropped contains a .git repository. This could unintentionally overwrite your garden's history.</p><p>How would you like to proceed?</p>",choices:[{id:"import_safe",text:"Import Files (Ignore .git folder)"},{id:"cancel",text:"Cancel Import",class:"destructive"}]});if(!p||p==="cancel"){a("Import cancelled by user.","Import cancelled by user.");return}c=r.filter(E=>!(E.isDirectory&&E.name===".git")),a("Ignoring .git directory and proceeding with import.","Ignoring .git directory.")}const d=[],h=[],u=["png","jpg","jpeg","gif","svg","webp","avif"],g=async(p,E)=>{if(p.isFile){const C=await new Promise(x=>p.file(x)),L=`${E}/${C.name}`;C.name.toLowerCase().endsWith(".zip")?h.push(C):d.push({file:C,path:L})}else if(p.isDirectory){const C=p.createReader(),L=await new Promise(x=>C.readEntries(x));for(const x of L)await g(x,`${E}/${p.name}`)}};a("Scanning dropped items...","Scanning dropped items...");for(const p of c)await g(p,"");const m=`Found ${d.length} file(s) and ${h.length} zip archive(s) to process.`;a(m,m);const y=d.map(async({file:p,path:E})=>{let C;const L=p.name.split(".").pop()?.toLowerCase();return u.includes(L)?C=await p.arrayBuffer():C=await p.text(),i.writeFile(E,C)});if((await Promise.allSettled(y)).forEach((p,E)=>{const C=d[E].path;if(p.status==="rejected"){const L=`<span style="color: var(--color-text-destructive);">ERROR:</span> Failed to write "${C}": ${p.reason}`,x=`ERROR: Failed to write "${C}": ${p.reason}`;a(L,x)}else{const L=`<span style="color: var(--color-text-success);">OK:</span> Imported "${C}"`,x=`OK: Imported "${C}"`;a(L,x)}}),h.length>0){const p="Note: Zip archives must be imported via the DevTools > Data panel.";a(p,p)}};window.addEventListener("dragenter",r=>{r.preventDefault(),r.dataTransfer.types.includes("Files")&&s("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",r=>{r.preventDefault()}),window.addEventListener("dragleave",r=>{r.clientX===0&&r.clientY===0&&n()}),window.addEventListener("drop",async r=>{r.preventDefault(),n();const a=r.dataTransfer.items;if(!a||a.length===0)return;const c=Array.from(a).map(l=>l.webkitGetAsEntry()).filter(Boolean);if(c.length>0){const l=new w({title:"Importing Files..."}),d=document.createElement("div");d.style.fontFamily="monospace",d.style.maxHeight="300px",d.style.overflowY="auto",d.style.fontSize="12px",l.updateContent(""),l.content.appendChild(d),l.show();let h="";const u=(g,m)=>{console.log(`[Import Log] ${m}`),h+=`<div>${g}</div>`,d.innerHTML=h,d.scrollTop=d.scrollHeight};try{await o(c,u),u("<strong>Import process complete.</strong>","Import process complete.")}catch(g){const m=`<strong style="color: var(--color-text-destructive);">A critical error occurred: ${g.message}</strong>`,y=`A critical error occurred: ${g.message}`;u(m,y),console.error("[DragDrop] A critical error occurred during import:",g)}finally{l.addFooterButton("Close",()=>l.destroy()),await e.refresh()}}})}const Je=k.mark({class:"cm-hashtag"}),Ke=P.fromClass(class{decorations;constructor(i){this.decorations=this.findHashtags(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findHashtags(i.view))}findHashtags(i){const e=new T,t=/#[\w-]+/g;for(const{from:s,to:n}of i.visibleRanges){const o=i.state.doc.sliceString(s,n);let r;for(;r=t.exec(o);){const a=s+r.index,c=a+r[0].length,l=i.state.doc.lineAt(a);if(a>l.from){const g=i.state.doc.sliceString(a-1,a);if(/\s/.test(g)===!1)continue}const d=/https?:\/\/[^\s]+/g;let h,u=!1;for(;h=d.exec(l.text);){const g=l.from+h.index,m=g+h[0].length;if(a>=g&&c<=m){u=!0;break}}u||e.add(a,c,Je)}}return e.finish()}},{decorations:i=>i.decorations}),D=oe.define({create:()=>({gitClient:null,sidebar:null}),update:(i,e)=>i});async function Xe(i,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listFiles(e.gitClient,"/"),s=i.toLowerCase();for(const n of t)if((n.startsWith("/")?n.substring(1):n).toLowerCase()===s)return n;return null}async function he(i,e){if(!i)return;let t=i.split("|")[0].trim(),s=null;if(t.includes("#")&&([s,t]=t.split("#")),s){t.startsWith("/")||(t=`/${t}`);const n=new URL(import.meta.url).pathname,o=n.lastIndexOf("/src/"),r=o>-1?n.substring(0,o):"";window.location.href=`${window.location.origin}${r}/${encodeURIComponent(s)}#${encodeURIComponent(t)}`}else{const n=await Xe(t,e);let o;n?o=n:o=t.startsWith("/")?t:`/${t}`,window.location.hash=`#${encodeURIComponent(o)}`}}const Ze=re.of([{key:"Mod-Enter",run:i=>{const e=i.state.field(D);if(!e.gitClient)return!1;const t=i.state.selection.main.head,s=i.state.doc.lineAt(t),n=[{type:"wikilink",regex:/\[\[([^\[\]]+?)\]\]/g},{type:"markdown",regex:/\[[^\]]*\]\(([^)]+)\)/g},{type:"naked",regex:/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g}];for(const{type:o,regex:r}of n){let a;for(;a=r.exec(s.text);){const c=s.from+a.index,l=c+a[0].length;if(t>=c&&t<=l){if(o==="wikilink")he(a[1],e);else{let d=o==="markdown"?a[1]:a[0];d.startsWith("www.")&&(d=`https://${d}`),window.open(d,"_blank","noopener,noreferrer")}return!0}}}return!1}}]),Qe=k.mark({class:"cm-wikilink"});class et{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=this.view.state.field(D);t.gitClient&&he(e.textContent.slice(2,-2),t)}onMouseDown(e){const t=e.target.closest(".cm-wikilink");t&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleNavigation(t))}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new T,s=/\[\[([^\[\]]+?)\]\]/g;for(const{from:n,to:o}of e.visibleRanges){const r=e.state.doc.sliceString(n,o);let a;for(;a=s.exec(r);){const c=n+a.index,l=c+a[0].length;t.add(c,l,Qe)}}return t.finish()}}const tt=P.fromClass(et,{decorations:i=>i.decorations}),st=k.mark({class:"cm-checkbox-todo"}),nt=k.mark({class:"cm-checkbox-done"}),it=k.mark({class:"cm-checkbox-doing"}),ot=P.fromClass(class{decorations;constructor(i){this.decorations=this.findCheckboxes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findCheckboxes(i.view))}findCheckboxes(i){const e=new T,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:s,to:n}of i.visibleRanges){const o=i.state.doc.sliceString(s,n);let r;for(;r=t.exec(o);){const a=r[2],c=s+r.index+r[0].indexOf("["),l=c+3;a===" "?e.add(c,l,st):a==="x"?e.add(c,l,nt):a==="-"&&e.add(c,l,it)}}return e.finish()}},{decorations:i=>i.decorations}),rt=k.mark({class:"cm-timestamp"}),at=P.fromClass(class{decorations;constructor(i){this.decorations=this.findTimestamps(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findTimestamps(i.view))}findTimestamps(i){const e=new T,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:s,to:n}of i.visibleRanges){const o=i.state.doc.sliceString(s,n);let r;for(;r=t.exec(o);){const a=r[0],c=r[1],l=s+r.index+a.indexOf(c),d=l+c.length;e.add(l,d,rt)}}return e.finish()}},{decorations:i=>i.decorations}),ct=k.mark({class:"cm-naked-link"});function lt(i){return i?i.startsWith("www.")?"https://"+i:i:null}class dt{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;const s=lt(t.textContent);return s&&window.open(s,"_blank","noopener,noreferrer"),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new T,s=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:n,to:o}of e.visibleRanges){const r=e.state.doc.sliceString(n,o);let a;for(;a=s.exec(r);){const c=e.state.doc.lineAt(n+a.index);if(/\[.*\]\(.*\)/.test(c.text)&&c.text.includes(`](${a[0]})`))continue;const l=n+a.index,d=l+a[0].length;t.add(l,d,ct)}}return t.finish()}}const ht=P.fromClass(dt,{decorations:i=>i.decorations}),ut=k.line({class:"cm-blockquote"}),gt=P.fromClass(class{decorations;constructor(i){this.decorations=this.findBlockquotes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findBlockquotes(i.view))}findBlockquotes(i){const e=new T,t=/^\s*>\s/;for(const{from:s,to:n}of i.visibleRanges){let o=s;for(;o<=n;){const r=i.state.doc.lineAt(o);t.test(r.text)&&e.add(r.from,r.from,ut),o=r.to+1}}return e.finish()}},{decorations:i=>i.decorations}),mt=k.line({class:"cm-hr"}),ft=P.fromClass(class{decorations;constructor(i){this.decorations=this.findRulers(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findRulers(i.view))}findRulers(i){const e=new T,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:s,to:n}of i.visibleRanges){let o=s;for(;o<=n;){const r=i.state.doc.lineAt(o);t.test(r.text)&&e.add(r.from,r.from,mt),o=r.to+1}}return e.finish()}},{decorations:i=>i.decorations}),ue=["png","jpg","jpeg","gif","svg","webp","avif"];function pt(i){switch(i.toLowerCase()){case"png":return"image/png";case"jpg":case"jpeg":return"image/jpeg";case"gif":return"image/gif";case"svg":return"image/svg+xml";case"webp":return"image/webp";case"avif":return"image/avif";default:return"application/octet-stream"}}class J extends Ee{constructor(e,t,s,n){super(),this.linkTarget=e,this.altText=t,this.type=s,this.view=n,this.objectURL=null}eq(e){return this.linkTarget===e.linkTarget&&this.type===e.type}toDOM(){const e=document.createElement("span");if(e.className="cm-embed-container",this.type==="external"){const t=document.createElement("img");t.src=this.linkTarget,t.alt=this.altText,t.className="cm-embedded-image",e.appendChild(t)}else{const t=document.createElement("span");t.className="cm-embed-placeholder",t.textContent=`Loading: ${this.linkTarget}`,e.appendChild(t),this.loadInternalContent(e).catch(s=>{console.error(`Failed to load internal embed for ${this.linkTarget}:`,s),t.textContent=`Error: ${this.linkTarget} not found.`,e.classList.add("cm-embed-error")})}return e}async loadInternalContent(e){let s=decodeURIComponent(this.linkTarget),n=null;s.includes("#")&&([n,s]=s.split("#"));const o=s.split(".").pop()?.toLowerCase();if(!ue.includes(o)){e.textContent="",e.style.display="none";return}const r=this.view.state.field(D);let a;n&&n!==r.gitClient.gardenName?a=new $(n):a=r.gitClient;const c=s.startsWith("/")?s:`/${s}`,l=await a.readFileAsBuffer(c);if(!l)throw new Error("File could not be read as a buffer.");const d=pt(o),h=new Blob([l],{type:d});this.objectURL=URL.createObjectURL(h);const u=document.createElement("img");u.src=this.objectURL,u.alt=this.linkTarget,u.className="cm-embedded-image",e.innerHTML="",e.appendChild(u)}destroy(){this.objectURL&&URL.revokeObjectURL(this.objectURL)}}function K(i){const e=new T,t=q(i.state),s=n=>{let o=t.resolve(n,1);for(;o;){if(o.name.includes("Code"))return!0;o=o.parent}return!1};for(const{from:n,to:o}of i.visibleRanges){const r=i.state.doc.sliceString(n,o),a=/!\[\[([^\[\]]+?)\]\]/g;let c;for(;c=a.exec(r);){const d=n+c.index;if(s(d))continue;const h=d+c[0].length,u=c[1];e.add(d,h,k.replace({widget:new J(u,u,"internal",i)}))}const l=/!\[(.*?)\]\((.*?)\)/g;for(;c=l.exec(r);){const d=n+c.index;if(s(d))continue;const h=d+c[0].length,u=c[1],g=c[2],m=g.split(".").pop()?.toLowerCase()?.split("?")[0];g.startsWith("http")&&ue.includes(m)&&e.add(d,h,k.replace({widget:new J(g,u,"external",i)}))}}return e.finish()}const yt=P.fromClass(class{constructor(i){this.decorations=K(i)}update(i){(i.docChanged||i.viewportChanged||q(i.startState)!==q(i.state))&&(this.decorations=K(i.view))}},{decorations:i=>i.decorations}),wt=[Ke,tt,ot,at,ht,gt,ft,yt],X=xe.define(ke),bt=$e({base:Me,codeLanguages:[O.of({name:"javascript",load:()=>Promise.resolve(ae())}),O.of({name:"html",load:()=>Promise.resolve(ce())}),O.of({name:"css",load:()=>Promise.resolve(le())})]});function Z(i){const e=i.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return X}switch(t){case"js":return ae();case"css":return le();case"html":return ce();case"json":return Te();case"xml":return Pe();case"yaml":case"yml":return Le();case"sh":case"bash":case"zsh":return X;default:return bt}}const Ct=k.mark({class:"cm-diff-inserted"});function Q(i,e){const t=[],s=e.doc.toString(),n=A(i,s);let o=0;for(const[r,a]of n)r===A.INSERT&&t.push(Ct.range(o,o+a.length)),r!==A.DELETE&&(o+=a.length);return k.set(t)}const _=new H;function vt(i){return oe.define({create(e){return Q(i,e)},update(e,t){return t.docChanged?Q(i,t.state):e.map(t.changes)},provide:e=>I.decorations.from(e)})}const St=P.fromClass(class{constructor(i){this.view=i,this.statusBar=document.createElement("div"),this.statusBar.className="token-status-bar",this.countElement=document.createElement("span"),this.countElement.className="token-count",this.statusBar.appendChild(this.countElement);const e=i.dom.closest("main");e?e.appendChild(this.statusBar):i.dom.parentNode.insertBefore(this.statusBar,i.dom.nextSibling),this.debouncedUpdate=ie(this.updateTokenCount.bind(this),250),this.updateTokenCount()}update(i){i.docChanged&&this.debouncedUpdate()}updateTokenCount(){try{const i=this.view.state.doc.toString(),e=Be(i);this.countElement.textContent=`Tokens: ${e.toLocaleString()}`}catch(i){console.warn("Token counting error:",i),this.countElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function Et(){return St}const G=Fe.define();class R{static editors=[];constructor({url:e,target:t="body main",editorConfig:s={},gitClient:n,commandPalette:o}){if(!n)throw new Error("Editor requires a gitClient instance.");if(!o)throw new Error("Editor requires a commandPalette instance.");window.location.hash||(window.location.hash="#home"),this.targetSelector=t,this.url=e||window.location.hash,this.editorConfig=s,this.gitClient=n,this.commandPalette=o,this.editorView=null,this.sidebar=null,this.filePath=this.getFilePath(this.url),this.isReady=!1,this.mainContainer=null,this.languageCompartment=new H,this.tokenCounterCompartment=new H,this.imageViewerElement=null,this.currentObjectUrl=null,this.debouncedHandleUpdate=ie(this.handleUpdate.bind(this),500),this.init()}async init(){if(this.mainContainer=document.querySelector(this.targetSelector),!this.mainContainer){console.error(`Target container not found: ${this.targetSelector}`);return}await this.gitClient.initRepo(),this.sidebar=new He({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),Ye(this.gitClient,this.sidebar);const e=await this.loadFileContent(this.filePath),t=document.getElementById("loading-indicator");t&&t.remove(),this.mainContainer.style.display="flex",this.imageViewerElement=document.createElement("div"),this.imageViewerElement.className="image-viewer-container",this.mainContainer.appendChild(this.imageViewerElement);const s=I.updateListener.of(n=>{n.docChanged&&!n.transactions.some(o=>o.annotation(G))&&this.debouncedHandleUpdate(n.state.doc.toString())});Ne.map("jj","<Esc>","insert"),this.editorView=new I({doc:e,extensions:[D.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar})),Ze,re.of([Ae]),Ie(),De,I.lineWrapping,Re,Ve,this.languageCompartment.of(Z(this.filePath)),s,...wt,_.of([]),this.tokenCounterCompartment.of(Et()),...this.editorConfig.extensions||[]],parent:this.mainContainer}),R.editors.push(this),this.isReady=!0,this.listenForNavigation(),this.loadFile(this.filePath),this.editorView.focus()}async loadFileContent(e){try{return await this.gitClient.readFile(e)}catch(t){return console.warn(`Could not read file ${e}, starting with empty content.`,t),""}}async showDiff(e){if(e===null){console.error("Cannot show diff, original content is null."),this.hideDiff();return}const t=vt(e);this.editorView.dispatch({effects:_.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:_.reconfigure([])})}listenForNavigation(){window.addEventListener("hashchange",async()=>{this.hideDiff();const e=this.getFilePath(window.location.hash);e&&this.filePath!==e&&await this.loadFile(e)})}async previewHistoricalFile(e,t,s){const[n,o]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(s,e)]);if(n===null||o===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:n},annotations:G.of(!0)}),this.showDiff(o)}async loadFile(e){const t=["png","jpg","jpeg","gif","svg","webp","avif"],s=e.split(".").pop()?.toLowerCase();if(t.includes(s)){this.hideDiff(),this.mainContainer.classList.remove("is-editor"),this.mainContainer.classList.add("is-image-preview"),this.imageViewerElement.innerHTML="<p>Loading image...</p>";const a=await this.gitClient.readFileAsBuffer(e);if(a){const c=`image/${s==="svg"?"svg+xml":s}`,l=new Blob([a],{type:c});this.currentObjectUrl&&URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=URL.createObjectURL(l),this.imageViewerElement.innerHTML=`<img src="${this.currentObjectUrl}" alt="${e}" />`}else this.imageViewerElement.innerHTML=`<p class="error">Could not load image: ${e}</p>`;this.filePath=e,this.sidebar&&await this.sidebar.refresh();return}this.mainContainer.classList.remove("is-image-preview"),this.mainContainer.classList.add("is-editor"),this.currentObjectUrl&&(URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=null),this.hideDiff();const n=await this.loadFileContent(e);this.filePath=e;const o=Z(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(o)});const r=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:r.length,insert:n},annotations:G.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){await this.loadFile(e)}async handleUpdate(e){this.isReady&&this.filePath===this.getFilePath(window.location.hash)&&(await this.gitClient.writeFile(this.filePath,e),this.sidebar&&await this.sidebar.refresh())}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="home"),t}}window.Editor=R;function xt(){kt(),$t()}function kt(){const i=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!i||!e||!t)return;const s=document.createElement("button");s.id="sidebar-toggle-icon",s.title="Toggle Sidebar (Ctrl + [)",e.appendChild(s);let n=0,o=!1;const r=()=>{if(i.classList.contains("sidebar-collapsed")){const g=localStorage.getItem("sidebarWidth")||"250px";i.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",g),localStorage.setItem("sidebarCollapsed","false"),s.textContent="‹"}else{const g=document.documentElement.style.getPropertyValue("--sidebar-width");g!=="0px"&&localStorage.setItem("sidebarWidth",g),i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),s.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=r);const a=u=>{u.type==="touchmove"&&u.preventDefault();const g=u.clientX||u.touches&&u.touches[0].clientX;if(Math.abs(g-n)>5&&(o=!0),o){const m=Math.max(24,Math.min(g,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${m}px`),i.classList.remove("sidebar-collapsed"),s.textContent="‹"}},c=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o){const u=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",u),localStorage.setItem("sidebarCollapsed","false")}else r()},l=u=>{n=u.clientX||u.touches&&u.touches[0].clientX,o=!1,u.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a,{passive:!1}),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c)};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),s.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",d||"250px"),s.textContent="‹")}function $t(){const i=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!i||!e)return;const s=document.createElement("button");s.id="eruda-toggle",s.title="Toggle DevTools (Ctrl + `)",e.appendChild(s);let n=0,o=!1;const r=(h=null,u=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const g=t.style.height==="0px"||t.offsetHeight<10;if(h===null?g:h){const y=localStorage.getItem("erudaHeight")||"250px";t.style.height=y,s.textContent="▼",localStorage.setItem("erudaCollapsed","false"),u&&setTimeout(()=>window.thoughtform.eruda?.show(u),50)}else{if(g)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",s.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=r);const a=h=>{h.type==="touchmove"&&h.preventDefault();const u=h.clientY||h.touches&&h.touches[0].clientY;if(Math.abs(u-n)>5&&(o=!0),!o)return;const g=window.innerHeight-u,m=42,y=window.innerHeight-100;t.style.height=`${Math.max(m,Math.min(g,y))}px`,s.textContent="▼"},c=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):r(null,null)},l=h=>{n=h.clientY||h.touches&&h.touches[0].clientY,o=!1,h.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c))};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",s.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",s.textContent="▼"),d.disconnect())});d.observe(i,{childList:!0})}async function ge(i,e){const t=i.pfs;let s=[];try{const n=await t.readdir(e);for(const o of n){const r=`${e==="/"?"":e}/${o}`;try{(await t.stat(r)).isDirectory()?s=s.concat(await ge(i,r)):s.push(r)}catch{console.warn(`Could not stat ${r}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return s}async function me(i,e){try{if((await i.stat(e)).isDirectory()){const s=await i.readdir(e);for(const n of s)await me(i,`${e}/${n}`);await i.rmdir(e)}else await i.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async function Lt(i,e){e("Starting export...");const t=new j;if(!i||i.length===0)throw new Error("No gardens were selected for export.");for(const a of i){e(`Processing garden: "${a}"...`);const c=t.folder(a),l=new $(a),d=await ge(l,"/");for(const h of d){const u=await l.pfs.readFile(h),g=h.startsWith("/")?h.substring(1):h;c.file(g,u)}}e("Generating zip file...");const s=await t.generateAsync({type:"blob"}),o=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,r=document.createElement("a");r.href=URL.createObjectURL(s),r.download=o,document.body.appendChild(r),r.click(),document.body.removeChild(r),e(`Export process initiated: ${o}`)}async function Pt(i){const e=await j.loadAsync(i),t=new Set;return e.forEach(s=>{if(s.includes("/")){const n=s.split("/")[0];t.add(n)}}),Array.from(t).sort()}async function Tt(i,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${i.name}...`);const s=await j.loadAsync(i);t("Zip file loaded. Analyzing backup contents...");let n="merge";const o=[];for(const d of e){const h=new $(d);let u=!1;try{await h.pfs.stat("/.git"),u=!0}catch{}const g=Object.keys(s.files).some(m=>m.startsWith(`${d}/.git/`));u&&g&&o.push(d)}if(o.length>0){const d=`<ul>${o.map(u=>`<li><strong>${u}</strong></li>`).join("")}</ul>`,h=await w.choice({title:"Replace Garden History?",message:`<p>The backup contains a git history for the following existing garden(s):</p>
                ${d}
                <p>Replacing history is a destructive action. How should we proceed?</p>`,choices:[{id:"replace",text:"Replace History",class:"destructive"},{id:"merge",text:"Merge Files, Keep Local History"},{id:"cancel",text:"Cancel Import"}]});if(!h||h==="cancel"){t("Import cancelled by user.");return}n=h}if(n==="replace"){t("Strategy: Replacing history for conflicting gardens.");for(const d of o){t(`  Deleting existing .git directory for "${d}"...`);const h=new $(d);await me(h.pfs,"/.git"),t(`  Done deleting for "${d}".`)}}else t("Strategy: Merging files and keeping local history where conflicts exist.");const r=new Map;t("Initializing target gardens...");for(const d of e){const h=new $(d);await h.initRepo(),r.set(d,h)}t("Initialization complete. Starting file writes...");const a=[];s.forEach((d,h)=>{if(h.dir)return;const u=d.split("/")[0];if(!e.includes(u)||d.substring(u.length+1).startsWith(".git/")&&n==="merge"&&o.includes(u))return;const m=`/${d.substring(u.length+1)}`,y=h.async("uint8array").then(async S=>{await r.get(u).writeFile(m,S)});a.push(y)});const c=a.length;let l=0;a.forEach(d=>d.then(()=>{l++,(l%100===0||l===c)&&t(`Writing files... (${l}/${c})`)})),await Promise.all(a),t("Import complete! Reloading page..."),setTimeout(()=>window.location.reload(),1500)}async function Mt(i,e){if(!i||i.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let s=t?JSON.parse(t):[];for(const n of i){e(`Deleting garden: "${n}"...`),s=s.filter(r=>r!==n);const o=`garden-fs-${n}`;await new Promise((r,a)=>{const c=indexedDB.deleteDatabase(o);c.onsuccess=()=>{e(`  Successfully deleted database: ${o}`),r()},c.onerror=l=>{e(`  Error deleting database: ${o}`),a(l.target.error)},c.onblocked=()=>{e(`  Deletion blocked for ${o}. Please refresh and try again.`),a(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(s)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const n=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(i.includes(n)||s.length===0){const o=new URL(import.meta.url).pathname,r=o.lastIndexOf("/src/"),a=r>-1?o.substring(0,r):"";window.location.href=`${window.location.origin}${a}/home`}else window.location.reload()},2e3)}class Ft{constructor(){const e=new URLSearchParams(window.location.search);this.isEnabled=e.has("debug"),console.log(`[DEBUG] Debug mode is ${this.isEnabled?"ENABLED":"DISABLED"}`)}log(...e){this.isEnabled&&console.log("[DEBUG]",...e)}error(...e){this.isEnabled&&console.error("[DEBUG]",...e)}warn(...e){this.isEnabled&&console.warn("[DEBUG]",...e)}}const b=new Ft;class Nt{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const s=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(s),this.signaling.ws.onopen=()=>{b.log(`Connected to signaling server at ${s}`),e()},this.signaling.ws.onclose=()=>{b.log("Disconnected from signaling server"),this.signaling.sync.disconnect()},this.signaling.ws.onerror=n=>{b.error("WebSocket error:",n),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${s}`))},this.signaling.ws.onmessage=n=>{try{const o=JSON.parse(n.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(o)}catch(o){b.error("Error parsing signaling message:",o)}}})}sendJoinSessionRequest(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN?(console.log(`[SYNC-CLIENT] Sending 'join_session' request for session: ${e}`),t.send(JSON.stringify({type:"join_session",sessionId:e}))):b.error("Cannot send join session request, WebSocket is not open.")}sendSignal(e,t){const s=this.signaling.ws;s&&s.readyState===WebSocket.OPEN&&s.send(JSON.stringify({type:"signal",target:t,data:e}))}}class It{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"welcome":this.signaling.peerId=e.peerId,console.log(`[SYNC-COMMON] Welcome from server. My Peer ID: ${e.peerId}`),t.updateConnectionState("connected-signal","Connected to tracker, waiting for peers...");break;case"peer_list":console.log(`[SYNC-COMMON] Received list of ${e.peers.length} peers to connect to.`),e.peers.forEach(s=>{this.signaling.connectToPeer(s)});break;case"peer_joined":console.log(`[SYNC-COMMON] Swarm announcement: New peer joined - ${e.peerId}.`),this.signaling.connectToPeer(e.peerId);break;case"signal":e.from&&e.data&&this.signaling.handleSignal(e.from,e.data);break;case"peer_left":e.peerId&&t.handlePeerLeft(e.peerId);break;case"error":t.updateConnectionState("error",`Signaling error: ${e.message}`);break}}}const Dt=500;class Rt{constructor(e){this.signaling=e,this.sync=e.sync,this.seenMessages=new Set}handleIncomingMessage(e,t){if(!e.payload||!e.messageId){b.warn("Received a message without a payload or messageId, cannot process.",e);return}if(this.seenMessages.has(e.messageId))return;if(this.seenMessages.add(e.messageId),this.seenMessages.size>Dt){const n=this.seenMessages.values().next().value;this.seenMessages.delete(n)}console.log(`[SYNC-GOSSIP-RECV ◄ ${t}] Mid: ${e.messageId.substring(0,4)}... Type: ${e.payload.type}`),this.sendSyncMessage(e.payload,null,e.messageId);const s=e.payload;switch(s.type){case"peer_introduction":this.sync.handlePeerIntroduction(s);break;default:this.sync.fileSync&&this.sync.fileSync.handleSyncMessage(s);break}}sendSyncMessage(e,t=null,s=null){const n=s||crypto.randomUUID(),r=JSON.stringify({messageId:n,payload:e});if(this.seenMessages.add(n),t){const a=this.sync.peerConnections.get(t);a&&a.dataChannel&&a.dataChannel.readyState==="open"&&(console.log(`[SYNC-GOSSIP-SEND ► P2P-TARGET] To: ${t.substring(0,8)}... Mid: ${n.substring(0,4)}...`),a.dataChannel.send(r))}else console.log(`[SYNC-GOSSIP-SEND ► P2P-BROADCAST] To: ${this.sync.peerConnections.size} peers. Mid: ${n.substring(0,4)}...`),this.sync.peerConnections.forEach(a=>{a.dataChannel&&a.dataChannel.readyState==="open"&&a.dataChannel.send(r)})}destroy(){this.seenMessages.clear()}}class At{constructor(e){this.signaling=e}async connectToPeer(e){const t=this.signaling.sync,s=t.createPeerConnection(e,!0);if(s)try{console.log(`[SYNC-INITIATOR] Creating data channel for ${e.substring(0,8)}...`);const n=s.createDataChannel("syncChannel");t.setupDataChannel(e,n);const o=await s.createOffer();await s.setLocalDescription(o),console.log(`[SYNC-INITIATOR] Sending offer to ${e.substring(0,8)}...`),this.signaling.sendSignal({type:"offer",sdp:o.sdp},e)}catch(n){b.error(`Failed to initiate connection to ${e}:`,n)}}}class Ot{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this._webSocketManager=new Nt(this),this._signalingMessageHandler=new It(this),this._webrtcInitiator=new At(this),this._syncMessageRouter=new Rt(this)}async joinSession(e){try{await this._webSocketManager.connectToSignalingServer(),this._webSocketManager.sendJoinSessionRequest(e)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server.")}}connectToPeer(e){e!==this.peerId&&(this.peerId>e?(console.log(`[SYNC-GLARE] My ID (${this.peerId.substring(0,4)}...) is greater than ${e.substring(0,4)}... I will initiate.`),this._webrtcInitiator.connectToPeer(e)):console.log(`[SYNC-GLARE] My ID (${this.peerId.substring(0,4)}...) is less than ${e.substring(0,4)}... I will wait for their offer.`))}sendSignal(e,t){this._webSocketManager.sendSignal(e,t)}async handleSignal(e,t){const s=this.sync;try{let n=s.peerConnections.get(e);if(!n)if(t.type==="offer"){if(n=s.createPeerConnection(e,!1),!n){console.warn(`[SYNC-SIGNAL] Received offer from ${e.substring(0,8)} but at connection limit. Ignoring.`);return}}else{b.warn(`[SYNC-SIGNAL] Received signal from unknown peer ${e.substring(0,8)} before an offer. Discarding.`);return}if(t.type==="offer"){console.log(`[SYNC-SIGNAL] Received offer from ${e.substring(0,8)}...`),await n.setRemoteDescription(new RTCSessionDescription(t));const o=await n.createAnswer();await n.setLocalDescription(o),this.sendSignal({type:"answer",sdp:o.sdp},e)}else t.type==="answer"?(console.log(`[SYNC-SIGNAL] Received answer from ${e.substring(0,8)}...`),await n.setRemoteDescription(new RTCSessionDescription(t))):t.type==="candidate"&&await n.addIceCandidate(new RTCIceCandidate(t.candidate))}catch(n){b.error(`Error handling signal from ${e}:`,n)}}sendSyncMessage(e,t,s){this._syncMessageRouter.sendSyncMessage(e,t,s)}handleIncomingMessage(e,t){this._syncMessageRouter.handleIncomingMessage(e,t)}destroy(){this.ws&&(this.ws.close(),this.ws=null),this._syncMessageRouter.destroy()}}class Bt{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const s=this._listeners[e];for(let n=0,o=s.length;n<o;n++)if(s[n]===t){s.splice(n,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let s=0,n=t.length;s<n;s++)t[s].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class _t{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return b.log(`DEBUG: Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return b.log(`DEBUG: Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return b.log("DEBUG: Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return b.log("DEBUG: Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return b.log("DEBUG: _getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class Gt{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),b.log("DEBUG: SyncFiles confirmed data channel is open.")},t.onmessage=async s=>{try{const n=JSON.parse(s.data);await e.sync._handleIncomingSyncMessage(n,"P2P")}catch(n){console.error("Error parsing sync message from DataChannel:",n,"Raw data:",s.data)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),b.log("DEBUG: SyncFiles confirmed data channel is closed.")},t.onerror=s=>{const n=s.error;n&&n.name==="OperationError"&&n.message.includes("User-Initiated Abort")?b.log("Data channel closed intentionally by a peer.",s):(console.error("Data channel error:",s),e.sync.addMessage("Data channel error: "+(n?n.message:"Unknown error")))}}}class fe{static async _listAllFiles(e,t){const s=e.pfs;if(!s)throw new Error("gitClient does not have pfs property");let n=[];try{const o=await s.readdir(t);for(const r of o){if(r===".git")continue;const a=t==="/"?`/${r}`:`${t}/${r}`;try{(await s.stat(a)).isDirectory()?n=n.concat(await this._listAllFiles(e,a)):n.push(a)}catch(c){b.warn(`Could not stat ${a}, skipping.`,c)}}}catch(o){b.log(`Directory not readable: ${t}`,o)}return n}static async handleFileUpdate(e,t){e.incrementPendingWrites();try{if(!t.gardenName)throw new Error("Received file update without a gardenName during a full sync.");const s=new $(t.gardenName);if(t.isFullSync){e.deletedGitDirs.has(t.gardenName)||(e.deletedGitDirs.add(t.gardenName),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing to receive garden: ${t.gardenName}...`,type:"info"}})),await s.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Replacing git history for ${t.gardenName}...`,type:"info"}})),await s.rmrf("/.git")),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Writing: ${t.path.substring(1)} (${t.gardenName})`,type:"info"}}));const n=Buffer.from(t.content,"base64");await s.writeFile(t.path,n)}else{const n=t.isBase64?Buffer.from(t.content,"base64"):t.content;await s.writeFile(t.path,n),e.sync.addMessage(`Updated file: ${t.path} in garden ${t.gardenName}`)}}catch(s){console.error("Error handling file update for path:",t.path,s),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${s.message}`,type:"error"}}))}finally{e.decrementPendingWrites()}}}class Ut{static async handleSyncMessage(e,t){switch(t.type){case"file_update":await fe.handleFileUpdate(e,t);break;case"request_gardens":await this.handleRequestGardens(e,t.gardens);break;case"full_sync_complete":e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"File stream complete. Waiting for writes to finish...",type:"info"}})),e.markSyncStreamAsComplete();break;default:b.log("Unknown sync message type:",t.type)}}static async handleRequestGardens(e,t=[]){if(!(!t||t.length===0)){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received request for gardens: ${t.join(", ")}.`,type:"info"}}));try{for(const s of t){const n=new $(s),o=await n.listAllFilesForClone("/");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${o.length} files in ${s}. Starting stream...`,type:"info"}}));const r=200;let a=0;for(let c=0;c<o.length;c+=r){const l=o.slice(c,c+r),d=await Promise.all(l.map(h=>n.readFileAsBuffer(h).then(u=>({file:h,content:u}))));for(const{file:h,content:u}of d)u&&e.sync.sendSyncMessage({type:"file_update",gardenName:s,path:h,content:Buffer.from(u).toString("base64"),isBase64:!0,isFullSync:!0});a+=l.length,e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sent ${a} of ${o.length} files for ${s}...`,type:"info"}}))}}e.sync.sendSyncMessage({type:"full_sync_complete"}),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All file data sent.",type:"info"}}))}catch(s){console.error("Error handling garden request:",s),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error handling garden request: ${s.message}`,type:"error"}}))}}}}class ee{static async syncAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Starting to send all files...",type:"info"}}));const t=e._getGitClient();if(!t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Error: Git client not available.",type:"error"}}));return}try{if(!await w.confirm({title:"Send All Files",message:"This will send your working files to the peer. It will NOT send your git history. Are you sure?",okText:"Send Files"})){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Send all files cancelled.",type:"cancelled"}}));return}const n=await e.getAllFiles(t);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${n.length} content files to sync.`,type:"info"}}));for(const o of n){const r=await t.readFile(o);let a=0;try{a=JSON.parse(r).lastupdated||0}catch{}e.sync.sendSyncMessage({type:"file_update",path:o,content:r,timestamp:a,isFullSync:!1})}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sync completed. Sent ${n.length} files.`,type:"complete"}}))}catch(s){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error syncing all files: ${s.message}`,type:"error"}}))}}static requestSpecificGardens(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting selected gardens from peers...",type:"info"}})),Object.entries(t).forEach(([s,n])=>{const o=s.substring(0,8);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending request to peer ${o}... for gardens: ${n.join(", ")}`,type:"info"}})),e.sync.sendSyncMessage({type:"request_gardens",gardens:n},s)}),e.sync.addMessage(`Sent requests for ${Object.keys(t).length} peer(s).`)}static sendFileUpdate(e,t,s,n){e.sync.sendSyncMessage({type:"file_update",path:t,content:s,timestamp:n})}}class qt extends Bt{constructor(e){super(),this.sync=e,this.gitClient=null,this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs=new Set}resetFullSyncState(){this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs.clear()}_getGitClient(){return _t.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){Gt.setupDataChannel(this,e)}async handleSyncMessage(e){await Ut.handleSyncMessage(this,e)}async syncAllFiles(){this.resetFullSyncState(),await ee.syncAllFiles(this)}requestSpecificGardens(e){this.resetFullSyncState(),ee.requestSpecificGardens(this,e)}incrementPendingWrites(){this.pendingWriteCount++}decrementPendingWrites(){this.pendingWriteCount--,this.checkForReload()}markSyncStreamAsComplete(){this.isSyncCompleteMessageReceived=!0,this.checkForReload()}checkForReload(){this.isSyncCompleteMessageReceived&&this.pendingWriteCount===0&&(this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All files received and written. Reloading...",type:"complete"}})),setTimeout(()=>window.location.reload(),1500))}destroy(){super.destroy()}async getAllFiles(e){return fe._listAllFiles(e,"/")}}class Ht{constructor(e){this.sync=e,this.syncMethodIndicatorEl=null,this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressActionButton=null,this.connectBtn=null,this.nameInput=null,this.autoConnectCheckbox=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                    <!-- THIS IS THE FIX: Added the missing peer count element -->
                    <strong>Peers:</strong> <span id="sync-peer-count">0</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="sync-all-files-btn" class="eruda-button">Send All Files</button>
                <button id="request-all-files-btn" class="eruda-button">Request from Peer...</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"),this.connectBtn=this.sync._container.querySelector("#sync-connect-btn"),this.nameInput=this.sync._container.querySelector("#sync-name-input"),this.autoConnectCheckbox=this.sync._container.querySelector("#sync-autoconnect-checkbox"))}bindEvents(){if(!this.sync._container){b.error("SyncUI.bindEvents: Container not set");return}this.nameInput.value=localStorage.getItem("thoughtform_sync_name")||"",this.autoConnectCheckbox.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",this.connectBtn.addEventListener("click",()=>{const n=this.sync.connectionState;if(n==="disconnected"||n==="error"){const o=this.nameInput.value.trim(),r=this.autoConnectCheckbox.checked;if(!o){this.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",o),localStorage.setItem("thoughtform_sync_auto_connect",r),this.sync.connect(o)}else this.sync.disconnect()});const e=this.sync._container.querySelector("#save-signaling-config");e&&e.addEventListener("click",()=>{const n=this.sync._container.querySelector("#signaling-server-url"),o=n?n.value.trim():"";o?(this.sync.signaling.updateSignalingServerUrl(o),this.addMessage(`Signaling server updated to: ${o}`)):this.addMessage("Please enter a valid signaling server URL.")});const t=this.sync._container.querySelector("#sync-all-files-btn"),s=this.sync._container.querySelector("#request-all-files-btn");t&&t.addEventListener("click",async()=>{this.showSyncProgressModal(),await this.sync.fileSync.syncAllFiles()}),s&&s.addEventListener("click",async()=>{const n=await w.selection({title:"Request Gardens from Peers",peerData:this.sync.connectedPeers});n?(b.log("User made selection:",n),this.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens(n)):b.log("Garden request cancelled by user.")})}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e);const s=this.sync._container.querySelector("#sync-peer-count");s&&(s.textContent=this.sync.connectedPeers.size)}updateControls(e){const t=e==="disconnected"||e==="error",s=e==="connecting";this.connectBtn&&(this.connectBtn.disabled=s,t?this.connectBtn.textContent="Connect":s?this.connectBtn.textContent="Connecting...":this.connectBtn.textContent="Disconnect"),this.nameInput&&(this.nameInput.disabled=!t),this.autoConnectCheckbox&&(this.autoConnectCheckbox.disabled=!t);const n=e==="connected-p2p"||e==="connected-signal";this.sync._container.querySelectorAll(".sync-actions button").forEach(o=>o.disabled=!n)}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let s="None",n="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),s="Connecting...",n="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),s="WebSocket (Fallback)",n="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),s="WebRTC (P2P)",n="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),s="Error",n="var(--base-accent-destructive)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=s,this.syncMethodIndicatorEl.style.color=n)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const s=document.createElement("div");s.textContent=e,t.appendChild(s),t.scrollTop=t.scrollHeight}}showMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="block")}hideMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="none")}showSyncProgressModal(){this.syncProgressModal&&this.syncProgressModal.destroy(),this.syncProgressModal=new w({title:"File Sync Progress"}),this.syncProgressModal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.syncProgressLogArea=this.syncProgressModal.content.querySelector("#sync-progress-log"),this.syncProgressFinalMessageArea=this.syncProgressModal.content.querySelector("#sync-progress-final-message"),this.syncProgressActionButton=null,this.syncProgressModal.show()}updateSyncProgress(e){if(!this.syncProgressModal||!this.syncProgressLogArea)return;const{message:t="No message",type:s="info"}=e.detail,n=document.createElement("div"),o=new Date().toLocaleTimeString();switch(n.textContent=`[${o}] ${t}`,n.style.marginBottom="5px",s){case"error":n.style.color="var(--base-accent-destructive)";break;case"complete":n.style.color="var(--base-accent-action)";break;case"cancelled":n.style.color="var(--base-accent-warning)";break;default:n.style.color="var(--color-text-primary)";break}this.syncProgressLogArea.appendChild(n),this.syncProgressLogArea.scrollTop=this.syncProgressLogArea.scrollHeight,["complete","error","cancelled"].includes(s)&&(this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.textContent=t,this.syncProgressFinalMessageArea.style.color=n.style.color),this.syncProgressActionButton&&this.syncProgressActionButton.remove(),(s==="error"||s==="cancelled")&&(this.syncProgressActionButton=this.syncProgressModal.addFooterButton("Close",()=>this.hideSyncProgressModal()),s==="error"&&this.syncProgressActionButton.classList.add("destructive")))}hideSyncProgressModal(){this.syncProgressModal&&(this.syncProgressModal.destroy(),this.syncProgressModal=null)}}const te=5;class Wt{constructor(){this.name="sync",this._container=null,this.peerConnections=new Map,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.connectedPeers=new Map,this.signaling=new Ot(this),this.fileSync=new qt(this),this.ui=new Ht(this)}init(e){this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&this.fileSync.addEventListener("syncProgress",this.ui.updateSyncProgress.bind(this.ui));const t=localStorage.getItem("thoughtform_sync_auto_connect")==="true",s=localStorage.getItem("thoughtform_sync_name");t&&s&&this.connect(s)}async connect(e){this.connectionState!=="disconnected"&&this.connectionState!=="error"||(this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.joinSession(this.syncName))}disconnect(){this.signaling.destroy(),console.log(`[SYNC-DISCONNECT] Closing ${this.peerConnections.size} peer connections.`),this.peerConnections.forEach(e=>e.close()),this.peerConnections.clear(),this.isConnected=!1,this.syncName=null,this.connectedPeers.clear(),this.updateConnectionState("disconnected","Disconnected")}createPeerConnection(e,t=!1){if(this.peerConnections.has(e))return console.log(`[SYNC-PC] Connection with ${e.substring(0,8)}... already exists or is in progress.`),this.peerConnections.get(e);if(this.peerConnections.size>=te)return console.warn(`[SYNC-PC] Max connections (${te}) reached. Not connecting to ${e.substring(0,8)}...`),null;console.log(`[SYNC-PC] Creating new RTCPeerConnection for peer: ${e.substring(0,8)}... (Initiator: ${t})`);const s=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});return this.peerConnections.set(e,s),s.onicecandidate=n=>{n.candidate&&this.signaling.sendSignal({type:"candidate",candidate:n.candidate},e)},s.onconnectionstatechange=()=>{const n=s.connectionState;console.log(`[SYNC-PC] Connection state for ${e.substring(0,8)}... changed to: ${n}`),n==="connected"?this.updateConnectionState("connected-p2p",`P2P Connected (${this.peerConnections.size} peers)`):(n==="failed"||n==="disconnected"||n==="closed")&&this.handlePeerLeft(e)},t||(s.ondatachannel=n=>{console.log(`[SYNC-PC] Data channel received from ${e.substring(0,8)}...`),this.setupDataChannel(e,n.channel)}),s}setupDataChannel(e,t){const s=this.peerConnections.get(e);s&&(s.dataChannel=t,console.log(`[SYNC-DC] Setting up data channel for ${e.substring(0,8)}...`),t.onopen=()=>{console.log(`[SYNC-DC] Data channel is OPEN with ${e.substring(0,8)}...`),this._announcePresence(e)},t.onmessage=async n=>{try{const o=JSON.parse(n.data);await this._handleIncomingSyncMessage(o,`P2P-${e.substring(0,4)}`)}catch(o){console.error("Error parsing sync message from DataChannel:",o)}},t.onclose=()=>this.handlePeerLeft(e),t.onerror=n=>console.error(`Data channel error with ${e.substring(0,8)}...:`,n))}updateConnectionState(e,t){this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal",this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e))}_handleIncomingSyncMessage(e,t){this.signaling.handleIncomingMessage(e,t)}_announcePresence(e=null){if(!this.signaling.peerId)return;const t=localStorage.getItem("thoughtform_gardens"),s=t?JSON.parse(t):["home"];this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,gardens:s},e)}handlePeerIntroduction(e){if(!e.peerId||e.peerId===this.signaling.peerId)return;const t=!this.connectedPeers.has(e.peerId);this.connectedPeers.set(e.peerId,{gardens:e.gardens}),t&&this.addMessage(`Peer ${e.peerId.substring(0,8)}... discovered.`),this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} peer${this.connectedPeers.size===1?"":"s"})`)}handlePeerLeft(e){this.connectedPeers.has(e)&&(this.connectedPeers.delete(e),this.addMessage(`Peer ${e.substring(0,8)}... disconnected.`));const t=this.peerConnections.get(e);t&&(t.close(),this.peerConnections.delete(e),console.log(`[SYNC-PC] Cleaned up connection for peer ${e.substring(0,8)}...`)),this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} total)`)}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui&&this.ui.addMessage(e)}sendSyncMessage(e,t=null,s=null){this.signaling.sendSyncMessage(e,t,s)}show(){this._container&&(this._container.style.display="block")}hide(){this._container&&(this._container.style.display="none")}destroy(){this.disconnect(),this.fileSync&&this.fileSync.destroy()}}function U(i,e,t=!0){const s=e.map(n=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${n}" ${t?"checked":""}>
      <span>${n}</span>
    </label>
  `).join("");return`
    <div>
      <p>${i}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${s}
      </div>
    </div>
  `}function jt(){const i=document.getElementById("eruda-container");if(!i)return;F.init({container:i,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1});const e=F.get("console");return e&&e.config.set("maxLogNum",2e3),window.thoughtform&&(window.thoughtform.eruda=F),setTimeout(()=>{const t=i.querySelector(".luna-tab-item")?.parentElement;t&&t.addEventListener("click",s=>{const n=s.target.closest(".luna-tab-item");if(n){const o=n.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,o)}})},500),setTimeout(()=>{const t=i.querySelector(".eruda-elements");if(!t)return;let s=!1;new MutationObserver(()=>{const o=t.style.display!=="none";if(o&&!s){const r=document.querySelector(".eruda-control > .eruda-icon-select");r&&(r.click(),r.click())}s=o}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),F.add({name:"Data",init(t){this._$el=t,t.html(`
        <div>
          <h2>Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">

          <hr>

          <h2>Danger Zone</h2>
          <p>
            <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
          </p>
        </div>
      `);const s=t.find("#export-btn")[0],n=t.find("#import-btn")[0],o=t.find("#import-file-input")[0],r=t.find("#clear-data-btn")[0];s.addEventListener("click",()=>{const a=localStorage.getItem("thoughtform_gardens"),c=a?JSON.parse(a):["home"],l=new w({title:"Select Gardens to Export"});l.updateContent(U("Choose which gardens to include in the export:",c));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(S=>S.value);l.destroy();const g=new w({title:"Exporting Gardens..."});g.updateContent("<p>Preparing export. Please wait...</p>");let m=!1,y="";g.addFooterButton("Cancel",()=>{m=!0,g.destroy(),console.log("Export cancelled by user.")}),g.show();try{await Lt(u,S=>{if(m)throw new Error("Export cancelled by user.");console.log(S),y+=S+"<br>",g.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${y}</div>`)}),m||(g.clearFooter(),g.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>g.destroy(),3e3))}catch(S){m||(console.error("Export failed:",S.message),g.clearFooter(),g.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${S.message}</p>`),g.addFooterButton("Close",()=>g.destroy()))}};l.addFooterButton("Export Selected",h),l.addFooterButton("Cancel",()=>l.destroy()),l.show()}),n.addEventListener("click",()=>o.click()),o.addEventListener("change",async()=>{const a=o.files[0];if(!a)return;const c=new w({title:"Select Gardens to Import"});c.updateContent("Scanning zip file..."),c.show();try{const l=await Pt(a);if(l.length===0){c.updateContent("No valid gardens found in this zip file."),c.addFooterButton("Close",()=>c.destroy());return}c.updateContent(U(`Found ${l.length} garden(s). Select which to import:`,l));const d=c.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(m=>m.value);c.clearFooter(),c.updateContent("Starting import...");let g="";try{await Tt(a,u,m=>{g+=`${m}<br>`,c.updateContent(g)})}catch(m){console.error("Import failed:",m),c.updateContent(`<strong>Error during import:</strong><br>${m.message}`),c.addFooterButton("Close",()=>c.destroy())}};c.addFooterButton("Import Selected",h),c.addFooterButton("Cancel",()=>c.destroy())}catch(l){console.error("Failed to read zip file:",l),c.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${l.message}`),c.addFooterButton("Close",()=>c.destroy())}finally{o.value=""}}),r.addEventListener("click",()=>{const a=localStorage.getItem("thoughtform_gardens"),c=a?JSON.parse(a):[],l=new w({title:"Clear Garden Data"});l.updateContent(U("Select gardens to permanently delete:",c,!1));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!1);const h=async()=>{const g=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(y=>y.value);l.clearFooter(),l.updateContent("Starting deletion...");let m="";try{await Mt(g,y=>{m+=`${y}<br>`,l.updateContent(m)})}catch(y){console.error("Deletion failed:",y),l.updateContent(`<strong>Error during deletion:</strong><br>${y.message}`),l.addFooterButton("Close",()=>l.destroy()).classList.add("destructive")}};l.addFooterButton("Delete Selected",h).classList.add("destructive"),l.addFooterButton("Cancel",()=>l.destroy()),l.show()})},show(){this._$el.show()},hide(){this._$el.hide()}}),F.add({name:"Sync",init(t){this.sync=new Wt,this.sync.init(t.get(0))},show(){this.sync.show()},hide(){this.sync.hide()},destroy(){this.sync.destroy()}}),F}class zt{constructor({gitClient:e,editor:t}){this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="search",this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],s=[];await Promise.all(t.map(async n=>{const o=new $(n),r=await this.editor.sidebar.listFiles(o,"/");for(const a of r)s.push({garden:n,path:a,searchString:`${n} ${a.substring(1)}`.toLowerCase()})})),this.crossGardenFileCache=s}async open(e="search"){if(!this.gitClient||!this.editor){console.error("CommandPalette cannot open: gitClient or editor is not initialized.");return}if(!this.isOpen){if(this.isOpen=!0,this.mode=e,this.mode==="execute"?(this.titleElement.textContent="Executing a File...",this.input.placeholder="Find a .js file to execute..."):(this.titleElement.textContent="Searching Files...",this.input.placeholder="Find file across all gardens..."),this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const t=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=t,this.input.disabled=!1,this.input.focus()}this.search("")}}close(){this.isOpen&&(this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown),this.editor&&this.editor.editorView&&this.editor.editorView.focus())}search(e){this.query=e.toLowerCase();let t=this.crossGardenFileCache;this.mode==="execute"&&(t=this.crossGardenFileCache.filter(s=>s.garden===this.gitClient.gardenName&&s.path.endsWith(".js"))),this.query?this.results=t.filter(s=>{let n=0,o=0;for(;n<this.query.length&&o<s.searchString.length;)this.query[n]===s.searchString[o]&&n++,o++;return n===this.query.length}).sort((s,n)=>{const o=s.garden===this.gitClient.gardenName,r=n.garden===this.gitClient.gardenName;return o&&!r?-1:!o&&r?1:0}):this.results=(this.mode==="execute"?t:t.filter(s=>s.garden===this.gitClient.gardenName)).slice(0,100),this.selectedIndex=0,this.renderResults()}renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="command-no-results">No matches found</li>';return}this.results.forEach((e,t)=>{const s=document.createElement("li");s.className="command-result-item",s.dataset.index=t;const n=e.path.startsWith("/")?e.path.substring(1):e.path;e.garden!==this.gitClient.gardenName?s.innerHTML=`<span class="command-path">${n}</span> <span class="command-garden">${e.garden}</span>`:s.textContent=n,t===this.selectedIndex&&(s.classList.add("active"),s.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(s)})}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(this.mode==="execute"){this.close();try{const s=await this.gitClient.readFile(t.path),o=await new Function("editor","git",s)(this.editor,this.gitClient);console.log(`Execution successful for ${t.path}. Result:`,o)}catch(s){console.error(`Execution failed for ${t.path}:`,s),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}else{if(t.garden!==this.gitClient.gardenName){const s=new URL(import.meta.url).pathname,n=s.lastIndexOf("/src/"),o=n>-1?s.substring(0,n):"";window.location.href=`${window.location.origin}${o}/${encodeURIComponent(t.garden)}#${encodeURIComponent(t.path)}`}else window.location.hash=`#${encodeURIComponent(t.path)}`;this.close()}}handleInput(e){this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".command-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}async function pe(i,e){const t=i.pfs;let s=[];try{const n=await t.readdir(e);for(const o of n){if(o===".git")continue;const r=`${e==="/"?"":e}/${o}`;try{(await t.stat(r)).isDirectory()?s=s.concat(await pe(i,r)):s.push(r)}catch{console.warn(`[Migration] Could not stat ${r}, skipping.`)}}}catch{console.warn(`[Migration] Could not read directory: ${e}.`)}return s}async function Vt(){console.log("%cStarting Thoughtform data migration...","font-weight: bold; font-size: 1.2em;"),console.log("This will convert all files from the old JSON format to raw content. This only needs to be run once.");const i=localStorage.getItem("thoughtform_gardens"),e=i?JSON.parse(i):["home"];if(e.length===0){console.log("No gardens found to migrate.");return}let t=0,s=0;for(const n of e){console.log(`%cProcessing garden: "${n}"`,"font-weight: bold; color: blue;");const o=new $(n),r=await pe(o,"/");if(r.length===0){console.log("No files found in this garden.");continue}for(const a of r){t++;try{const c=await o.readFile(a);let l;try{l=JSON.parse(c)}catch{console.log(`- ${a} is not in JSON format, skipping.`);continue}if(l&&typeof l.content<"u"){const d=l.content;c!==d?(console.log(`%c  MIGRATING: ${a}`,"color: green;"),await o.writeFile(a,d),s++):console.log(`- ${a} content is already raw, skipping.`)}else console.log(`- ${a} is valid JSON but not the old format, skipping.`)}catch(c){console.error(`%c  ERROR: Failed to process ${a}.`,"color: red;",c)}}}console.log("%cMigration complete!","font-weight: bold; font-size: 1.2em;"),console.log(`Checked ${t} files across ${e.length} garden(s).`),console.log(`Migrated ${s} files.`),console.log("You should now refresh the page.")}window.Buffer=Ce.Buffer;window.process={env:{}};window.thoughtform={ui:{}};const ye=new URL(import.meta.url).pathname,se=ye.lastIndexOf("/src/"),W=se>-1?ye.substring(0,se):"";let N=window.location.pathname.startsWith(W)?window.location.pathname.substring(W.length):window.location.pathname;N=N.replace(/^\/|\/$/g,"")||"home";N=decodeURIComponent(N);console.log(`Base Path: "${W}"`);console.log(`Loading garden: "${N}"`);const we=new $(N);xt();jt();window.thoughtform.runMigration=Vt;window.onerror=function(i,e,t,s,n){return console.error("Caught global error:",i,n),window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1};window.onunhandledrejection=function(i){console.error("Caught unhandled promise rejection:",i.reason),window.thoughtform.ui.toggleDevtools?.(!0,"console")};const M=new zt({gitClient:null,editor:null});window.thoughtform.commandPalette=M;const ne=new R({target:"main",gitClient:we,commandPalette:M}),Yt=setInterval(()=>{ne.isReady&&(clearInterval(Yt),M.gitClient=we,M.editor=ne,window.addEventListener("keydown",i=>{if(M.isOpen||!(navigator.platform.toUpperCase().indexOf("MAC")>=0?i.metaKey:i.ctrlKey))return;let s=!1;switch(i.key.toLowerCase()){case"p":i.shiftKey?M.open("execute"):M.open("search"),s=!0;break;case"[":window.thoughtform.ui.toggleSidebar?.(),s=!0;break;case"`":window.thoughtform.ui.toggleDevtools?.(null,null),s=!0;break}s&&(i.preventDefault(),i.stopPropagation())},{capture:!0}))},100);
