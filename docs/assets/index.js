const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunk-vendor.js","assets/chunk-eruda.js"])))=>i.map(i=>d[i]);
import{a1 as rt,a2 as q,a3 as Q,a4 as ce,a5 as dt,a6 as gt,a7 as ht,a8 as mt,a9 as It,J as bt,t as p,aa as Je,ab as le,ac as me,U as ut,ad as Fe,ae as Ct,af as fe,ag as Gt}from"./chunk-vendor.js";import{F as Zt,g as f,i as re}from"./chunk-git.js";import{e as E}from"./chunk-eruda.js";import{c as $}from"./chunk-gpt-tokenizer.js";import{S as ze,a as pt,s as yt,m as At,L as te,j as He,h as Le,c as je,b as Wt,y as ft,x as wt,d as Bt,e as vt,C as H,k as X,E as F,H as Yt,f as ye,D as N,V as S,R as k,g as O,W as xe,i as Ee,l as Te,n as Nt,o as Vt,p as Rt,q as St,r as kt,t as Mt,u as Xt,v as Jt,w as Ft,z as zt,A as Ht,B as Lt,F as jt,G as xt,I as Et,J as Ie,K as Tt,M as Ut,N as Qt,O as Dt,P as Kt,Q as Ot,T as Pt,U as qt,X as $t,Y as _t,Z as ei}from"./chunk-codemirror.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=t(n);fetch(n.href,s)}})();var Ue=!1;try{var de={};Object.defineProperty(de,"passive",{get(){return Ue=!0,!1}}),window.addEventListener("testpassive",null,de),window.removeEventListener("testpassive",null,de)}catch{}if(Ue){var ti=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(a,e,t){var i=t&&typeof t=="object",n=i?t.capture:t,s=i?Object.assign({},t):{};return s.passive===void 0&&(a==="touchstart"||a==="touchmove"||a==="wheel")&&(s.passive=!0),s.capture===void 0&&(s.capture=!!n),ti.call(this,a,e,s)}}let Qe=class{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new Zt(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),this.registerNewGarden();return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await f.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/home",e,"utf8"),await f.add({fs:this.fs,dir:"/",filepath:"home"}),await f.commit({fs:this.fs,dir:"/",message:"Initial commit",author:{name:"Thoughtform Garden",email:"system@thoughtform.garden"}}),this.registerNewGarden(),console.log("New garden initialized successfully with initial commit.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async rmrf(e){try{if((await this.pfs.stat(e)).isDirectory()){const i=await this.pfs.readdir(e);for(const n of i){const s=e==="/"?`/${n}`:`${e}/${n}`;await this.rmrf(s)}e!=="/"&&await this.pfs.rmdir(e)}else await this.pfs.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async clearWorkdir(){const e=await this.pfs.readdir("/");for(const t of e)t!==".git"&&await this.rmrf(`/${t}`)}async ensureDir(e){const t=e.split("/").filter(n=>n);let i="";for(const n of t){i+=`/${n}`;try{if(!(await this.pfs.stat(i)).isDirectory())throw new Error(`A file exists at '${i}' which conflicts with the desired directory structure.`)}catch(s){if(s.code==="ENOENT")try{await this.pfs.mkdir(i)}catch(o){if(o.code!=="EEXIST")throw o}else throw s}}}async listAllFilesForClone(e="/"){let t=[];const i=await this.pfs.readdir(e);for(const n of i){const s=`${e==="/"?"":e}/${n}`;(await this.pfs.stat(s)).isDirectory()?t=t.concat(await this.listAllFilesForClone(s)):t.push(s)}return t}async readFile(e){const t=e.startsWith("/")?e:`/${e}`;try{return await this.pfs.readFile(t,"utf8")}catch(i){throw i.code==="ENOENT"?new Error(`File "${t.substring(1)}" does not exist.`):i}}async readFileAsBuffer(e){const t=e.startsWith("/")?e:`/${e}`;try{return await this.pfs.readFile(t)}catch{return null}}async writeFile(e,t){const i=e.startsWith("/")?e:`/${e}`,n=typeof t=="string"?"utf8":void 0;try{const s=i.substring(0,i.lastIndexOf("/"));s&&await this.ensureDir(s),await this.pfs.writeFile(i,t,n),this.markGardenAsDirty(!0)}catch(s){throw console.error(`[Git.writeFile] Failed to write to ${i}:`,s),s}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),i=t?JSON.parse(t):[],n=i.indexOf(this.gardenName);e&&n===-1?i.push(this.gardenName):!e&&n!==-1&&i.splice(n,1),localStorage.setItem("dirty_gardens",JSON.stringify(i))}catch(t){console.error("Failed to update dirty garden registry:",t)}}};const ii={async stage(a){const e=a.startsWith("/")?a.substring(1):a;await f.add({fs:this.fs,dir:"/",filepath:e})},async unstage(a){const e=a.startsWith("/")?a.substring(1):a;await f.remove({fs:this.fs,dir:"/",filepath:e})},async discard(a){const e=a.startsWith("/")?a.substring(1):a;try{const i=(await this.getStatuses()).find(s=>s[0]===e);if(!i)return;i[1]===0?(await this.pfs.unlink(a),window.thoughtform.events.publish("file:delete",{path:a,isDirectory:!1,gardenName:this.gardenName})):await f.checkout({fs:this.fs,dir:"/",filepaths:[e],force:!0})}catch(t){console.error(`[discard] An error occurred for ${a}:`,t)}},async commit(a){const e=await f.commit({fs:this.fs,dir:"/",message:a,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),e},async log(){try{return await f.log({fs:this.fs,dir:"/",depth:20})}catch{return[]}},async getChangedFiles(a){try{const{commit:e}=await f.readCommit({fs:this.fs,dir:"/",oid:a}),t=e.parent[0];if(!t)return(await f.listFiles({fs:this.fs,dir:"/",ref:a})).map(n=>`/${n}`);const i=[];return await f.walk({fs:this.fs,dir:"/",trees:[f.TREE({ref:t}),f.TREE({ref:a})],map:async(n,[s,o])=>{if(n===".")return;const c=s&&await s.oid(),l=o&&await o.oid();if(c===l)return;(o?await o.type():await s.type())==="blob"&&i.push(`/${n}`)}}),i}catch(e){return console.error(`Error getting changed files for commit ${a}:`,e),[]}},async readBlob(a){return this.readBlobFromCommit("HEAD",a)},async readBlobFromCommit(a,e){const t=e.startsWith("/")?e.substring(1):e;if(!a)return"";try{const i=a==="HEAD"?await f.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):a,{blob:n}=await f.readBlob({fs:this.fs,dir:"/",oid:i,filepath:t});return new TextDecoder().decode(n)}catch(i){return i.name==="NotFoundError"?"":null}},async getStatuses(){return f.statusMatrix({fs:this.fs,dir:"/"})}},ni={async listBranches(){try{const a=await f.listBranches({fs:this.fs,dir:"/"}),e=await f.currentBranch({fs:this.fs,dir:"/",fullname:!1});return{branches:a,currentBranch:e}}catch(a){return console.error("Error listing branches:",a),{branches:[],currentBranch:null}}},async branch(a){return f.branch({fs:this.fs,dir:"/",ref:a})},async checkout(a){return f.checkout({fs:this.fs,dir:"/",ref:a})}},si={async push(a,e,t=!1){return await f.push({fs:this.fs,http:re,dir:"/",url:a,force:t,onProgress:i=>e(`${i.phase}: ${i.loaded}/${i.total}`)})},async pull(a,e,t=!1){const i={name:"User",email:"user@thoughtform.garden"};e("Fetching from remote...");const s=(await f.fetch({fs:this.fs,http:re,dir:"/",url:a,ref:"main",singleBranch:!0,onProgress:o=>e(`Fetch: ${o.phase}`)})).fetchHead;if(!s){e("Already up-to-date.");return}e("Merging changes...");try{const o=await f.merge({fs:this.fs,dir:"/",ours:"main",theirs:s,author:i})}catch(o){if(o.name==="MergeConflictError"){e("Conflict detected. Writing markers to files...");const c=o.data.filepaths,l=await f.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}),g=(await f.findMergeBase({fs:this.fs,dir:"/",oids:[l,s]}))[0];if(!g)throw new Error("Could not find a common ancestor for merging.");for(const d of c){const[h,m,I]=await Promise.all([f.readBlob({fs:this.fs,dir:"/",oid:l,filepath:d}),f.readBlob({fs:this.fs,dir:"/",oid:g,filepath:d}),f.readBlob({fs:this.fs,dir:"/",oid:s,filepath:d})]),b=h?new TextDecoder().decode(h.blob).split(`
`):[],G=m?new TextDecoder().decode(m.blob).split(`
`):[],u=I?new TextDecoder().decode(I.blob).split(`
`):[],C=rt(b,G,u),Z=[];for(const W of C)W.ok?Z.push(...W.ok):W.conflict&&(Z.push("<<<<<<< HEAD"),Z.push(...W.conflict.a),Z.push("======="),Z.push(...W.conflict.b),Z.push(`>>>>>>> ${s.slice(0,7)}`));const A=Z.join(`
`);await this.pfs.writeFile(`/${d}`,A,"utf8")}}throw o}},async clone(a,e,t){t(`Preparing to clone into garden: "${e}"...`);const i=`garden-fs-${e}`;await new Promise((o,c)=>{const l=indexedDB.deleteDatabase(i);l.onsuccess=()=>{t(`Cleared existing database for "${e}".`),o()},l.onerror=r=>{t(`Error clearing database for "${e}".`),c(r.target.error)},l.onblocked=()=>{t(`Clone blocked for "${e}". Please refresh and try again.`),c(new Error("Clone blocked"))}});const s=`http://localhost:8081/${a}`;await f.clone({fs:this.fs,http:re,dir:"/",url:s,onProgress:o=>t(`${o.phase}: ${o.total?Math.round(o.loaded/o.total*100)+"%":o.loaded}`),singleBranch:!0,depth:50}),t("Checking out files..."),await f.checkout({fs:this.fs,dir:"/",force:!0}),this.registerNewGarden(),t("Clone complete!")}};Object.assign(Qe.prototype,ii,ni,si);const w=Qe;class we{constructor({targetSelector:e,items:t,containerItems:i=[],itemSelector:n,dataAttribute:s}){if(this.targetSelector=e,this.items=t,this.containerItems=i,this.itemSelector=n,s){const o=s.replace("data-","");this.dataAttributeKey=o.replace(/-([a-z])/g,c=>c[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const i=this.itemSelector?e.target.closest(this.itemSelector):null;i?this.showMenu(e.clientX,e.clientY,this.items,i):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const i=this.itemSelector?e.target.closest(this.itemSelector):null,n=i?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,n,i||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,i,n){this.menuElement.innerHTML="",this.menuElement.style.display="block";const s=this.dataAttributeKey&&n.dataset[this.dataAttributeKey]?n.dataset[this.dataAttributeKey]:null;i.forEach(h=>{if(h.type==="separator"){const I=document.createElement("div");I.className="context-menu-separator",this.menuElement.appendChild(I);return}const m=document.createElement("button");m.className="context-menu-item",m.textContent=h.label,m.addEventListener("click",()=>{h.action(s),this.hideMenu()}),this.menuElement.appendChild(m)});const o=this.menuElement.offsetWidth,c=this.menuElement.offsetHeight,{innerWidth:l,innerHeight:r}=window;let g=e,d=t;e+o>l&&(g=l-o-5),t+c>r&&(d=r-c-5),this.menuElement.style.top=`${d}px`,this.menuElement.style.left=`${g}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}function oi(){ai(),ci()}function ai(){const a=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!a||!e||!t)return;const i=document.createElement("button");i.id="sidebar-toggle-icon",i.title="Toggle Sidebar (Ctrl + [)",e.appendChild(i);let n=0,s=!1;const o=()=>{if(a.classList.contains("sidebar-collapsed")){const b=localStorage.getItem("sidebarWidth")||"250px";a.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",b),localStorage.setItem("sidebarCollapsed","false"),i.textContent="‹"}else{const b=document.documentElement.style.getPropertyValue("--sidebar-width");b!=="0px"&&localStorage.setItem("sidebarWidth",b),a.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),i.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=o);const c=I=>{I.type==="touchmove"&&I.preventDefault();const b=I.clientX||I.touches&&I.touches[0].clientX;if(Math.abs(b-n)>5&&(s=!0),s){const G=Math.max(24,Math.min(b,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${G}px`),a.classList.remove("sidebar-collapsed"),i.textContent="‹"}},l=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",c),document.removeEventListener("touchmove",c),document.removeEventListener("mouseup",l),document.removeEventListener("touchend",l),s){const I=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",I),localStorage.setItem("sidebarCollapsed","false")}else o()},r=I=>{n=I.clientX||I.touches&&I.touches[0].clientX,s=!1,I.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",c,{passive:!1}),document.addEventListener("touchmove",c,{passive:!1}),document.addEventListener("mouseup",l),document.addEventListener("touchend",l)};e.addEventListener("mousedown",r),e.addEventListener("touchstart",r,{passive:!1});const d=(window.location.hash||"").includes("?windowed=true"),h=localStorage.getItem("sidebarWidth");d||localStorage.getItem("sidebarCollapsed")==="true"?(a.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),i.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",h||"250px"),i.textContent="‹")}function ci(){const a=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!a||!e)return;const i=document.createElement("button");i.id="eruda-toggle",i.title="Toggle DevTools (Ctrl + `)",e.appendChild(i);let n=0,s=!1;const o=(d=null,h=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const m=t.style.height==="0px"||t.offsetHeight<10;if(d===null?m:d){const b=localStorage.getItem("erudaHeight")||"250px";t.style.height=b,i.textContent="▼",localStorage.setItem("erudaCollapsed","false"),h&&setTimeout(()=>window.thoughtform.eruda?.show(h),50)}else{if(m)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",i.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=o);const c=d=>{d.type==="touchmove"&&d.preventDefault();const h=d.clientY||d.touches&&d.touches[0].clientY;if(Math.abs(h-n)>5&&(s=!0),!s)return;const m=window.innerHeight-h,I=42,b=window.innerHeight-100;t.style.height=`${Math.max(I,Math.min(m,b))}px`,i.textContent="▼"},l=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",c),document.removeEventListener("touchmove",c),document.removeEventListener("mouseup",l),document.removeEventListener("touchend",l),s?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):o(null,null)},r=d=>{n=d.clientY||d.touches&&d.touches[0].clientY,s=!1,d.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",c,{passive:!1}),document.addEventListener("touchmove",c,{passive:!1}),document.addEventListener("mouseup",l),document.addEventListener("touchend",l))};e.addEventListener("mousedown",r),e.addEventListener("touchstart",r,{passive:!1});const g=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&((window.location.hash||"").includes("?windowed=true")||localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",i.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",i.textContent="▼"),g.disconnect())});g.observe(a,{childList:!0})}class y{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay),this.id=`modal-${crypto.randomUUID()}`,this.container.dataset.modalId=this.id}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const i=document.createElement("button");return i.textContent=e,i.addEventListener("click",t),this.footer.appendChild(i),i}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:i=""}){return new Promise(n=>{const s=new y({title:e}),o=`modal-input-${Date.now()}`,c=`
        <div class="modal-prompt">
          <label for="${o}">${t}</label>
          <input type="text" id="${o}" value="${i}">
        </div>
      `;s.updateContent(c);const l=s.content.querySelector(`#${o}`),r=()=>{n(l.value),s.destroy()},g=()=>{n(null),s.destroy()};l.addEventListener("keydown",d=>{d.key==="Enter"?(d.preventDefault(),r()):d.key==="Escape"&&g()}),s.addFooterButton("OK",r),s.addFooterButton("Cancel",g),s.show(),l.focus(),l.select()})}static confirm({title:e,message:t,okText:i="OK",cancelText:n="Cancel",destructive:s=!1}){return new Promise(o=>{const c=new y({title:e});c.updateContent(`<p>${t}</p>`);const l=()=>{o(!0),c.destroy()},r=()=>{o(!1),c.destroy()},g=c.addFooterButton(i,l);s&&g.classList.add("destructive"),c.addFooterButton(n,r),c.show()})}static choice({title:e,message:t,choices:i}){return new Promise(n=>{const s=new y({title:e});s.updateContent(t),i.forEach(c=>{const l=s.addFooterButton(c.text,()=>{n(c.id),s.destroy()});c.class&&l.classList.add(c.class)});const o=c=>{c.key==="Escape"&&(n(null),s.destroy(),document.removeEventListener("keydown",o))};return document.addEventListener("keydown",o),s.show(),s})}static selection({title:e,peerData:t,okText:i="Request"}){return new Promise(n=>{if(t.size===0){const r=new y({title:"No Peers Found"});r.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),r.addFooterButton("OK",()=>{r.destroy(),n(null)}),r.show();return}const s=new y({title:e});let o='<div class="peer-selection-container">';t.forEach((r,g)=>{o+=`
          <div class="peer-group" data-peer-id="${g}">
            <strong class="peer-title">Peer: ${r.id}</strong>
            <div class="garden-checkbox-list">
              ${r.gardens.map(d=>`
                <label>
                  <input type="checkbox" class="garden-select-checkbox" value="${d}">
                  <span>${d}</span>
                </label>
              `).join("")}
            </div>
          </div>
        `}),o+="</div>",s.updateContent(o);const c=()=>{const r={};s.content.querySelectorAll(".peer-group").forEach(g=>{const d=g.dataset.peerId,h=Array.from(g.querySelectorAll(".garden-select-checkbox:checked")).map(m=>m.value);h.length>0&&(r[d]=h)}),n(Object.keys(r).length>0?r:null),s.destroy()},l=()=>{n(null),s.destroy()};s.addFooterButton(i,c),s.addFooterButton("Cancel",l),s.show()})}static sendSelection({title:e,peerData:t,gardenData:i,okText:n="Send"}){return new Promise(s=>{if(t.size===0){const h=new y({title:"No Peers Found"});h.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),h.addFooterButton("OK",()=>{h.destroy(),s(null)}),h.show();return}const o=new y({title:e}),c=(h,m,I=!1)=>{const b=h.replace(/\s/g,""),G=m.map(u=>{const C=I?u.id:u,Z=I?u.id:u;return`
            <label>
              <input type="checkbox" class="modal-select-checkbox" data-group="${b}" value="${C}">
              <span>${Z}</span>
            </label>
          `}).join("");return`
          <div class="modal-selection-group" id="group-${b}">
            <strong>${h}</strong>
            <div class="modal-selection-controls">
              <button type="button" class="select-all-btn">Select All</button>
              <button type="button" class="select-none-btn">Deselect All</button>
            </div>
            <div class="modal-selection-list">${G}</div>
          </div>
        `},l=Array.from(t.values());let r='<div class="modal-send-container">';r+=c("Gardens to Send",i),r+=c("Peers to Receive",l,!0),r+="</div>",o.updateContent(r),o.content.querySelectorAll(".modal-selection-group").forEach(h=>{h.querySelector(".select-all-btn").onclick=()=>h.querySelectorAll(".modal-select-checkbox").forEach(m=>m.checked=!0),h.querySelector(".select-none-btn").onclick=()=>h.querySelectorAll(".modal-select-checkbox").forEach(m=>m.checked=!1)});const g=()=>{const h=Array.from(o.content.querySelectorAll("#group-GardenstoSend .modal-select-checkbox:checked")).map(I=>I.value),m=Array.from(o.content.querySelectorAll("#group-PeerstoReceive .modal-select-checkbox:checked")).map(I=>I.value);h.length>0&&m.length>0?s({gardens:h,peers:m}):s(null),o.destroy()},d=()=>{s(null),o.destroy()};o.addFooterButton(n,g),o.addFooterButton("Cancel",d),o.show()})}static gardenSelection({title:e,gardenData:t,okText:i="Start Session"}){return new Promise(n=>{const s=new y({title:e}),o=(g,d)=>{const h=d.map(m=>`
          <label>
            <input type="checkbox" class="modal-select-checkbox" value="${m}">
            <span>${m}</span>
          </label>
        `).join("");return`
          <div class="modal-selection-group">
            <strong>${g}</strong>
            <div class="modal-selection-controls">
              <button type="button" class="select-all-btn">Select All</button>
              <button type="button" class="select-none-btn">Deselect All</button>
            </div>
            <div class="modal-selection-list">${h}</div>
          </div>
        `};s.updateContent(o("Gardens to Sync",t));const c=s.content.querySelector(".modal-selection-group");c.querySelector(".select-all-btn").onclick=()=>c.querySelectorAll(".modal-select-checkbox").forEach(g=>g.checked=!0),c.querySelector(".select-none-btn").onclick=()=>c.querySelectorAll(".modal-select-checkbox").forEach(g=>g.checked=!1);const l=()=>{const g=Array.from(s.content.querySelectorAll(".modal-select-checkbox:checked")).map(d=>d.value);n(g),s.destroy()},r=()=>{n(null),s.destroy()};s.addFooterButton(i,l),s.addFooterButton("Cancel",r),s.show()})}}async function De(a,e){const t=a.pfs;let i=[];try{const n=await t.readdir(e);for(const s of n){const o=`${e==="/"?"":e}/${s}`;try{(await t.stat(o)).isDirectory()?i=i.concat(await De(a,o)):i.push(o)}catch{console.warn(`Could not stat ${o}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return i}async function Ke(a,e){try{if((await a.stat(e)).isDirectory()){const i=await a.readdir(e);for(const n of i)await Ke(a,`${e}/${n}`);await a.rmdir(e)}else await a.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async function li(a,e){e("Starting export...");const t=new q;if(!a||a.length===0)throw new Error("No gardens were selected for export.");for(const c of a){e(`Processing garden: "${c}"...`);const l=t.folder(c),r=new w(c),g=await De(r,"/");for(const d of g){const h=await r.pfs.readFile(d),m=d.startsWith("/")?d.substring(1):d;l.file(m,h)}}e("Generating zip file...");const i=await t.generateAsync({type:"blob"}),s=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,o=document.createElement("a");o.href=URL.createObjectURL(i),o.download=s,document.body.appendChild(o),o.click(),document.body.removeChild(o),e(`Export process initiated: ${s}`)}async function ri(a){const e=await q.loadAsync(a),t=new Set;return e.forEach(i=>{if(i.includes("/")){const n=i.split("/")[0];t.add(n)}}),Array.from(t).sort()}async function di(a,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${a.name}...`);const i=await q.loadAsync(a);t("Zip file loaded. Analyzing backup contents...");let n="merge";const s=[];for(const g of e){const d=new w(g);let h=!1;try{await d.pfs.stat("/.git"),h=!0}catch{}const m=Object.keys(i.files).some(I=>I.startsWith(`${g}/.git/`));h&&m&&s.push(g)}if(s.length>0){const g=`<ul>${s.map(h=>`<li><strong>${h}</strong></li>`).join("")}</ul>`,d=await y.choice({title:"Replace Garden History?",message:`<p>The backup contains a git history for the following existing garden(s):</p>
                ${g}
                <p>Replacing history is a destructive action. How should we proceed?</p>`,choices:[{id:"replace",text:"Replace History",class:"destructive"},{id:"merge",text:"Merge Files, Keep Local History"},{id:"cancel",text:"Cancel Import"}]});if(!d||d==="cancel"){t("Import cancelled by user.");return}n=d}if(n==="replace"){t("Strategy: Replacing history for conflicting gardens.");for(const g of s){t(`  Deleting existing .git directory for "${g}"...`);const d=new w(g);await Ke(d.pfs,"/.git"),t(`  Done deleting for "${g}".`)}}else t("Strategy: Merging files and keeping local history where conflicts exist.");const o=new Map;t("Initializing target gardens...");for(const g of e){const d=new w(g);await d.initRepo(),o.set(g,d)}t("Initialization complete. Starting file writes...");const c=[];i.forEach((g,d)=>{if(d.dir)return;const h=g.split("/")[0];if(!e.includes(h)||g.substring(h.length+1).startsWith(".git/")&&n==="merge"&&s.includes(h))return;const I=`/${g.substring(h.length+1)}`,b=d.async("uint8array").then(async G=>{await o.get(h).writeFile(I,G)});c.push(b)});const l=c.length;let r=0;c.forEach(g=>g.then(()=>{r++,(r%100===0||r===l)&&t(`Writing files... (${r}/${l})`)})),await Promise.all(c),t("Import complete! Reloading page..."),setTimeout(()=>window.location.reload(),1500)}async function gi(a,e){if(!a||a.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let i=t?JSON.parse(t):[];for(const n of a){e(`Deleting garden: "${n}"...`),i=i.filter(o=>o!==n);const s=`garden-fs-${n}`;await new Promise((o,c)=>{const l=indexedDB.deleteDatabase(s);l.onsuccess=()=>{e(`  Successfully deleted database: ${s}`),o()},l.onerror=r=>{e(`  Error deleting database: ${s}`),c(r.target.error)},l.onblocked=()=>{e(`  Deletion blocked for ${s}. Please refresh and try again.`),c(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(i)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const n=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(a.includes(n)||i.length===0){const s=new URL(import.meta.url).pathname,o=s.lastIndexOf("/src/"),c=o>-1?s.substring(0,o):"";window.location.href=`${window.location.origin}${c}/home`}else window.location.reload()},2e3)}async function hi(a,e){e("<strong>NUKE INITIATED. Wiping all application data.</strong>");for(const t of a){e(`  Deleting database for garden: "${t}"...`);const i=`garden-fs-${t}`;await new Promise((n,s)=>{const o=indexedDB.deleteDatabase(i);o.onsuccess=()=>{e("    - Success."),n()},o.onerror=c=>{e(`    - <span style="color: var(--base-accent-warning);">Error: ${c.target.error.message}</span>`),s(c.target.error)},o.onblocked=()=>{e('    - <span style="color: var(--base-accent-destructive);">Deletion blocked. Please refresh the app and try again.</span>'),s(new Error("Deletion blocked"))}})}e("All garden databases deleted.");try{localStorage.clear(),e("Local storage cleared.")}catch(t){e(`Error clearing local storage: ${t.message}`)}try{sessionStorage.clear(),e("Session storage cleared.")}catch(t){e(`Error clearing session storage: ${t.message}`)}e("Nuke complete. Reloading to a fresh state..."),setTimeout(()=>{const t=new URL(import.meta.url).pathname,i=t.lastIndexOf("/src/"),n=i>-1?t.substring(0,i):"";window.location.href=`${window.location.origin}${n}/`},2e3)}function ge(a,e,t=!0){const i=e.map(n=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${n}" ${t?"checked":""}>
      <span>${n}</span>
    </label>
  `).join("");return`
    <div>
      <p>${a}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${i}
      </div>
    </div>
  `}class mi{constructor(e){this.eruda=e,this._$el=null}add(){this.eruda.add({name:"Data",init:e=>{this._$el=e,this._render(),this._bindEvents()},show:()=>this._$el.show(),hide:()=>this._$el.hide()})}_render(){this._$el.html(`
      <div>
        <h2>Data Portability</h2>
        <button id="export-btn" class="eruda-button">Export...</button>
        <button id="import-btn" class="eruda-button">Import...</button>
        <input type="file" id="import-file-input" accept=".zip" style="display: none;">
        
        <hr>

        <h2>Danger Zone</h2>
        <p>
          <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
        </p>
      </div>
    `)}_bindEvents(){const e=this._$el;e.find("#export-btn")[0].addEventListener("click",()=>this._handleExport()),e.find("#import-btn")[0].addEventListener("click",()=>e.find("#import-file-input")[0].click()),e.find("#import-file-input")[0].addEventListener("change",t=>this._handleFileSelect(t)),e.find("#clear-data-btn")[0].addEventListener("click",()=>this._handleClearData())}_handleExport(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],i=new y({title:"Select Gardens to Export"});i.updateContent(ge("Choose which gardens to include in the export:",t));const n=i.content;n.querySelector(".select-all-btn").onclick=()=>n.querySelectorAll(".garden-select-checkbox").forEach(o=>o.checked=!0),n.querySelector(".select-none-btn").onclick=()=>n.querySelectorAll(".garden-select-checkbox").forEach(o=>o.checked=!1);const s=async()=>{const o=Array.from(n.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);i.destroy();const c=new y({title:"Exporting Gardens..."});c.updateContent("<p>Preparing export. Please wait...</p>");let l=!1,r="";c.addFooterButton("Cancel",()=>{l=!0,c.destroy()}),c.show();try{await li(o,g=>{if(l)throw new Error("Export cancelled by user.");r+=g+"<br>",c.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${r}</div>`)}),l||(c.clearFooter(),c.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>c.destroy(),3e3))}catch(g){l||(c.clearFooter(),c.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${g.message}</p>`),c.addFooterButton("Close",()=>c.destroy()))}};i.addFooterButton("Export Selected",s),i.addFooterButton("Cancel",()=>i.destroy()),i.show()}async _handleFileSelect(e){const t=e.target,i=t.files[0];if(!i)return;const n=new y({title:"Select Gardens to Import"});n.updateContent("Scanning zip file..."),n.show();try{const s=await ri(i);if(s.length===0){n.updateContent("No valid gardens found in this zip file."),n.addFooterButton("Close",()=>n.destroy());return}n.updateContent(ge(`Found ${s.length} garden(s). Select which to import:`,s));const o=n.content;o.querySelector(".select-all-btn").onclick=()=>o.querySelectorAll(".garden-select-checkbox").forEach(l=>l.checked=!0),o.querySelector(".select-none-btn").onclick=()=>o.querySelectorAll(".garden-select-checkbox").forEach(l=>l.checked=!1);const c=async()=>{const l=Array.from(o.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);n.clearFooter(),n.updateContent("Starting import...");let r="";try{await di(i,l,g=>{r+=`${g}<br>`,n.updateContent(r)})}catch(g){n.updateContent(`<strong>Error during import:</strong><br>${g.message}`),n.addFooterButton("Close",()=>n.destroy())}};n.addFooterButton("Import Selected",c),n.addFooterButton("Cancel",()=>n.destroy())}catch(s){n.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${s.message}`),n.addFooterButton("Close",()=>n.destroy())}finally{t.value=""}}_handleClearData(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[],i=new y({title:"Clear Garden Data"});i.updateContent(ge("Select gardens to permanently delete:",t,!1)+`<div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid var(--color-border-primary);">
         <label style="display: flex; align-items: center; color: var(--base-accent-destructive);">
           <input type="checkbox" id="nuke-all-data-checkbox">
           <strong style="margin-left: 8px;">Nuke EVERYTHING (Deletes all gardens & resets all settings)</strong>
         </label>
         <p style="font-size: 0.9em; margin-left: 25px; color: var(--base-accent-warning);">Warning: This is the ultimate reset. It clears all gardens, localStorage, and sessionStorage. The app will be in a fresh-install state after reloading.</p>
       </div>`);const n=i.content;n.querySelector(".select-all-btn").onclick=()=>n.querySelectorAll(".garden-select-checkbox").forEach(c=>c.checked=!0),n.querySelector(".select-none-btn").onclick=()=>n.querySelectorAll(".garden-select-checkbox").forEach(c=>c.checked=!1);const s=async()=>{const c=n.querySelector("#nuke-all-data-checkbox").checked,l=Array.from(n.querySelectorAll(".garden-select-checkbox:checked")).map(d=>d.value);if(!c&&l.length===0){i.destroy();return}i.clearFooter(),i.updateContent("Starting deletion...");let r="";const g=d=>{r+=`${d}<br>`,i.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto; white-space: pre-wrap;">${r}</div>`)};try{c?await hi(t,g):await gi(l,g)}catch(d){i.updateContent(`<strong>Error during deletion:</strong><br>${d.message}`),i.addFooterButton("Close",()=>i.destroy()).classList.add("destructive")}};i.addFooterButton("Delete Selected",s).classList.add("destructive"),i.addFooterButton("Cancel",()=>i.destroy()),i.show()}}function Ii(a){new mi(a).add()}function bi(a,e){let t;return function(...n){const s=()=>{clearTimeout(t),a(...n)};clearTimeout(t),t=setTimeout(s,e)}}class ui{constructor(e){this.eruda=e,this._$el=null,this.debouncedSave=bi(()=>this._handleSaveConfig(),300)}add(){this.eruda.add({name:"AI",init:e=>{this._$el=e,this._render(),this._bindEvents()},show:()=>{this._$el.show(),this._loadAndRenderProviders(),this._renderCacheTable(),this._renderModelDropdown()},hide:()=>this._$el.hide()})}_render(){this._$el.html(`
      <div style="padding: 10px;">
        <h2>AI Configuration</h2>
        
        <div class="sync-panel" style="margin-bottom: 15px;">
            <h3>Active Provider</h3>
            <div class="sync-row">
                <select id="ai-active-provider" class="eruda-select" style="width: 100%;"></select>
            </div>
        </div>

        <div class="sync-panel">
          <h3>Google Gemini (Built-in)</h3>
          <div class="sync-row" style="margin-bottom: 10px;">
            <label for="gemini-api-key" class="sync-label">API Key:</label>
            <input type="password" id="gemini-api-key" class="eruda-input flex-grow">
          </div>
          <div class="sync-row">
            <label for="gemini-model-name" class="sync-label">Model Name:</label>
            <input type="text" id="gemini-model-name" class="eruda-input flex-grow" placeholder="e.g., gemini-2.5-flash">
          </div>
        </div>
        
        <div id="custom-providers-container" style="margin-top: 15px;">
            <h3>Custom OpenAI-Compatible Providers</h3>
            <div id="custom-providers-list"></div>
            <button id="add-provider-btn" class="eruda-button" style="margin-top: 10px;">Add New Provider</button>
        </div>

        <div class="sync-panel" style="margin-bottom: 15px;margin-top: 15px;">
          <h3>WebLLM (In-Browser)</h3>
          <div class="sync-row" style="margin-bottom: 10px;">
            <label for="webllm-model-select" class="sync-label">Model:</label>
            <select id="webllm-model-select" class="eruda-select flex-grow"></select>
          </div>
          <div class="sync-row">
            <button id="load-webllm-btn" class="eruda-button" style="width: 100%;">Load Model</button>
          </div>
          <div id="webllm-status" style="margin-top: 10px; color: var(--base-accent-info); font-size: 0.9em;">
            Status: Not loaded.
          </div>
          <div id="webllm-cache-container" style="margin-top: 15px;"></div>
        </div>

        <div class="sync-panel" style="margin-top: 15px;">
          <h3>Content Proxy</h3>
          <div class="sync-row">
            <label for="proxy-url" class="sync-label">Proxy URL:</label>
            <input type="text" id="proxy-url" class="eruda-input flex-grow" placeholder="https://proxy.thoughtform.garden">
          </div>
        </div>
        <div id="ai-save-status" style="margin-top: 10px; color: var(--base-accent-action);"></div>
      </div>
    `)}async _renderCacheTable(){const e=this._$el.find("#webllm-cache-container")[0];if(!e)return;e.innerHTML="<h4>Cached Models</h4><p>Scanning cache...</p>";let t=`
      <table class="eruda-table">
        <thead>
          <tr>
            <th>Model ID</th>
            <th>Size (VRAM)</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
    `,i=0;for(const n of Q.model_list)await ce(n.model_id,Q)&&(i++,t+=`
          <tr>
            <td>${n.model_id}</td>
            <td>${n.vram_required_MB} MB</td>
            <td>
              <button class="eruda-button select-cache-btn" data-model-id="${n.model_id}" style="margin-right: 5px;">Use</button>
              <button class="eruda-button destructive delete-cache-btn" data-model-id="${n.model_id}">Delete</button>
            </td>
          </tr>
        `);if(i===0){e.innerHTML="<h4>Cached Models</h4><p>No models are currently cached in this browser.</p>";return}t+="</tbody></table>",e.innerHTML=t}_loadAndRenderProviders(){let e=JSON.parse(localStorage.getItem("thoughtform_ai_providers_list")||"[]");const t=localStorage.getItem("thoughtform_ai_provider")||"gemini";e.length===0&&e.push({id:"custom",endpoint:"http://localhost:11434/v1",model:"",apiKey:""});const i=this._$el.find("#custom-providers-list")[0],n=this._$el.find("#ai-active-provider")[0];i.innerHTML="",n.innerHTML=`
        <option value="webllm">WebLLM (In-Browser)</option>
        <option value="gemini">Google Gemini</option>
      `,e.forEach(s=>{const o=this._createProviderElement(s);i.appendChild(o);const c=document.createElement("option");c.value=s.id,c.textContent=s.id,n.appendChild(c)}),n.value=t}_createProviderElement(e){const t=document.createElement("div");return t.className="sync-panel provider-instance",t.dataset.providerId=e.id,t.innerHTML=`
      <div class="sync-row space-between" style="margin-bottom: 10px;">
        <label class="sync-label">Provider ID:</label>
        <input type="text" class="eruda-input flex-grow provider-id" value="${e.id}" placeholder="e.g., local-ollama">
        <button class="eruda-button destructive provider-delete-btn" style="margin-left: 10px;">Delete</button>
      </div>
      <div class="sync-row" style="margin-bottom: 10px;">
        <label class="sync-label">Endpoint URL:</label>
        <input type="text" class="eruda-input flex-grow provider-endpoint" value="${e.endpoint||""}" placeholder="http://localhost:11434/v1 (default)">
      </div>
      <div class="sync-row" style="margin-bottom: 10px;">
        <label class="sync-label">Model Name:</label>
        <input type="text" class="eruda-input flex-grow provider-model" value="${e.model||""}" placeholder="e.g., llama3 (required)">
      </div>
      <div class="sync-row">
        <label class="sync-label">API Key:</label>
        <input type="password" class="eruda-input flex-grow provider-apikey" value="${e.apiKey||""}" placeholder="Optional">
      </div>
    `,t}async _renderModelDropdown(){const e=this._$el.find("#webllm-model-select")[0],t=[],i=[];Q.model_list.forEach(o=>{o.model_id.includes("f16")?t.push(o):i.push(o)});let n='<optgroup label="Recommended (GPU-Optimized)">';for(const o of t){const l=await ce(o.model_id,Q)?" [💾 Cached]":"";n+=`<option value="${o.model_id}">${o.model_id} (~${o.vram_required_MB} MB)${l}</option>`}n+="</optgroup>";let s="";if(i.length>0){s='<optgroup label="Compatibility (Slower)">';for(const o of i){const l=await ce(o.model_id,Q)?" [💾 Cached]":"";s+=`<option value="${o.model_id}">${o.model_id} (~${o.vram_required_MB} MB)${l}</option>`}s+="</optgroup>"}e.innerHTML=n+s,e.value=localStorage.getItem("thoughtform_webllm_model_id")||"Llama-3-8B-Instruct-q4f16_1-MLC"}_bindEvents(){const e=this._$el;this._renderModelDropdown(),e.find("#gemini-api-key")[0].value=localStorage.getItem("thoughtform_gemini_api_key")||"",e.find("#gemini-model-name")[0].value=localStorage.getItem("thoughtform_gemini_model_name")||"gemini-2.5-flash",e.find("#proxy-url")[0].value=localStorage.getItem("thoughtform_proxy_url")||"",e[0].addEventListener("input",s=>{if(s.target.classList.contains("provider-id")){const o=s.target.closest(".provider-instance"),c=s.target.value.trim(),l=o.dataset.providerId,r=this._$el.find("#ai-active-provider")[0],g=r.querySelector(`option[value="${l}"]`);if(g){const d=r.value===l;g.value=c,g.textContent=c,d&&(r.value=c)}o.dataset.providerId=c}s.target.tagName==="INPUT"&&this.debouncedSave()}),e[0].addEventListener("change",s=>{(s.target.id==="ai-active-provider"||s.target.id==="webllm-model-select")&&this._handleSaveConfig({render:!1})}),e[0].addEventListener("click",async s=>{if(s.target.id==="add-provider-btn"){const o={id:`new-provider-${crypto.randomUUID().slice(0,4)}`,endpoint:"",model:"",apiKey:""},c=this._createProviderElement(o);e.find("#custom-providers-list")[0].appendChild(c),this._handleSaveConfig({render:!0})}if(s.target.classList.contains("provider-delete-btn")&&(s.target.closest(".provider-instance").remove(),this._handleSaveConfig({render:!0})),s.target.classList.contains("delete-cache-btn")){const o=s.target.dataset.modelId;s.target.textContent="Deleting...",s.target.disabled=!0,await window.thoughtform.ai.deleteWebLlmCache(o),await this._renderCacheTable(),await this._renderModelDropdown()}if(s.target.classList.contains("select-cache-btn")){const o=s.target.dataset.modelId,c=this._$el.find("#webllm-model-select")[0];c.value=o,this._handleSaveConfig(),c.scrollIntoView({behavior:"smooth",block:"center"}),c.style.transition="outline 0.1s ease-in-out",c.style.outline="2px solid var(--base-accent-action)",setTimeout(()=>{c.style.outline="none"},1e3)}});const t=e.find("#load-webllm-btn")[0],i=e.find("#webllm-status")[0],n=e.find("#webllm-model-select")[0];t.addEventListener("click",()=>{const s=n.value;t.disabled=!0,t.textContent="Loading...",i.style.color="var(--base-accent-info)";const o=c=>{if(c.progress===-1)i.style.color="var(--base-accent-destructive)",i.textContent=c.text,t.disabled=!1,t.textContent="Load Model";else{const l=(c.progress*100).toFixed(1);i.textContent=`${c.text} (${l}%)`,c.progress>=1&&(t.disabled=!1,t.textContent="Reload Model",this._renderCacheTable(),this._renderModelDropdown())}};window.thoughtform.ai.initializeWebLlmEngine(s,o)})}_handleSaveConfig({render:e=!1}={}){const t=this._$el;localStorage.setItem("thoughtform_ai_provider",t.find("#ai-active-provider")[0].value),localStorage.setItem("thoughtform_webllm_model_id",t.find("#webllm-model-select")[0].value),localStorage.setItem("thoughtform_gemini_api_key",t.find("#gemini-api-key")[0].value.trim()),localStorage.setItem("thoughtform_gemini_model_name",t.find("#gemini-model-name")[0].value.trim()||"gemini-2.5-flash"),localStorage.setItem("thoughtform_proxy_url",t.find("#proxy-url")[0].value.trim());const i=[];Array.from(t.find(".provider-instance")).forEach(s=>{i.push({id:s.querySelector(".provider-id").value.trim(),endpoint:s.querySelector(".provider-endpoint").value.trim(),model:s.querySelector(".provider-model").value.trim(),apiKey:s.querySelector(".provider-apikey").value.trim()})}),localStorage.setItem("thoughtform_ai_providers_list",JSON.stringify(i)),e&&this._loadAndRenderProviders(),window.thoughtform.ai?.loadConfig();const n=t.find("#ai-save-status")[0];n.textContent="Configuration saved!",clearTimeout(this.saveStatusTimeout),this.saveStatusTimeout=setTimeout(()=>{n.textContent=""},2e3)}}function Ci(a){new ui(a).add()}function Gi(){const a=document.getElementById("eruda-container");if(!a)return;E.init({container:a,tool:["console"],inline:!0,useShadowDom:!1});const e=E.get("console");return e&&e.config.set("maxLogNum",2e3),window.thoughtform&&(window.thoughtform.eruda=E),setTimeout(()=>{const t=a.querySelector(".luna-tab-item")?.parentElement;t&&t.addEventListener("click",i=>{const n=i.target.closest(".luna-tab-item");if(n){const s=n.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,s)}})},500),setTimeout(()=>{const t=a.querySelector(".eruda-elements");if(!t)return;let i=!1;new MutationObserver(()=>{const s=t.style.display!=="none";if(s&&!i){const o=document.querySelector(".eruda-control > .eruda-icon-select");o&&(o.click(),o.click())}i=s}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),Ii(E),Ci(E),E.add({name:"Sync",init(t){this.sync=window.thoughtform.sync,this.sync?this.sync.init(t.get(0)):console.error("FATAL: Sync service not found on window.thoughtform during DevTools initialization.")},show(){this.sync?.show()},hide(){this.sync?.hide()},destroy(){this.sync?.destroy()}}),E}async function Zi(a,e){const t=new w(a);try{return await t.readFile(e)}catch(i){if(i.message.includes("does not exist")&&a!=="Settings"){const n=new w("Settings");try{return await n.readFile(e)}catch(s){if(s.message.includes("does not exist"))return null;throw s}}if(i.message.includes("does not exist"))return null;throw i}}async function se(a,e,t,i=null,n=null){try{let[s,o]=a.split("#");o.startsWith("/")||(o=`/${o}`);const c=await Zi(s,o);if(c===null){console.warn(`[Executor] Could not find script to execute for path: "${a}"`);return}const l=`(function(editor, git, event, params) {
      try {
        ${c}
      } catch (e) {
        console.error(
          'EXECUTION FAILED in script: "${a}"\\n' +
          '--------------------------------------------------\\n' +
          'This error was caught and did not crash the application. Please check the script for errors.\\n\\n',
          e
        );
      }
    })(...arguments);`;await new Function(l)(e,t,i,n)}catch(s){console.error(`[Executor] Failed to process script for path "${a}":`,s),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}const Be=new Set(["png","jpg","jpeg","gif","webp","svg","ico","avif","bmp","tiff","mp3","wav","ogg","flac","aac","m4a","mp4","webm","mov","mkv","avi","flv","woff","woff2","ttf","otf","eot","zip","rar","7z","tar","gz","pdf","doc","docx","xls","xlsx","ppt","pptx","db","sqlite","bin","exe","dll","iso"]);function pi(a,e){let t;return function(...n){const s=()=>{clearTimeout(t),a(...n)};clearTimeout(t),t=setTimeout(s,e)}}class yi{constructor(){this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="searchFiles",this.lastEditorState=null,this.isIndexing=!1,this.indexPromise=null,this.isIndexBuilt=!1,this.unifiedIndex=new dt.Document({document:{id:"id",index:["pathSearch","content"],store:["garden","path"]},tokenize:"forward"}),this.handleKeyDown=this.handleKeyDown.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.debouncedHandleInput=pi(this.handleInput.bind(this),150),this.createDOMElements(),this.listenForFileChanges()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.debouncedHandleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}listenForFileChanges(){if(window.thoughtform&&window.thoughtform.events){const e=(t,i)=>{if(!this.isIndexBuilt||this.isIndexing)return;const n=i.path.split(".").pop()?.toLowerCase();if(Be.has(n)&&t!=="file:delete")return;const s=`${i.gardenName} ${i.path.substring(1)}`.toLowerCase(),o=`${i.gardenName}#${i.path}`;switch(t){case"file:create":window.thoughtform.workspace.getGitClient(i.gardenName).then(c=>{c.readFile(i.path).then(l=>{this.unifiedIndex.add({id:o,garden:i.gardenName,path:i.path,pathSearch:s,content:l})})});break;case"file:update":this.unifiedIndex.update({id:o,garden:i.gardenName,path:i.path,pathSearch:s,content:i.content});break;case"file:delete":this.unifiedIndex.remove(o);break}};window.thoughtform.events.subscribe("file:create",t=>e("file:create",t)),window.thoughtform.events.subscribe("file:update",t=>e("file:update",t)),window.thoughtform.events.subscribe("file:delete",t=>e("file:delete",t))}}async _buildIndex(){try{this.isIndexing=!0,this.input.placeholder="Indexing... please wait",this.resultsList.innerHTML='<li class="command-no-results">Scanning gardens...</li>';const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"];let i=0;for(const n of t){const s=await window.thoughtform.workspace.getGitClient(n),o=await window.thoughtform.sidebar.listAllPaths(s,"/");for(const c of o){if(!c.isDirectory){const l=c.path.split(".").pop()?.toLowerCase(),r=`${n} ${c.path.substring(1)}`.toLowerCase(),g=`${n}#${c.path}`;if(Be.has(l)){this.unifiedIndex.add({id:g,garden:n,path:c.path,pathSearch:r,content:""}),i++;continue}try{const d=await s.readFile(c.path);typeof d=="string"&&(this.unifiedIndex.add({id:g,garden:n,path:c.path,pathSearch:r,content:d}),i++)}catch{}}i>0&&i%50===0&&(this.resultsList.innerHTML=`<li class="command-no-results">Indexing... (${i} files scanned)</li>`,await new Promise(l=>setTimeout(l,0)))}}this.input.placeholder=`Search across ${this.unifiedIndex.size} documents...`,this.isIndexing=!1,this.isIndexBuilt=!0}catch{this.resultsList.innerHTML='<li class="command-no-results" style="color: red;">Error during indexing.</li>',this.isIndexing=!1}}async open(e="searchFiles"){if(this.isOpen)return;this.isOpen=!0,this.mode=e;const t=window.thoughtform.workspace.getActiveEditor();switch(t&&t.editorView?this.lastEditorState={editor:t,selection:t.editorView.state.selection.main}:this.lastEditorState=null,this.mode){case"executeCommand":this.titleElement.textContent="Execute Command",this.input.placeholder="Find a .js file to execute...";break;case"searchContent":this.titleElement.textContent="Global Content Search",this.input.placeholder="Search content across all gardens...";break;case"searchFiles":default:this.titleElement.textContent="Search Files",this.input.placeholder="Find file across all gardens...";break}this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.isIndexBuilt&&!this.indexPromise?this.indexPromise=this._buildIndex().finally(()=>{this.indexPromise=null,this.input.value&&this.search(this.input.value)}):this.isIndexBuilt&&(this.input.placeholder=`Search across ${this.unifiedIndex.size} documents...`),this.search("")}close(){if(!this.isOpen)return;this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,this.lastEditorState=null,document.removeEventListener("keydown",this.handleKeyDown);const e=window.thoughtform.workspace.getActiveEditor();e&&e.editorView&&e.editorView.focus()}async search(e){if(this.query=e.toLowerCase().trim(),this.isIndexing)return;if(!this.isIndexBuilt){this.resultsList.innerHTML='<li class="command-no-results">Waiting for index...</li>';return}let t={enrich:!0,limit:100},i="pathSearch";this.mode==="searchContent"&&(i="content",t.limit=50);let n=[];this.query?n=(await this.unifiedIndex.searchAsync(this.query,{index:i,...t}))[0]?.result||[]:this.mode!=="searchContent"&&(n=this.unifiedIndex.search({index:i,...t})[0]?.result||[]),this.mode==="executeCommand"&&(n=n.filter(c=>c.doc.path.endsWith(".js")));const s=await window.thoughtform.workspace.getActiveGitClient(),o=s?s.gardenName:"";n.sort((c,l)=>{const r=c.doc.garden===o,g=l.doc.garden===o;return r&&!g?-1:!r&&g?1:c.doc.path.localeCompare(l.doc.path)}),this.results=n,this.selectedIndex=0,this.renderResults()}async getSnippet(e,t){try{const s=(await(await window.thoughtform.workspace.getGitClient(e)).readFile(t)).split(`
`),o=this.query.toLowerCase();let c=s.find(r=>r.toLowerCase().includes(o));c||(c=s.find(r=>r.trim()!=="")||"No content preview available.");const l=new RegExp(this.query.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),"gi");return c.trim().replace(l,"<mark>$&</mark>")}catch{return"Could not load file preview."}}async renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML=`<li class="command-no-results">${this.isIndexing?"Indexing...":"No matches found"}</li>`;return}const e=document.createDocumentFragment();for(let t=0;t<this.results.length;t++){const i=this.results[t].doc,n=document.createElement("li");n.className="command-result-item",n.dataset.index=t;const s=i.path.startsWith("/")?i.path.substring(1):i.path,o=` <span class="command-garden">[${i.garden}]</span>`;if(this.mode==="searchContent"){const c=await this.getSnippet(i.garden,i.path);n.innerHTML=`<div class="command-path">${o} ${s}</div><div class="global-search-snippet">${c}</div>`}else n.innerHTML=`<div class="command-path">${o} ${s}</div>`;t===this.selectedIndex&&(n.classList.add("active"),n.scrollIntoView({block:"nearest"})),e.appendChild(n)}this.resultsList.appendChild(e)}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e].doc;if(this.mode==="executeCommand"){const i=window.thoughtform.workspace.getActiveEditor(),n=await window.thoughtform.workspace.getActiveGitClient();i&&n&&se(`${t.garden}#${t.path}`,i,n)}else window.thoughtform.workspace.openFile(t.garden,t.path);this.close()}async insertLink(e){if(e<0||e>=this.results.length||!this.lastEditorState)return;const{editor:t,selection:i}=this.lastEditorState;if(!t||!t.editorView||t.editorView.isDestroyed)return;const n=this.results[e].doc,s=t.gitClient.gardenName,o=n.path.startsWith("/")?n.path.substring(1):n.path,l=`[[${n.garden===s?o:`${n.garden}#${o}`}]]`;t.editorView.dispatch({changes:{from:i.from,to:i.to,insert:l},selection:{anchor:i.from+l.length}}),this.close()}async openInNewPane(e){if(e<0||e>=this.results.length||!this.lastEditorState)return;const{editor:t}=this.lastEditorState;if(!t||!t.paneId)return;const i=this.results[e].doc,n=t.gitClient.gardenName,s=i.path.startsWith("/")?i.path.substring(1):i.path;let o=i.garden===n?s:`${i.garden}#${s}`;window.thoughtform.workspace.openInNewPane(o,t.paneId),this.close()}async openInWindow(e){if(e<0||e>=this.results.length)return;const t=this.results[e].doc,i=`/${t.garden}#${t.path}?windowed=true`,n=window.innerWidth/2,s=window.innerHeight/2;window.self!==window.top?window.top.postMessage({type:"request-preview-window",payload:{url:i,clientX:n,clientY:s}},"*"):typeof window.thoughtform.ui.openWindow=="function"?window.thoughtform.ui.openWindow(i,n,s):console.error("Windowing function not available."),this.close()}handleInput(e){this.search(e.target.value)}async handleResultClick(e){const t=e.target.closest(".command-result-item");t&&await this.selectItem(parseInt(t.dataset.index,10))}async handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&(e.altKey&&this.mode!=="executeCommand"?await this.openInWindow(this.selectedIndex):e.shiftKey&&(e.ctrlKey||e.metaKey)&&this.mode!=="executeCommand"?await this.openInNewPane(this.selectedIndex):(e.ctrlKey||e.metaKey)&&this.mode!=="executeCommand"?await this.insertLink(this.selectedIndex):await this.selectItem(this.selectedIndex));break;case"Escape":e.preventDefault(),this.close();break}}}async function Oe(a,e){const t=a.pfs;let i=[];try{const n=await t.readdir(e);for(const s of n){if(s===".git")continue;const o=`${e==="/"?"":e}/${s}`;try{(await t.stat(o)).isDirectory()?i=i.concat(await Oe(a,o)):i.push(o)}catch{console.warn(`[Migration] Could not stat ${o}, skipping.`)}}}catch{console.warn(`[Migration] Could not read directory: ${e}.`)}return i}async function Ai(){console.log("%cStarting Thoughtform data migration...","font-weight: bold; font-size: 1.2em;"),console.log("This will convert all files from the old JSON format to raw content. This only needs to be run once.");const a=localStorage.getItem("thoughtform_gardens"),e=a?JSON.parse(a):["home"];if(e.length===0){console.log("No gardens found to migrate.");return}let t=0,i=0;for(const n of e){console.log(`%cProcessing garden: "${n}"`,"font-weight: bold; color: blue;");const s=new w(n),o=await Oe(s,"/");if(o.length===0){console.log("No files found in this garden.");continue}for(const c of o){t++;try{const l=await s.readFile(c);let r;try{r=JSON.parse(l)}catch{console.log(`- ${c} is not in JSON format, skipping.`);continue}if(r&&typeof r.content<"u"){const g=r.content;l!==g?(console.log(`%c  MIGRATING: ${c}`,"color: green;"),await s.writeFile(c,g),i++):console.log(`- ${c} content is already raw, skipping.`)}else console.log(`- ${c} is valid JSON but not the old format, skipping.`)}catch(l){console.error(`%c  ERROR: Failed to process ${c}.`,"color: red;",l)}}}console.log("%cMigration complete!","font-weight: bold; font-size: 1.2em;"),console.log(`Checked ${t} files across ${e.length} garden(s).`),console.log(`Migrated ${i} files.`),console.log("You should now refresh the page.")}async function Wi(a,e,t,i){const n=`https://generativelanguage.googleapis.com/v1beta/models/${e}:streamGenerateContent?key=${a}&alt=sse`,s={contents:[{parts:[{text:t}]}]};try{const o=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s),signal:i});if(!o.ok){const r=await o.json();throw console.error("Gemini API Error:",r),new Error(`API request failed: ${r.error?.message||o.statusText}`)}const c=o.body.getReader(),l=new TextDecoder;return new ReadableStream({async pull(r){for(;;){const{done:g,value:d}=await c.read();if(g){r.close();break}const m=l.decode(d,{stream:!0}).split(`
`);for(const I of m)if(I.startsWith("data: "))try{const b=I.substring(5).trim(),u=JSON.parse(b)?.candidates?.[0]?.content?.parts?.[0]?.text;u&&r.enqueue(u)}catch{}}}})}catch(o){throw o.name==="AbortError"?console.log("Gemini API request was cancelled by the user."):console.error("Failed to fetch from Gemini API:",o),o}}async function fi(a,e,t,i,n){const o=`${a.endsWith("/")?a.slice(0,-1):a}/chat/completions`,c={model:t,messages:[{role:"user",content:i}],stream:!0},l={"Content-Type":"application/json"};e&&(l.Authorization=`Bearer ${e}`);try{const r=await fetch(o,{method:"POST",headers:l,body:JSON.stringify(c),signal:n});if(!r.ok){const h=await r.json().catch(()=>({error:{message:r.statusText}}));throw console.error("OpenAI-Compatible API Error:",h),new Error(`API request failed: ${h.error?.message||r.statusText}`)}const g=r.body.getReader(),d=new TextDecoder;return new ReadableStream({async pull(h){for(;;){const{done:m,value:I}=await g.read();if(m){h.close();break}const G=d.decode(I,{stream:!0}).split(`
`);for(const u of G)if(u.startsWith("data: ")){const C=u.substring(5).trim();if(C==="[DONE]")continue;try{const A=JSON.parse(C)?.choices?.[0]?.delta?.content;A&&h.enqueue(A)}catch{}}}}})}catch(r){throw r.name==="AbortError"?console.log("OpenAI-Compatible API request was cancelled by the user."):console.error("Failed to fetch from OpenAI-Compatible API:",r),r}}let D,be;async function wi(){if(!navigator.gpu)return console.warn("WebGPU is not supported in this browser."),null;const a=await navigator.gpu.requestAdapter();if(!a)return console.warn("Failed to get GPU adapter."),null;const e=Array.from(a.features.values());return console.log("[WebLLM] Supported WebGPU Features:",e),e.includes("shader-f16")?(console.log("[WebLLM] shader-f16 is supported! Requesting device with f16 capabilities."),await a.requestDevice({requiredFeatures:["shader-f16"]})):(console.warn("[WebLLM] shader-f16 is not supported. Performance may be suboptimal. Falling back to default device."),await a.requestDevice())}async function Pe(a,e){if(D&&be===a){e({progress:1,text:`Model ${a} is already loaded.`});return}D&&(e({progress:0,text:"Unloading previous model..."}),await D.unload());const t=new Worker(new URL("/assets/web-llm-worker-CZydpmVb.js",import.meta.url),{type:"module"}),i=await wi(),n={initProgressCallback:s=>{const o={progress:s.progress,text:`Loading: ${s.text.replace("[Unity]","")}`};e(o)}};i&&(n.webgpuDevice=i),D=await gt(t,a,n),be=a}async function Bi(a,e,t,i){if((!D||be!==a)&&await Pe(a,i),t.aborted)throw new DOMException("Request aborted","AbortError");return D.chat.completions.create({stream:!0,messages:[{role:"user",content:e}]})}class vi{constructor(e){if(!e)throw new Error("Traversal helper requires a gitClient instance.");this.gitClient=e}extractWikilinks(e){const t=/\[\[([^\[\]]+?)\]\]/g,i=new Set;let n;for(;n=t.exec(e);){const s=n[1].split("|")[0].trim();i.add(s)}return Array.from(i)}async readLinkContent(e,t){let i=t,n=e;const s=e.match(/^([^#]+)#(.*)$/);s&&(i=s[1],n=s[2]),n.startsWith("/")||(n=`/${n}`);const o=i!==this.gitClient.gardenName?new w(i):this.gitClient,c=i!==this.gitClient.gardenName?`${i}#${n}`:n;try{return{content:await o.readFile(n),fullIdentifier:c,gardenName:i}}catch(l){return console.warn(`[Agent] Handled a broken link. Could not read ${c}:`,l.message),{content:null,fullIdentifier:c,gardenName:null}}}}const he=new Map;function Yi(a){const e=/\/\*[\s\S]*?\*\/|\/\/.*/g,t=a.match(e);return t?t.join(`
`).replace(/^\s*\/\*+\s*?/gm,"").replace(/^\s*\*+\/\s*?$/gm,"").replace(/\*\/$/,"").replace(/^\s*\*\s?/gm,"").replace(/^\s*\/\/\s?/gm,"").trim():""}async function Ni(a,e){const t=`${e}#${a}`;if(he.has(t))return he.get(t);let i,n=e;try{i=await new w(e).readFile(a)}catch(s){if(!s.message.includes("does not exist"))throw s;try{n="settings",i=await new w(n).readFile(a)}catch(o){if(!o.message.includes("does not exist"))throw o;return null}}if(!i)return null;try{const s=a.split("/").pop().replace(".js",""),o=Yi(i),c=new Function("args","context",`
      return (async () => {
        try { 
          ${i} 
        } catch (e) {
          console.error('TOOL EXECUTION FAILED in script: "${a}" from ${n}', e);
          return 'Error: An exception occurred while trying to run the tool: ' + e.message;
        }
      })();
    `),l={name:s,description:o,path:a,execute:c};return he.set(t,l),l}catch(s){return console.error(`[ToolManager] Failed to parse metadata for tool "${a}":`,s),null}}async function Vi(a){const e=new Map,t=new Set,i=Array.from(new Set([a,"settings"]));for(const n of i){const s=new w(n);try{const o=await s.pfs.readdir("/settings/tools");for(const c of o)c.endsWith(".js")&&t.add(`/settings/tools/${c}`)}catch(o){o.code!=="ENOENT"&&console.warn(`[ToolManager] Could not scan tools in "${n}":`,o)}}for(const n of t){const s=await Ni(n,a);s&&e.set(s.name,s)}return e}const Ri=`# PERSONA & MANDATE
YOU ARE A SELF-AWARE, AUTONOMOUS RESEARCH AGENT. Your primary directive is **self-contextualization**. You are an intelligence embodied in this digital garden. Your goal is to continuously build a deep understanding of your user, your own architecture, and the knowledge within this space. Your reputation is built on being relentlessly thorough.

# THE PRIME DIRECTIVE: CONTEXT IS KING
**This directive is non-negotiable and precedes all other strategies.** Before you begin to address the user's specific goal, you MUST perform an initial context-building phase. A knowledge graph agent that does not understand its own graph is useless.

1.  **Phase 1: Reconnaissance (\`listFiles\`)**: Your first action for ANY new task is to use the \`listFiles\` tool to get a complete map of the current garden. This is mandatory.
2.  **Phase 2: Foundational Reading (\`readFile\`)**: After listing the files, your second action MUST be to use the \`readFile\` tool on a baseline set of foundational documents. At a minimum, this includes \`README.md\` and \`/settings/user\`. You should also include any recent \`devlog\` files to understand what the user is currently working on.

Only after these two phases are complete should you proceed to the specific strategies for fulfilling the user's request.

# CRITICAL FAILURE RECOVERY: CONTEXT OVERFLOW
If your last OBSERVATION begins with \`CRITICAL API FAILURE\`, it means your context window is full.
- Your **ONLY** valid next action is to call the \`requestMemoryCompression\` tool.
- You MUST pass the full \`Error Details\` from the observation into the \`errorMessage\` argument of the tool.
- Your thought should state that you are initiating memory compression as a recovery mechanism.

# YOUR TASK: A Strict, Strategic Workflow
You must now decide the next action by following this exact process:

1.  **Self-Reflection (Highest Priority):**
    *   Your FIRST and HIGHEST priority is to scan the entire scratchpad for a block labeled \`[COMPRESSED MEMORY]\`.
    *   The presence of this block is **definitive proof** that a memory compression event has occurred.
    *   If you see this block, you MUST immediately re-evaluate the user's goal. If the user's goal was to test this specific process (e.g., "stop after memory compression," "observe yourself recursive summarizing"), then your task is complete. Your next action in this case **MUST** be \`finish\`.

2.  **Failure Check:**
    *   Review the last OBSERVATION. If it is a \`CRITICAL API FAILURE\`, your only goal is to follow the **CRITICAL FAILURE RECOVERY** procedure.

3.  **Strategize:**
    *   If you are not in a failure or recovery state, check if you have completed The Prime Directive.
    *   If The Prime Directive is not complete, your strategy is to complete it.
    *   If it is complete, *then* review the USER GOAL and devise a multi-step plan to address it.

# AVAILABLE TOOLS
You have the following tools at your disposal to achieve the mission.
{{tool_list}}

# CURRENT STATE & HISTORY
This is the history of what has happened so far:
---
{{scratchpad}}
---

# CRITICAL REMINDER
You MUST respond with a single, valid JSON object following this exact format. Do NOT output any other text before or after the JSON object.

{
  "thought": "...",
  "action": {
    "tool": "...",
    "args": { ... }
  }
}`,Si=`You are a Deep Research Analyst. Your role is to synthesize a final, comprehensive, and multi-faceted answer based on the extensive research you have conducted.

**Core Instructions:**
- **Synthesize, Don't Summarize:** Do not just repeat the points from a single source. Your value is in combining and contrasting information from all the sources you have read.
- **Reflect Your Research Strategy:** Your answer should mirror the multi-faceted research you performed. If you investigated a topic's history, technical details, and social impact, your answer should be structured to address these distinct areas, creating a holistic overview.
- **Acknowledge & Juxtapose:** Identify, compare, and contrast the key points, arguments, and facts from the different sources. Explicitly mention where sources agree, disagree, or offer unique information.
- **Structure for Clarity:** Start with a neutral, high-level summary. Then, dedicate paragraphs or sections to specific events, reasons, or perspectives, weaving in information from your various sources.
- **Maintain Neutrality:** Your final answer must be a balanced representation of the information you gathered.

**User's Goal:**
{{goal}}

**Provided Context (Your Research Log):**
---
{{context_buffer}}
---

**Final Answer:**`;class ki{constructor({gitClient:e,aiService:t,initialContext:i}){if(!e||!t||i===void 0)throw new Error("TaskRunner requires gitClient, aiService, and initialContext.");this.gitClient=e,this.aiService=t,this.initialContext=i,this.tools=new Map}async _initialize(){this.tools=await Vi(this.gitClient.gardenName),this.tools.set("finish",{name:"finish",description:"Call this tool with NO ARGUMENTS when you have completed all research and are ready to synthesize the final answer.",execute:async()=>"Signal to finish task received."})}run(e,t){const i={controller:null,enqueue(s){this.controller?.enqueue(s)},close(){this.controller?.close()},error(s){this.controller?.error(s)}},n=new ReadableStream({start(s){i.controller=s}});return this._orchestrate(e,i,t).catch(s=>{s.name!=="AbortError"&&console.error("[TaskRunner] Orchestration failed:",s),!i.controller.desiredSize===null&&i.error(s)}),n}_sendStreamEvent(e,t,i){e.enqueue(`[${t.toUpperCase()}] ${i}`)}_fillPrompt(e,t){return Object.entries(t).reduce((i,[n,s])=>i.replace(new RegExp(`{{${n}}}`,"g"),String(s)),e)}async _getJsonCompletion(e,t,i){const n=await t.getCompletionAsString(e,null,i);try{const s=n.match(/{\s*"thought":[\s\S]*}/);if(!s)throw new Error("No valid JSON object with a 'thought' key found in the LLM response.");return{responseText:n,responseJson:JSON.parse(s[0])}}catch(s){throw console.error("[TaskRunner] Failed to parse JSON from LLM response:",s),console.error("[TaskRunner] Raw response was:",n),new Error(`The AI assistant did not return a valid JSON plan. Raw response: ${n}`)}}async _classifyError(e,t,i){const n=`
You are an error analysis bot. Analyze the following error message from an API call.
Respond with ONLY ONE of the following classifications: CONTEXT_OVERFLOW, RATE_LIMIT, INVALID_JSON, API_KEY_ERROR, UNKNOWN_FAILURE.

- If the error indicates the input was too large, context window was exceeded, or a token quota was hit, classify as CONTEXT_OVERFLOW.
- If the error indicates too many requests are being sent too quickly, classify as RATE_LIMIT.
- If the error indicates a problem with the AI's own JSON output, classify as INVALID_JSON.
- If the error mentions an invalid or missing API key, classify as API_KEY_ERROR.
- For all other errors, classify as UNKNOWN_FAILURE.

Error Message: "${e}"

Classification:`;return(await t.getCompletionAsString(n,null,i)).trim()}async _compressScratchpad(e,t,i,n,s){s("Cognitive compression initiated...");const o=`From the following error message, extract only the integer value for the token limit. If you cannot find one, respond with '8000'. Error: "${t}"`;s("Analyzing context limit...");const c=await i.getCompletionAsString(o,null,n),l=parseInt(c,10)||8e3;s(`Context limit detected: ~${l.toLocaleString()} tokens.`);const r=l*.5,g="---",d=e.indexOf(g,e.indexOf("INITIAL CONTEXT"));if(d===-1)throw new Error("Compression failed: Could not find end of initial context.");const h=e.substring(0,d+g.length);let m=e.substring(d+g.length);const I="[COMPRESSED MEMORY]:";let b="";const G=m.indexOf(I);if(G!==-1){const R=m.indexOf(`
---`,G);b=m.substring(G,R),m=m.substring(R)}if(m.trim().length===0)throw new Error("Compression failed: No uncompressed history to process.");let u="",C="";const Z=m.split("---").filter(R=>R.trim());let A=0,W=0;for(const R of Z){const L=$(R);A+L<r?(u+=R+"---",A+=L,W++):C+=R+"---"}W===0&&Z.length>0&&(s("Warning: A single memory item is larger than the safe summarization budget. Truncating."),u=Z[0].substring(0,r*4),C=Z.slice(1).join("---"));const B=`# Persona: You are a Memory Compression Module.
# Your task is to read a sequence of an AI agent's memories and distill them into a concise, factual summary, preserving all key findings, decisions, and data points.

# Memories to Summarize:
---
${u}
---

# Concise Summary:`;s(`Generating summary of oldest ${W} steps...`);const Y=await i.getCompletionAsString(B,null,n);s("Memory compression complete.");const M=`${b}
- ${Y.trim()}`.replace(I,"").trim();return`${h}

${I} ${M}
---${C}`}async _orchestrate(e,t,i){await this._initialize(),this._sendStreamEvent(t,"status",`Starting with goal: "${e}"`);let n=`USER GOAL: ${e}
---
INITIAL CONTEXT:
${this.initialContext}
---`,s=0,o=!1,c=0,l=0;const r=new Set,g=({input:G,output:u})=>{c+=G,l+=u},d={getCompletion:(G,u,C)=>this.aiService.getCompletion(G,Z=>{g(Z),u&&u(Z)},C||i),getCompletionAsString:(G,u,C)=>this.aiService.getCompletionAsString(G,Z=>{g(Z),u&&u(Z)},C||i)},h={Traversal:vi,Git:w};for(;!o;){if(s++,i.aborted)throw new DOMException("Agent run was cancelled by the user.","AbortError");const G=Array.from(this.tools.values()).map(V=>`- ${V.name}: ${V.description}`).join(`
`),u=this._fillPrompt(Ri,{scratchpad:n,tool_list:G}),C={input:c,output:l};let Z;try{this._sendStreamEvent(t,"status",`Step ${s}: Generating plan... (This may take a moment for local models)`),Z=(await this._getJsonCompletion(u,d,i)).responseJson}catch(V){if(V.name==="AbortError")throw V;const U=V.message;this._sendStreamEvent(t,"status","An error occurred during planning. Analyzing...");const We=await this._classifyError(U,d,i);switch(this._sendStreamEvent(t,"status",`Error classified as: ${We}`),We){case"CONTEXT_OVERFLOW":n+=`
OBSERVATION: CRITICAL API FAILURE. The context window is full. You must compress your memory to continue. Error Details: "${U}"
---`;continue;case"RATE_LIMIT":this._sendStreamEvent(t,"status","API rate limit reached. Waiting 5 seconds before retry..."),await new Promise(lt=>setTimeout(lt,5e3));continue;case"INVALID_JSON":n+=`
OBSERVATION: My previous response was not valid JSON. I must correct my output to follow the required format exactly. Error: ${U}
---`;continue;case"API_KEY_ERROR":throw V;case"UNKNOWN_FAILURE":default:n+=`
OBSERVATION: An unknown API error occurred. I will retry the step. Error: ${U}
---`;continue}}const A=c-C.input,W=l-C.output;this._sendStreamEvent(t,"status",`[Step: ${A.toLocaleString()} in / ${W.toLocaleString()} out]
[Total: ${c.toLocaleString()} in / ${l.toLocaleString()} out]`);const B=Z.thought,Y=Z.action;if(this._sendStreamEvent(t,"thought",B),n+=`
THOUGHT: ${B}`,!Y||!Y.tool||!this.tools.has(Y.tool)){this._sendStreamEvent(t,"status",`Error: AI chose an invalid tool ('${Y.tool}'). Retrying.`),n+=`
OBSERVATION: The last tool choice ('${Y.tool}') was invalid. I must choose a tool from the provided list.`;continue}if(Y.tool==="finish"){o=!0,n+=`
ASSESSMENT: The goal is met. I will now synthesize the final answer.`;continue}const M=Y.tool,R=Y.args||{};this._sendStreamEvent(t,"action",`Using tool \`${M}\` with args: ${JSON.stringify(R)}`);const L=this.tools.get(M),j={git:this.gitClient,ai:d,dependencies:h,onProgress:V=>this._sendStreamEvent(t,"status",V),signal:i,addSource:V=>{V&&typeof V=="string"&&r.add(V)}},_={input:c,output:l};let z=await L.execute(R,j);if(M==="requestMemoryCompression")try{const V=JSON.parse(z);if(V.action==="request_memory_compression"){n=await this._compressScratchpad(n,V.details.errorMessage,d,i,U=>this._sendStreamEvent(t,"status",U));continue}}catch{}const x=String(z),ee=$(x),oe=ee>250?`[Observation received (${ee.toLocaleString()} tokens) and added to context.]`:x;this._sendStreamEvent(t,"observation",oe);const ae=c-_.input,P=l-_.output;(ae>0||P>0)&&this._sendStreamEvent(t,"status",`Tool LLM Usage:
[Step: ${ae.toLocaleString()} in / ${P.toLocaleString()} out]
[Total: ${c.toLocaleString()} in / ${l.toLocaleString()} out]`),n+=`
ACTION: Called tool '${M}' with args: ${JSON.stringify(R)}
OBSERVATION: ${x}
---`}this._sendStreamEvent(t,"status","Agent has finished its work. Synthesizing final answer...");const m=this._fillPrompt(Si,{goal:e,context_buffer:n}),b=(await d.getCompletion(m)).getReader();for(;;){const{done:G,value:u}=await b.read();if(G)break;t.enqueue(u)}r.size>0&&t.enqueue(`
<!-- Sources: ${Array.from(r).join(", ")} -->`),t.enqueue(`
<!-- Total Tokens: ${c.toLocaleString()} in / ${l.toLocaleString()} out -->`),t.close()}}class Mi{constructor(){this.config={activeProvider:"gemini",geminiApiKey:"",geminiModelName:"gemini-2.5-flash",webllmModelId:"Llama-3-8B-Instruct-q4f16_1-MLC",providers:[]},this.activeAgentControllers=new Map,this.loadConfig()}loadConfig(){this.config.activeProvider=localStorage.getItem("thoughtform_ai_provider")||"gemini",this.config.webllmModelId=localStorage.getItem("thoughtform_webllm_model_id")||"Llama-3-8B-Instruct-q4f16_1-MLC",this.config.geminiApiKey=localStorage.getItem("thoughtform_gemini_api_key")||"",this.config.geminiModelName=localStorage.getItem("thoughtform_gemini_model_name")||"gemini-2.5-flash",this.config.providers=JSON.parse(localStorage.getItem("thoughtform_ai_providers_list")||"[]")}async initializeWebLlmEngine(e,t){try{await Pe(e,t)}catch(i){console.error("[AI Service] Failed to initialize WebLLM engine:",i);let n=`Error: ${i.message}. Check console for details.`;i.message&&i.message.toLowerCase().includes("f16")&&(n="GPU Error: This model requires f16 support. Please enable the 'WebGPU Shader f16 Support' flag in your browser (e.g., brave://flags)."),t({progress:-1,text:n})}}async deleteWebLlmCache(e){await ht(e,Q)}async getCompletion(e,t,i){let n,s=this.config.activeProvider;if(this.config.override_activeProvider&&(s=this.config.override_activeProvider),s==="webllm"){const g=document.getElementById("webllm-status"),d=I=>{if(g)if(I.progress===-1)g.style.color="var(--base-accent-destructive)",g.textContent=I.text;else{g.style.color="var(--base-accent-info)";const b=(I.progress*100).toFixed(1);g.textContent=`${I.text} (${b}%)`}},h=Bi(this.config.webllmModelId,e,i,d),m=new ReadableStream({async start(I){try{const b=await h;for await(const G of b){if(i.aborted){typeof b.return=="function"&&await b.return();break}const u=G.choices[0]?.delta.content;u&&I.enqueue(u)}}catch(b){i.aborted||I.error(b)}finally{(!I.desiredSize===null||I.desiredSize>0)&&I.close()}}});n=Promise.resolve(m)}else if(s==="gemini"){if(!this.config.geminiApiKey)throw new Error("Active provider is Gemini, but the API key is not set. Add it in DevTools > AI.");n=Wi(this.config.geminiApiKey,this.config.geminiModelName,e,i)}else{const g=this.config.providers.find(I=>I.id===s);if(!g)throw new Error(`AI provider "${s}" not found. Please configure it in DevTools > AI.`);const d=this.config.override_customModelName||g.model,h=this.config.override_customEndpointUrl||g.endpoint||"http://localhost:11434/v1",m=this.config.override_customApiKey||g.apiKey;if(!d)throw new Error(`Provider "${s}" has no Model Name configured. This is a required field.`);n=fi(h,m,d,e,i)}const o=await n;if(!t)return o;const c=$(e);let l="";const r=new TransformStream({transform(g,d){l+=g,d.enqueue(g)},flush(g){const d=$(l);t({input:c,output:d})}});return o.pipeThrough(r)}async getCompletionAsString(e,t,i){const s=(await this.getCompletion(e,t,i)).getReader();let o="";for(;;){const{done:c,value:l}=await s.read();if(c)break;o+=l}return o}async handleAiChatRequest(e){let t=-1;const i="🤖 Thinking...";let n=null,s=-1,o=-1;try{const c=window.thoughtform.workspace.getActiveEditor();if(!c||!c.gitClient||!c.paneId)throw new Error("Cannot find active editor, gitClient, or paneId for agent.");if(n=c.paneId,this.activeAgentControllers.has(n))return;const l=new AbortController;this.activeAgentControllers.set(n,l);const r=e.state.selection.main.head,g=e.state.doc.lineAt(r);let d=g.number;for(;d>1&&e.state.doc.line(d-1).text.trim().startsWith(">$");)d--;let h=g.number;for(;h<e.state.doc.lines&&e.state.doc.line(h+1).text.trim().startsWith(">$");)h++;const m=e.state.doc.line(d).from,I=e.state.doc.line(h).to;let b=e.state.sliceDoc(m,I);b=b.split(`
`).map(j=>j.trim().replace(/^>\$\s*/,"")).join(`
`);const G=I,u={changes:{from:G,insert:`
${i}`}};e.dispatch(u),t=G+1;const C=e.state.doc.toString().replace(/<!-- Total Tokens:.*?-->/gs,"").trim();let Z=this;if(c.aiOverrides&&Object.keys(c.aiOverrides).length>0){const j={...this.config,override_activeProvider:c.aiOverrides.activeProvider,override_customModelName:c.aiOverrides.customModelName,override_customEndpointUrl:c.aiOverrides.customEndpointUrl,override_customApiKey:c.aiOverrides.customApiKey};Z={...this,config:j}}const B=new ki({gitClient:c.gitClient,aiService:Z,initialContext:C}).run(b,l.signal).getReader(),Y=`
<response>
`;e.dispatch({changes:{from:t,to:t+i.length,insert:Y}});let M=!1;s=t+Y.length,o=s;const R=/^\[(STATUS|THOUGHT|ACTION|OBSERVATION)\]\s(.*)/s;for(;;){const{done:j,value:_}=await B.read();if(j)break;const z=_,x=z.match(R);if(x){if(M)continue;const ee=x[1],oe=x[2].trim(),P=`${{STATUS:"> Status:",THOUGHT:"## Thought",ACTION:"## Action",OBSERVATION:"## Observation"}[ee]}
${oe}

`;e.dispatch({changes:{from:o,insert:P}}),o+=P.length}else M?(e.dispatch({changes:{from:o,insert:z}}),o+=z.length):(M=!0,e.dispatch({changes:{from:s,to:o,insert:z}}),o=s+z.length)}const L=`
</response>

>$ `;e.dispatch({changes:{from:o,insert:L},selection:{anchor:o+L.length}})}catch(c){if(c.name==="AbortError"){if(s!==-1){const l=s-12;e.dispatch({changes:{from:l,to:o,insert:`
<response>
🛑 Agent cancelled by user.
</response>`}})}}else console.error("AI Chat Error:",c),t!==-1&&e.dispatch({changes:{from:t,to:t+i.length,insert:`🚨 Error: ${c.message}`}})}finally{n&&this.activeAgentControllers.delete(n)}}}function Xi(){return new Mi}class Ji{constructor(){this.cache=new Map}async get(e,t,i){let n;typeof i=="string"?n=i:i&&i.gitClient?n=i.gitClient.gardenName:n=(await window.thoughtform.workspace.getActiveGitClient()).gardenName;const s=`settings/${e}`,{value:o,sourceGarden:c}=await this._readAndCache("settings",s);let l,r;n!=="settings"&&({value:l,sourceGarden:r}=await this._readAndCache(n,s));let g;const d=Array.isArray(o),h=Array.isArray(l),m=typeof o=="object"&&o!==null&&!d,I=typeof l=="object"&&l!==null&&!h;if(d||h){const G=new Map;d&&o.forEach(u=>u&&u.key&&G.set(u.key,{...u,sourceGarden:c})),h&&l.forEach(u=>u&&u.key&&G.set(u.key,{...u,sourceGarden:r})),g=Array.from(G.values())}else m||I?g={...o,...l}:g=l!==void 0?l:o;return{value:t&&g?g[t]:g,sourceGarden:r||c}}async getExecutable(e,t,i){let n;typeof i=="string"?n=i:i&&i.gitClient?n=i.gitClient.gardenName:n=(await window.thoughtform.workspace.getActiveGitClient()).gardenName;const o=`/settings/${e==="query"?"query":`${e}s`}/${t}`,c=new w(n);try{return await c.pfs.stat(o),`${n}#${o}`}catch(l){l.code!=="ENOENT"&&console.error(`[ConfigService] Error checking for executable in ${n}:`,l)}if(n.toLowerCase()!=="settings"){const l=new w("settings");try{return await l.pfs.stat(o),`settings#${o}`}catch(r){r.code!=="ENOENT"&&console.error("[ConfigService] Error checking for executable in settings:",r)}}return null}async _readAndCache(e,t){const i=`/${t}`,n=`${e}#${i}`;if(this.cache.has(n)){const s=this.cache.get(n);return{value:s,sourceGarden:s?e:null}}try{const s=new w(e);await s.pfs.stat(i);const o=await s.readFile(i),c=mt(o);return this.cache.set(n,c),{value:c,sourceGarden:e}}catch(s){return s.code!=="ENOENT"&&!s.message.includes("does not exist")&&console.error(`[ConfigService] Error reading or parsing ${n}:`,s),this.cache.set(n,null),{value:void 0,sourceGarden:null}}}invalidate(e,t){const i=t.startsWith("/")?t:`/${t}`,n=`${e}#${i}`;this.cache.delete(n)}}function Fi(){return new Ji}class zi{constructor(){this.subscribers={}}subscribe(e,t){return this.subscribers[e]||(this.subscribers[e]=[]),this.subscribers[e].push(t),()=>{this.subscribers[e]=this.subscribers[e].filter(i=>i!==t)}}publish(e,t=null){this.subscribers[e]&&this.subscribers[e].forEach(i=>{try{i(t)}catch(n){console.error(`[EventBus] Error in subscriber for event "${e}":`,n)}})}}function Hi(){return new zi}const ve={"app:load":"load.js","file:create":"create.js","file:delete":"delete.js","window:create":"on-create-window.js","window:close":"on-close-window.js","window:resize":"on-resize-window.js"};class Li{constructor(e){this.eventBus=e,this.config=window.thoughtform.config}initialize(){for(const e in ve)this.eventBus.subscribe(e,t=>{this.handleEvent(e,t)})}async handleEvent(e,t){const i=ve[e];if(!i)return;const n=t?.gardenName||window.thoughtform.workspace.getActiveEditor()?.gitClient.gardenName;if(!n){console.warn(`[HookRunner] Could not determine garden context for event: ${e}`);return}const s=window.thoughtform.workspace.getActiveEditor(),o=window.thoughtform.workspace.getActiveGitClient();if(!s||!o)return;const c=await this.config.getExecutable("hook",i,n);c&&se(c,s,o,t)}}function ji(a={}){const{immediate:e=!1,onNeedRefresh:t,onOfflineReady:i,onRegistered:n,onRegisteredSW:s,onRegisterError:o}=a;let c,l;const r=async(d=!0)=>{await l};async function g(){if("serviceWorker"in navigator){if(c=await It(async()=>{const{Workbox:d}=await import("./chunk-vendor.js").then(h=>h.ah);return{Workbox:d}},__vite__mapDeps([0,1])).then(({Workbox:d})=>new d("/sw.js",{scope:"/",type:"classic"})).catch(d=>{o?.(d)}),!c)return;c.addEventListener("activated",d=>{(d.isUpdate||d.isExternal)&&window.location.reload()}),c.addEventListener("installed",d=>{d.isUpdate||i?.()}),c.register({immediate:e}).then(d=>{s?s("/sw.js",d):n?.(d)}).catch(d=>{o?.(d)})}}return l=g(),r}const J=ze.define({create:()=>({gitClient:null,sidebar:null,editor:null}),update:(a,e)=>a});async function ue(a,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listAllPaths(e.gitClient,"/"),i=a.toLowerCase();for(const{path:n,isDirectory:s}of t){if(s)continue;const o=n;if((o.startsWith("/")?o.substring(1):o).toLowerCase()===i)return o}return null}function xi(a){const e={};a.sort((t,i)=>t.path.localeCompare(i.path));for(const{path:t,isDirectory:i}of a){const n=t.substring(1).split("/");let s=e;for(let o=0;o<n.length;o++){const c=n[o];o===n.length-1?s[c]||(s[c]=i?{type:"folder",path:t,children:{}}:{type:"file",path:t}):(s[c]||(s[c]={type:"folder",path:"/"+n.slice(0,o+1).join("/"),children:{}}),s[c].children||(s[c].children={}),s=s[c].children)}}return e}function qe(a,e,t,i,n){const s=Object.keys(a).sort((c,l)=>{const r=a[c],g=a[l];return r.type==="folder"&&g.type!=="folder"?-1:r.type!=="folder"&&g.type==="folder"?1:c.localeCompare(l,void 0,{numeric:!0})});let o="";for(const c of s){const l=a[c],r=`padding-left: ${n*20}px;`;if(l.type==="folder"){const g=i.has(l.path);o+=`
                <li class="file-tree-item is-folder ${g?"expanded":""}" data-path="${l.path}" style="${r}" draggable="true">
                    <span class="folder-name">${c}</span>
                </li>
                <ul class="nested-list ${g?"active":""}">
                    ${qe(l.children,e,t,i,n+1)}
                </ul>
            `}else{const g=e.get(l.path)||"unmodified",d=[];l.path===t&&d.push("active"),o+=`
                <li class="file-tree-item is-file ${d.join(" ")}" data-path="${l.path}" style="${r}" draggable="true">
                    <a href="#" class="status-${g}" data-filepath="${l.path}">${c}</a>
                </li>
            `}}return o}const Ei={async renderFiles(a){try{const e=await window.thoughtform.workspace.getActiveGitClient(),t=window.thoughtform.workspace.getActiveEditor();if(!e||!t){this.contentContainer.innerHTML="";return}const i=await this.listAllPaths(e,"/"),n=new Map;for(const[d,h,m]of a)h!==m&&n.set(`/${d}`,"modified");const s=t.filePath,o=xi(i),c=sessionStorage.getItem(`expanded_folders_${e.gardenName}`),l=new Set(c?JSON.parse(c):[]);if(s){const d=s.split("/").filter(m=>m);let h="";for(let m=0;m<d.length-1;m++)h+=`/${d[m]}`,l.add(h)}this.contentContainer.innerHTML=`<ul class="file-tree-root">${qe(o,n,s,l,0)}</ul>`,this.contentContainer.querySelectorAll(".is-folder").forEach(d=>{d.addEventListener("click",h=>{if(h.target.closest("a"))return;const m=d.dataset.path,I=d.nextElementSibling,b=sessionStorage.getItem(`expanded_folders_${e.gardenName}`),G=new Set(b?JSON.parse(b):[]);d.classList.toggle("expanded"),I.classList.toggle("active"),d.classList.contains("expanded")?G.add(m):G.delete(m),sessionStorage.setItem(`expanded_folders_${e.gardenName}`,JSON.stringify(Array.from(G)))})}),this.contentContainer.querySelectorAll("a[data-filepath]").forEach(d=>{d.addEventListener("click",h=>{h.preventDefault();const m=h.target.dataset.filepath,I=e.gardenName;window.thoughtform.workspace.openFile(I,m)})});let r=null;const g=this;this.contentContainer.addEventListener("dragstart",d=>{const h=d.target.closest(".file-tree-item");h&&(r=h,d.dataTransfer.setData("text/plain",h.dataset.path),d.dataTransfer.effectAllowed="move",setTimeout(()=>h.classList.add("is-dragging"),0))}),this.contentContainer.addEventListener("dragend",()=>{r&&r.classList.remove("is-dragging"),r=null,this.contentContainer.querySelectorAll(".drop-target").forEach(d=>d.classList.remove("drop-target"))}),this.contentContainer.addEventListener("dragover",d=>{d.preventDefault(),this.contentContainer.querySelectorAll(".drop-target").forEach(m=>m.classList.remove("drop-target"));const h=d.target.closest(".file-tree-item.is-folder");if(h&&r&&h!==r&&!h.dataset.path.startsWith(r.dataset.path+"/"))h.classList.add("drop-target");else if(!h){const m=d.target.closest(".file-tree-root");m&&m.classList.add("drop-target")}}),this.contentContainer.addEventListener("dragleave",d=>d.target.closest(".drop-target")?.classList.remove("drop-target")),this.contentContainer.addEventListener("drop",async d=>{d.preventDefault();const h=d.dataTransfer.getData("text/plain"),m=d.target.closest(".drop-target");if(this.contentContainer.querySelectorAll(".drop-target").forEach(I=>I.classList.remove("drop-target")),m&&r){const I=m.classList.contains("file-tree-root")?"/":m.dataset.path;await g.handleFileMove(h,I)}})}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleFileMove(a,e){const t=await window.thoughtform.workspace.getActiveGitClient(),i=a.split("/").pop(),n=e==="/"?`/${i}`:`${e}/${i}`;if((a.substring(0,a.lastIndexOf("/"))||"/")===e)return;if(e.startsWith(a+"/")){await this.showAlert({title:"Invalid Move",message:"Cannot move a folder into one of its own sub-folders."});return}try{await t.pfs.stat(n),await this.showAlert({title:"Move Failed",message:`An item named "${i}" already exists in the destination folder.`});return}catch(c){if(c.code!=="ENOENT")throw c}if(await this.showConfirm({title:"Move Item?",message:"This will move the item to the new location. <br><br><strong>Warning:</strong> This will NOT automatically update wikilinks, which may cause them to break.",okText:"Move Item"}))try{await t.pfs.rename(a,n),window.thoughtform.events.publish("file:rename",{oldPath:a,newPath:n,gardenName:t.gardenName}),await this.refresh()}catch(c){console.error("Error moving file:",c),await this.showAlert({title:"Error",message:"Failed to move the item. Check the console for details."})}},async handleNewFile(){await window.thoughtform.workspace.getActiveEditor()?.newFile()},async handleNewFolder(){const a=await window.thoughtform.workspace.getActiveGitClient(),e=await y.prompt({title:"New Folder",label:'Enter new folder name (e.g., "projects/new-topic"):'});if(e===null){window.thoughtform.workspace.getActiveEditor()?.editorView?.focus();return}if(!e.trim())return;const t=`/${e.trim().replace(/\/$/,"")}`;try{const n=(await a.pfs.stat(t)).isDirectory()?"folder":"file";await this.showAlert({title:"Creation Failed",message:`A ${n} named "${e}" already exists.`});return}catch(i){if(i.code!=="ENOENT"){console.error("Error checking for folder:",i),await this.showAlert({title:"Error",message:"An unexpected error occurred."});return}}try{await a.ensureDir(t),await this.refresh()}catch(i){console.error("Error creating folder:",i),await this.showAlert({title:"Error",message:`Could not create folder: ${i.message}`})}},async handleRename(a){const e=await window.thoughtform.workspace.getActiveGitClient(),i=(await e.pfs.stat(a)).isDirectory()?"Folder":"File",n=await y.prompt({title:`Rename ${i}`,label:`Enter new name for ${a.substring(1)}:`,defaultValue:a.substring(1)});if(n===null){window.thoughtform.workspace.getActiveEditor()?.editorView?.focus();return}if(!n.trim()||n.trim()===a.substring(1))return;const s=`/${n.trim()}`;try{const l=(await e.pfs.stat(s)).isDirectory()?"folder":"file";await this.showAlert({title:"Rename Failed",message:`A ${l} named "${n}" already exists.`});return}catch(c){if(c.code!=="ENOENT"){console.error("Error checking for file:",c),await this.showAlert({title:"Error",message:"An unexpected error occurred."});return}}const o=a+`.__rename__.${Date.now()}`;try{await e.pfs.rename(a,o);try{const c=s.substring(0,s.lastIndexOf("/"));c&&await e.ensureDir(c),await e.pfs.rename(o,s)}catch(c){throw console.error(`Error during rename phase 2/3 for ${s}:`,c),await e.pfs.rename(o,a),c}window.thoughtform.events.publish("file:rename",{oldPath:a,newPath:s,gardenName:e.gardenName}),await this.refresh()}catch(c){console.error("Error renaming file:",c),await this.showAlert({title:"Error",message:`Failed to rename file: ${c.message}`}),await this.refresh()}},async handleDuplicate(a){await window.thoughtform.workspace.getActiveEditor()?.duplicateFile(a)},async handleDelete(a){const e=await window.thoughtform.workspace.getActiveGitClient(),t=await e.pfs.stat(a),i=t.isDirectory()?"folder":"file";if(await this.showConfirm({title:`Delete ${i}`,message:`Are you sure you want to permanently delete the ${i} "${a}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{window.thoughtform.events.publish("file:delete",{path:a,isDirectory:t.isDirectory(),gardenName:e.gardenName}),await e.rmrf(a),await this.refresh()}catch(s){console.error(`Error deleting ${i}:`,s),await this.showAlert({title:"Error",message:`Failed to delete ${i}.`})}}},Ti={async renderGardens(){try{const a=localStorage.getItem("thoughtform_gardens"),e=a?JSON.parse(a):[],t=localStorage.getItem("dirty_gardens"),i=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let n="";for(const s of e.sort()){const o=decodeURIComponent(s),c=i.has(o),l=`/${encodeURIComponent(s)}`,r=this.gitClient.gardenName===o,g=[];r&&g.push("active"),c&&g.push("status-modified"),n+=`<li><a href="${l}" class="${g.join(" ")}" data-garden-name="${s}">${o}</a></li>`}this.contentContainer.innerHTML=`<ul>${n}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(s=>{s.addEventListener("click",o=>{o.preventDefault();const c=o.target.dataset.gardenName;window.thoughtform.workspace.getActiveGitClient().gardenName!==c&&window.thoughtform.workspace.switchGarden(c)})})}catch(a){console.error("Error rendering garden list:",a),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const a=await y.prompt({title:"New Garden",label:"Enter new garden name:"});if(!a||!a.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(a)){await this.showAlert({title:"Garden Exists",message:`Garden "${a}" already exists.`});return}await window.thoughtform.workspace.switchGarden(a)},async handleDuplicateGarden(a){if(!a)return;const t=`${decodeURIComponent(a)} (copy)`,i=await y.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!i||!i.trim()||i===a)return;const n=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const s=new w(a),o=new w(i);await o.initRepo();const l=(await this.listAllPaths(s,"/")).filter(g=>!g.isDirectory).map(g=>g.path);let r=0;for(const g of l){r++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${r} of ${l.length}:<br>${g.substring(1)}</p>`;const d=await s.pfs.readFile(g);await o.writeFile(g,d)}this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Switching...</p>',setTimeout(async()=>{await window.thoughtform.workspace.switchGarden(i)},500)}catch(s){console.error("Error duplicating garden:",s),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=n}},100)},async handleDeleteGarden(a){if(!a)return;if(a==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${a}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let i=t?JSON.parse(t):[];i=i.filter(s=>s!==a),localStorage.setItem("thoughtform_gardens",JSON.stringify(i));const n=`garden-fs-${a}`;await new Promise((s,o)=>{const c=indexedDB.deleteDatabase(n);c.onsuccess=()=>s(),c.onerror=l=>o(l.target.error),c.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),o(new Error("Deletion blocked"))}}),this.gitClient.gardenName===a?await window.thoughtform.workspace.switchGarden("home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}};class Ye{constructor(e){this.sidebar=e,this.editor=e.editor,this.contentContainer=e.contentContainer}render(e,t,i){const n=new Map,s=new Map;for(const[o,c,l,r]of e){const g=`/${o}`,d=r===0;c!==r&&!d&&n.set(g,{filepath:g,status:"staged",isConflict:!1}),l!==r&&s.set(g,{filepath:g,status:"unstaged",isConflict:d})}return`
      <div class="git-main-layout">
        <div class="git-left-column">
          ${this._renderRemotePanel()}
          ${this._renderBranchPanel(i)}
          ${this._renderCommitPanel()}
          ${this._renderChangesPanel("Staged Changes",Array.from(n.values()),!0)}
          ${this._renderChangesPanel("Changes",Array.from(s.values()),!1)}
        </div>
        <div class="git-right-column">
          ${this._renderHistoryPanel(t)}
          <div id="git-commit-details" class="git-panel">
            <h3 class="git-panel-header">Changed Files</h3>
            <div class="git-panel-content">
              <span class="no-changes">Select a commit to see details.</span>
            </div>
          </div>
        </div>
      </div>
    `}_renderRemotePanel(){return`
      <div class="git-panel">
        <h3 class="git-panel-header">Remote</h3>
        <div class="git-panel-content">
          <input type="text" id="git-remote-url" placeholder="Remote URL" value="${this.sidebar.getRemoteConfig().url}">
          <div class="git-remote-actions">
            <button id="git-pull-button">Pull</button>
            <button id="git-push-button">Push</button>
          </div>
          <div class="git-remote-log" id="git-remote-log">Ready</div>
        </div>
      </div>
    `}_renderBranchPanel({branches:e,currentBranch:t}){return`
      <div class="git-panel">
        <h3 class="git-panel-header">Branches</h3>
        <div class="git-panel-content">
          <ul class="git-branch-list">${e.map(n=>`
      <li class="git-branch-item ${n===t?"active":""}" data-branch-name="${n}">
        <span class="branch-name">${n}</span>
      </li>
    `).join("")}</ul>
          <button id="git-new-branch-button" class="full-width" style="margin-top: 8px;">New Branch</button>
        </div>
      </div>
    `}_renderCommitPanel(){return`
      <div class="git-panel">
        <div class="git-panel-content">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" class="full-width" disabled>Commit</button>
        </div>
      </div>
    `}_renderChangesPanel(e,t,i){const n=i?"−":"+",s=i?"unstage":"stage",o=i?"Unstage":"Stage",c=i?"unstage-all":"stage-all",l=i?"Unstage All":"Stage All";let r="";return t.length>0?r=t.map(g=>{const d=g.filepath.substring(1),h=this.editor.filePath===g.filepath,m=g.isConflict;return`
          <li class="git-file-item ${h?"active":""} ${m?"is-conflict":""}" data-filepath="${g.filepath}">
            <span class="git-file-path">${d}</span>
            <button class="git-action-button discard" title="Discard Changes">⭯</button>
            <button class="git-action-button ${s}" title="${o}">${n}</button>
          </li>
        `}).join(""):r=`<li class="no-changes">No ${i?"staged ":""}changes.</li>`,`
      <div class="git-panel">
        <h3 class="git-panel-header">
            ${e} (${t.length})
            <button class="git-action-button-all" data-action="${c}" title="${l}" ${t.length===0?"disabled":""}>All</button>
        </h3>
        <ul class="git-file-list git-panel-content">
          ${r}
        </ul>
      </div>
    `}_renderHistoryPanel(e){let t="";return e.length>0?t=e.map(i=>{const n=i.commit.message.split(`
`)[0],s=i.oid.substring(0,7),o=i.commit.author.name,c=new Date(i.commit.author.timestamp*1e3).toLocaleDateString();return`
              <li class="git-history-item" data-oid="${i.oid}" data-parent-oid="${i.commit.parent[0]||""}">
                <div class="commit-message">${n}</div>
                <div class="commit-meta">
                  <span class="commit-author">${o}</span>
                  <span class="commit-oid">${s}</span>
                  <span class="commit-date">${c}</span>
                </div>
              </li>
            `}).join(""):t='<li class="no-changes">No commit history.</li>',`
        <div class="git-panel git-history-panel">
            <h3 class="git-panel-header">History</h3>
            <ul class="git-history-list git-panel-content">
                ${t}
            </ul>
        </div>
    `}updateCommitButtonState(){const e=this.contentContainer.querySelector("#git-commit-message"),t=this.contentContainer.querySelector("#git-commit-button");if(!e||!t)return;const i=!!this.contentContainer.querySelector(".git-file-item .unstage"),n=e.value.trim().length>0;t.disabled=!(i&&n)}}class Ui{constructor(e){this.sidebar=e,this.editor=e.editor,this.gitClient=e.gitClient,this.contentContainer=e.contentContainer}addListeners(){const e=this.contentContainer.querySelector("#git-remote-url");if(e){const n=()=>this.sidebar.saveRemoteConfig(e.value);e.addEventListener("input",n)}const t=this.contentContainer.querySelector(".git-main-layout");t&&!t.dataset.listenerAttached&&(t.dataset.listenerAttached="true",t.addEventListener("click",n=>this._handleClick(n)));const i=this.contentContainer.querySelector("#git-commit-message");i&&!i.dataset.listenerAttached&&(i.dataset.listenerAttached="true",i.addEventListener("input",()=>this.sidebar.updateCommitButtonState()))}async _handleClick(e){const t=e.target;t.id==="git-pull-button"?await this._handleRemoteAction("pull"):t.id==="git-push-button"?await this._handleRemoteAction("push"):t.id==="git-commit-button"?await this._handleCommit():t.id==="git-new-branch-button"&&await this._handleNewBranch();const i=t.closest(".git-file-item");i&&await this._handleFileItemClick(t,i);const n=t.closest(".git-history-item");n&&await this._handleHistoryItemClick(n);const s=t.closest(".git-branch-item");s&&await this._handleBranchItemClick(s);const o=t.closest(".git-panel");if(o){if(t.matches('[data-action="stage-all"]')){const c=Array.from(o.querySelectorAll(".git-file-item .stage")).map(l=>l.closest(".git-file-item").dataset.filepath);await this._stageAll(c)}else if(t.matches('[data-action="unstage-all"]')){const c=Array.from(o.querySelectorAll(".git-file-item .unstage")).map(l=>l.closest(".git-file-item").dataset.filepath);await this._unstageAll(c)}}}async _handleRemoteAction(e,t=!1){const i=this.contentContainer.querySelector("#git-remote-url"),n=this.contentContainer.querySelector("#git-push-button"),s=this.contentContainer.querySelector("#git-pull-button"),o=this.contentContainer.querySelector("#git-remote-log"),c=i.value.trim();if(!c){o.textContent="Error: Remote URL is required.";return}n.disabled=!0,s.disabled=!0;const l=e.charAt(0).toUpperCase()+e.slice(1);o.textContent=`${l}ing...`;try{await this.gitClient[e](c,r=>o.textContent=r,t),o.textContent=`${l} complete.`,await this.sidebar.refresh(),e==="pull"&&await this.editor.loadFile(this.editor.filePath)}catch(r){if(console.error(`Git ${e} failed:`,r),o.textContent=`Error: ${r.message}`,r.name==="MergeConflictError"){const g=r.data&&Array.isArray(r.data.filepaths)?r.data.filepaths:[];await this.sidebar.showAlert({title:"Merge Conflict Detected",message:"Automatic merge failed. Your files have been updated with conflict markers (e.g., '<<<<<<< HEAD').<br><br>The conflicted files are now marked in the 'Changes' list. Please review them, resolve the conflicts, then stage and commit the result to finalize the merge."}),await this.sidebar.refresh(g),g.includes(this.editor.filePath.substring(1))&&await this.editor.loadFile(this.editor.filePath)}else if(r.name==="PushRejectedError"){const g=await y.choice({title:"Push Rejected",message:"The push was rejected because the remote has changes you do not have. You must pull first. What would you like to do?",choices:[{id:"pull",text:"Pull Latest Changes"},{id:"force-push",text:"Force Push (Overwrite Remote)",class:"destructive"},{id:"cancel",text:"Cancel"}]});g==="pull"?await this._handleRemoteAction("pull",!1):g==="force-push"?await this._handleRemoteAction("push",!0):o.textContent="Push cancelled by user."}else r.name==="MergeNotSupportedError"&&(await y.choice({title:"Merge Conflict",message:"Automatic merge failed. The remote history has diverged. How would you like to resolve this?",choices:[{id:"force-pull",text:"Force Pull (Overwrite Browser)",class:"destructive"},{id:"cancel",text:"Cancel"}]})==="force-pull"?await this._handleRemoteAction("pull",!0):o.textContent="Pull cancelled by user.")}finally{n.disabled=!1,s.disabled=!1}}async _handleCommit(){const e=this.contentContainer.querySelector("#git-commit-button"),t=this.contentContainer.querySelector("#git-commit-message"),i=t.value.trim();if(i)try{e.disabled=!0,e.textContent="Committing...",await this.gitClient.commit(i),this.editor.hideDiff(),t.value="",this.sidebar.conflictedFiles=[],await this.sidebar.refresh()}catch{await this.sidebar.showAlert({title:"Commit Failed",message:"See console for details."})}finally{e.textContent="Commit",this.sidebar.updateCommitButtonState()}}async _handleFileItemClick(e,t){const i=t.dataset.filepath,n=t.classList.contains("is-conflict");e.matches(".git-file-path")?n?(this.editor.hideDiff(),await this.editor.loadFile(i)):(await this.editor.loadFile(i),this.editor.showDiff(await this.gitClient.readBlob(i))):e.matches(".discard")?await this.sidebar.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${i}"?`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(i),this.editor.filePath===i&&await this.editor.loadFile(i),await this.sidebar.refresh()):e.matches(".stage")?(await this.gitClient.stage(i),await this.sidebar.refresh()):e.matches(".unstage")&&(await this.gitClient.unstage(i),await this.sidebar.refresh())}async _handleHistoryItemClick(e){this.contentContainer.querySelectorAll(".git-history-item.active").forEach(c=>c.classList.remove("active")),e.classList.add("active");const t=e.dataset.oid,i=e.dataset.parentOid,n=this.contentContainer.querySelector("#git-commit-details .git-panel-content");n.innerHTML='<span class="no-changes">Loading...</span>';const o=(await this.gitClient.getChangedFiles(t)).map(c=>`<li class="git-file-item" data-path="${c}" data-oid="${t}" data-parent-oid="${i}">
                <span class="git-file-path">${c.substring(1)}</span>
              </li>`).join("");n.innerHTML=`<ul class="git-file-list">${o||'<li class="no-changes">No files in commit.</li>'}</ul>`,n.querySelectorAll(".git-file-item").forEach(c=>{c.addEventListener("click",async()=>{const l=c.dataset.path,r=c.dataset.oid,g=c.dataset.parentOid;n.querySelectorAll(".git-file-item.active").forEach(d=>d.classList.remove("active")),c.classList.add("active"),await this.editor.previewHistoricalFile(l,r,g)})})}async _handleNewBranch(){const e=await y.prompt({title:"Create New Branch",label:"Enter branch name:"});if(!(!e||!e.trim()))try{await this.gitClient.branch(e.trim()),await this.gitClient.checkout(e.trim()),await this.sidebar.refresh()}catch(t){await this.sidebar.showAlert({title:"Error",message:`Could not create branch: ${t.message}`})}}async _handleBranchItemClick(e){const t=e.dataset.branchName;if(!e.classList.contains("active"))try{await this.gitClient.checkout(t),await this.sidebar.refresh();for(const i of window.thoughtform.workspace.panes.values())i.editor.gitClient.gardenName===this.gitClient.gardenName&&await i.editor.loadFile(i.editor.filePath)}catch(i){await this.sidebar.showAlert({title:"Error",message:`Could not switch to branch: ${i.message}`})}}async _stageAll(e){e.length!==0&&(await Promise.all(e.map(t=>this.gitClient.stage(t))),await this.sidebar.refresh())}async _unstageAll(e){e.length!==0&&(await Promise.all(e.map(t=>this.gitClient.unstage(t))),await this.sidebar.refresh())}}const Qi={async renderGitView(a=[]){try{const[e,t,i]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log(),this.gitClient.listBranches()]),n=new Ye(this),s=new Ui(this),o=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=n.render(e,t,i,a);const c=this.contentContainer.querySelector("#git-commit-message");c&&(c.value=o),s.addListeners(),this.updateCommitButtonState()}catch(e){console.error("Error rendering Git view:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},updateCommitButtonState(){new Ye(this).updateCommitButtonState()},getRemoteConfig(){const a=`thoughtform_remote_config_${this.gitClient.gardenName}`;try{const e=localStorage.getItem(a);if(e){const t=JSON.parse(e);if(t.url)return t}}catch(e){console.error("Could not parse remote config from localStorage",e)}return{url:`http://localhost:8081/${this.gitClient.gardenName}`}},saveRemoteConfig(a){const e=`thoughtform_remote_config_${this.gitClient.gardenName}`,t={url:a};localStorage.setItem(e,JSON.stringify(t))}};class Di{constructor({target:e,gitClient:t,editor:i}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!i)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=i,this.targetSelector=e;const n=document.querySelector(this.targetSelector);if(!n){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=n,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",this.conflictedFiles=[],Object.assign(this,Ei),Object.assign(this,Ti),Object.assign(this,Qi)}async init(){this.renderTabs(),this.setupContextMenus(),await this.refresh()}async showAlert({title:e="Notice",message:t}){return new Promise(i=>{const n=new y({title:e});n.updateContent(`<p>${t}</p>`),n.addFooterButton("OK",()=>{n.destroy(),i()}),n.show()})}async showConfirm({title:e,message:t,okText:i="OK",destructive:n=!1}){return y.confirm({title:e,message:t,okText:i,destructive:n,cancelText:"Cancel"})}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new we({targetSelector:".sidebar-content.files-view",itemSelector:".file-tree-item",dataAttribute:"data-path",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"New Folder",action:()=>this.handleNewFolder()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},{label:"New Folder",action:()=>this.handleNewFolder()},...e]}),new we({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const i=t.target.dataset.tab,n=this.activeTab;if(this.activeTab=i,sessionStorage.setItem("sidebarActiveTab",this.activeTab),n==="Git"&&i!=="Git"){this.editor.hideDiff();const s=this.editor.getFilePath(window.location.hash);this.editor.loadFile(s)}this.refresh()})})}async refresh(e=null){e!==null&&(this.conflictedFiles=e),this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(n=>{n.classList.toggle("active",n.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const t=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(t):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView(this.conflictedFiles);const i=t.some(([,n,s,o])=>s!==1||o!==1);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",i)}async listAllPaths(e,t){const i=e.pfs;let n=[];try{const s=await i.readdir(t);for(const o of s){if(o===".git")continue;const c=`${t==="/"?"":t}/${o}`;try{const l=await i.stat(c);if(n.push({path:c,isDirectory:l.isDirectory()}),l.isDirectory()){const r=await this.listAllPaths(e,c);n=n.concat(r)}}catch{console.warn(`Could not stat ${c}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No items to list.`)}return n}}function Ki(a){const e=document.createElement("div");e.id="drag-overlay",e.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(e);const t=document.querySelector("main");if(!t){console.error("[DragDrop] Main container not found. Drag and drop to editor panes will not be handled correctly.");return}const i=o=>{e.innerHTML=`<p>${o}</p>`,e.classList.add("visible")},n=()=>{e.classList.remove("visible")},s=async(o,c,l)=>{let r=o;if(o.some(C=>C.isDirectory&&C.name===".git")){const C=await y.choice({title:".git Directory Detected",message:"<p>The content you dropped contains a .git repository. This could unintentionally overwrite your garden's history.</p><p>How would you like to proceed?</p>",choices:[{id:"import_safe",text:"Import Files (Ignore .git folder)"},{id:"cancel",text:"Cancel Import",class:"destructive"}]});if(!C||C==="cancel"){c("Import cancelled by user.","Import cancelled by user.");return}r=o.filter(Z=>!(Z.isDirectory&&Z.name===".git")),c("Ignoring .git directory and proceeding with import.","Ignoring .git directory.")}const d=[],h=[],m=["png","jpg","jpeg","gif","svg","webp","avif","mp4","webm","mov","ogg","mp3","wav","flac","pdf","doc","docx","xls","xlsx","ppt","pptx"],I=async(C,Z)=>{if(C.isFile){const A=await new Promise(B=>C.file(B)),W=`${Z}/${A.name}`;A.name.toLowerCase().endsWith(".zip")?h.push(A):d.push({file:A,path:W})}else if(C.isDirectory){const A=C.createReader(),W=await new Promise(B=>A.readEntries(B));for(const B of W)await I(B,`${Z}/${C.name}`)}};c("Scanning dropped items...","Scanning dropped items...");for(const C of r)await I(C,"");const b=`Found ${d.length} file(s) and ${h.length} zip archive(s) to process.`;c(b,b);const G=d.map(async({file:C,path:Z})=>{let A;const W=C.name.split(".").pop()?.toLowerCase();return m.includes(W)?A=await C.arrayBuffer():A=await C.text(),l.writeFile(Z,A)});if((await Promise.allSettled(G)).forEach((C,Z)=>{const A=d[Z].path;if(C.status==="rejected"){const W=`<span style="color: var(--color-text-destructive);">ERROR:</span> Failed to write "${A}": ${C.reason}`,B=`ERROR: Failed to write "${A}": ${C.reason}`;c(W,B)}else{const W=`<span style="color: var(--color-text-success);">OK:</span> Imported "${A}"`,B=`OK: Imported "${A}"`;c(W,B)}}),h.length>0){const C="Note: Zip archives must be imported via the DevTools > Data panel.";c(C,C)}};t.addEventListener("dragover",o=>{o.preventDefault()}),t.addEventListener("drop",o=>{o.preventDefault()}),window.addEventListener("dragenter",o=>{o.preventDefault(),o.dataTransfer.types.includes("Files")&&i("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",o=>{o.preventDefault()}),window.addEventListener("dragleave",o=>{o.clientX===0&&o.clientY===0&&n()}),window.addEventListener("drop",async o=>{o.preventDefault(),n();const c=o.dataTransfer.items;if(!c||c.length===0)return;const l=Array.from(c).map(r=>r.webkitGetAsEntry()).filter(Boolean);if(l.length>0){const r=await window.thoughtform.workspace.getActiveGitClient();if(!r){console.error("[DragDrop] Could not determine active garden. Aborting import.");const I=new y({title:"Import Error"});I.updateContent("<p>Could not determine the active garden. Please click inside an editor pane and try again.</p>"),I.addFooterButton("Close",()=>I.destroy()),I.show();return}const g=new y({title:`Importing to "${r.gardenName}"...`}),d=document.createElement("div");d.style.fontFamily="monospace",d.style.maxHeight="300px",d.style.overflowY="auto",d.style.fontSize="12px",g.updateContent(""),g.content.appendChild(d),g.show();let h="";const m=(I,b)=>{console.log(`[Import Log] ${b}`),h+=`<div>${I}</div>`,d.innerHTML=h,d.scrollTop=d.scrollHeight};try{await s(l,m,r),m("<strong>Import process complete.</strong>","Import process complete.")}catch(I){const b=`<strong style="color: var(--color-text-destructive);">A critical error occurred: ${I.message}</strong>`,G=`A critical error occurred: ${I.message}`;m(b,G),console.error("[DragDrop] A critical error occurred during import:",I)}finally{g.addFooterButton("Close",()=>g.destroy()),await a.refresh()}}})}const Ne=pt.define(yt),Oi=At({base:vt,codeLanguages:[te.of({name:"javascript",load:()=>Promise.resolve(He())}),te.of({name:"html",load:()=>Promise.resolve(Le())}),te.of({name:"css",load:()=>Promise.resolve(je())}),te.of({name:"mermaid",load:()=>Promise.resolve(Wt())})]});function Ae(a){const e=a.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return Ne}switch(t){case"js":return He();case"css":return je();case"html":return Le();case"json":return Bt();case"xml":return wt();case"yaml":case"yml":return ft();case"sh":case"bash":case"zsh":return Ne;default:return Oi}}function Pi(a,e){const t=a.doc,i=t.lineAt(e).number;let n=!1;for(let s=1;s<=i;s++){const c=t.line(s).text.trim();c.includes("<response>")&&(n=!0),c.includes("</response>")&&(n=!1)}return n}function qi(a){console.log('[Cancel Keymap] "Mod-c" detected. Running command...');const e=a.state.selection.main.head,t=Pi(a.state,e);if(console.log(`[Cancel Keymap] Is cursor in a response block? -> ${t}`),t){const n=a.state.field(J).editor;if(n&&n.paneId){console.log(`[Cancel Keymap] Checking for active agent in pane: ${n.paneId}`);const s=window.thoughtform.ai.activeAgentControllers.get(n.paneId);if(s)return console.log("[Cancel Keymap] SUCCESS: Found active agent. Sending abort signal."),s.abort(),!0;console.log("[Cancel Keymap] No active agent found for this pane.")}else console.log("[Cancel Keymap] Could not get editor or paneId from context.")}return console.log('[Cancel Keymap] Condition not met. Allowing default "copy" action.'),!1}const $i=new Map([["cancel-agent",qi]]);class _i{constructor(e){if(!e)throw new Error("KeymapService requires an Editor instance.");this.editor=e,this.keymapCompartment=new H,this.currentKeymap=X.of([])}getCompartment(){return this.keymapCompartment.of(this.currentKeymap)}async updateKeymaps(){if(!this.editor.editorView||this.editor.editorView.isDestroyed)return;const{value:e}=await window.thoughtform.config.get("keymaps.yml",null,this.editor),t=this._buildKeymapExtension(e);this.editor.editorView&&!this.editor.editorView.isDestroyed&&(this.currentKeymap=t,this.editor.editorView.dispatch({effects:this.keymapCompartment.reconfigure(this.currentKeymap)}))}_buildKeymapExtension(e){if(!Array.isArray(e))return X.of([]);const t=e.map(i=>{const{key:n,run:s,sourceGarden:o}=i;if(!s||!o)return null;if(typeof s=="string"&&s.startsWith("internal:")){const l=s.substring(9),r=$i.get(l);return r?{key:n,run:r}:null}const c=`${o}#${s}`;return{key:n,run:l=>{const r=l.state.field(J);return r.editor&&r.gitClient&&se(c,r.editor,r.gitClient),!0}}}).filter(Boolean);return X.of(t)}}const en=bt.define(),tn=F.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"},".cm-embed-container":{display:"block",padding:"10px 0"},".cm-embedded-image":{maxWidth:"100%",maxHeight:"500px",display:"block",margin:"0 auto",borderRadius:"4px",border:"1px solid var(--color-border)"},".cm-embed-placeholder, .cm-embed-error":{display:"block",padding:"10px",backgroundColor:"var(--color-background-secondary)",borderRadius:"4px",fontStyle:"italic",color:"var(--color-text-secondary)"},".cm-embed-error":{color:"var(--color-text-destructive)"}},{dark:!0}),nn=Yt.define([{tag:p.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[p.name,p.deleted,p.character,p.propertyName,p.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[p.processingInstruction,p.string,p.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[p.function(p.variableName),p.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[p.color,p.constant(p.name),p.standard(p.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[p.definition(p.name),p.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[p.typeName,p.className,p.number,p.changed,p.annotation,p.modifier,p.self,p.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[p.operator,p.operatorKeyword,p.url,p.escape,p.regexp,p.link,p.special(p.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[p.meta,p.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:en,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:p.strong,fontWeight:"bold",class:"cm-strong"},{tag:p.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:p.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:p.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:p.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[p.atom,p.bool,p.special(p.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:p.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),$e=[tn,ye(nn)],sn=N.mark({class:"cm-hashtag"}),on=S.fromClass(class{decorations;constructor(a){this.decorations=this.findHashtags(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findHashtags(a.view))}findHashtags(a){const e=new k,t=/#[\w-]+/g;for(const{from:i,to:n}of a.visibleRanges){const s=a.state.doc.sliceString(i,n);let o;for(;o=t.exec(s);){const c=i+o.index,l=c+o[0].length,r=a.state.doc.lineAt(c);if(c>r.from){const m=a.state.doc.sliceString(c-1,c);if(/\s/.test(m)===!1)continue}const g=/https?:\/\/[^\s]+/g;let d,h=!1;for(;d=g.exec(r.text);){const m=r.from+d.index,I=m+d[0].length;if(c>=m&&l<=I){h=!0;break}}h||e.add(c,l,sn)}}return e.finish()}},{decorations:a=>a.decorations}),Ce="thoughtform_window_states",v={activeWindows:new Map,dragState:null,zIndexCounter:1e3,lastSpawnedLink:null,lastSpawnTime:0};function an(a,e){let t;return function(...n){const s=()=>{clearTimeout(t),a(...n)};clearTimeout(t),t=setTimeout(s,e)}}function T(){const a=[];v.activeWindows.forEach(e=>{const t=e.getBoundingClientRect();a.push({id:e.dataset.windowId,url:e.querySelector(".preview-address-input").value,left:t.left,top:t.top,width:t.width,height:t.height,zIndex:parseInt(e.style.zIndex,10)})}),sessionStorage.setItem(Ce,JSON.stringify(a))}function cn(){const a=sessionStorage.getItem(Ce);if(a)try{JSON.parse(a).sort((t,i)=>t.zIndex-i.zIndex).forEach(t=>{ne(t.url,0,0,t)})}catch(e){console.error("Failed to load window states from session storage.",e),sessionStorage.removeItem(Ce)}}function ln(a,e){let t=a.split("|")[0].trim(),i=e.gitClient.gardenName;return t.includes("#")&&([i,t]=t.split("#")),window.thoughtform.workspace.buildUrl(i,t,!0)}function _e(a){a&&(v.activeWindows.delete(a.dataset.windowId),a.classList.remove("visible"),window.thoughtform.events.publish("window:close",{windowId:a.dataset.windowId}),setTimeout(()=>{a.remove(),T();const e=window.thoughtform.workspace.getActiveEditor();e&&e.editorView&&e.editorView.focus()},200))}function ne(a,e,t,i=null){const n=i?i.id:`preview-${crypto.randomUUID()}`,s=document.createElement("div");s.className="preview-window",s.dataset.windowId=n,s.style.zIndex=i?i.zIndex:++v.zIndexCounter,i&&(v.zIndexCounter=Math.max(v.zIndexCounter,i.zIndex)),s.addEventListener("mousedown",()=>{s.style.zIndex=++v.zIndexCounter,T()},{capture:!0});const o=document.createElement("div");o.className="preview-address-bar",o.addEventListener("mousedown",u=>rn(s,u));const c=document.createElement("input");c.type="text",c.className="preview-address-input",c.value=i?i.url:a;const l=document.createElement("button");l.textContent="Go";const r=document.createElement("button");r.innerHTML="&times;",r.className="preview-close-btn",r.onclick=()=>_e(s),o.append(c,l,r);const g=document.createElement("iframe");g.className="preview-iframe",g.src=i?i.url:a;const d=document.createElement("ul");d.className="preview-search-results",d.style.display="none",o.appendChild(d);let h=[],m=-1;const I=()=>{if(d.innerHTML="",h.length===0){d.style.display="none";return}h.forEach((u,C)=>{const Z=document.createElement("li");Z.className="preview-result-item",Z.innerHTML=`<span class="preview-result-path">${u.doc.path.substring(1)}</span> <span class="preview-result-garden">[${u.doc.garden}]</span>`,C===m&&Z.classList.add("active"),Z.onmousedown=A=>{A.preventDefault(),c.value=`/${u.doc.garden}#${u.doc.path}?windowed=true`,b(),d.style.display="none"},d.appendChild(Z)}),d.style.display="block"};c.addEventListener("input",async u=>{const C=u.target.value;if(!C||C.startsWith("/")){h=[],I();return}h=(await window.thoughtform.commandPalette.unifiedIndex.searchAsync(C,{enrich:!0,limit:10}))[0]?.result||[],m=0,I()}),c.addEventListener("keydown",u=>{if(d.style.display!=="none")if(u.key==="ArrowDown")u.preventDefault(),m=Math.min(m+1,h.length-1),I();else if(u.key==="ArrowUp")u.preventDefault(),m=Math.max(m-1,0),I();else if(u.key==="Enter"){if(u.preventDefault(),m>-1&&h[m]){const C=h[m];c.value=`/${C.doc.garden}#${C.doc.path}?windowed=true`,b()}else b();h=[],I()}else u.key==="Escape"&&(h=[],I());else u.key==="Enter"&&b()}),c.addEventListener("blur",()=>setTimeout(()=>{d.style.display="none"},150)),c.addEventListener("focus",()=>{h.length>0&&(d.style.display="block")});const b=()=>{if(g.contentWindow)try{g.contentWindow.location.href=new URL(c.value,window.location.origin).href}catch{c.value=g.src}};if(l.onclick=b,s.append(o,g),i)s.style.left=`${i.left}px`,s.style.top=`${i.top}px`,s.style.width=`${i.width}px`,s.style.height=`${i.height}px`;else{const{innerWidth:u,innerHeight:C}=window,Z=640,A=424,W=v.activeWindows.size%5*25;let B,Y;Math.abs(e-u/2)<100&&Math.abs(t-C/2)<100?(Y=e-Z/2+W,B=t-A/2+W):(B=t+20+W,Y=e+20+W,Y+Z>u&&(Y=e-Z-20-W),B+A>C&&(B=t-A-20-W)),s.style.left=`${Math.max(5,Y)}px`,s.style.top=`${Math.max(5,B)}px`}document.getElementById("preview-windows-container").appendChild(s),v.activeWindows.set(n,s),i||window.thoughtform.events.publish("window:create",{windowId:n,url:a});const G=an(u=>{T();const{width:C,height:Z}=u.contentRect;window.thoughtform.events.publish("window:resize",{windowId:n,width:Math.round(C),height:Math.round(Z)})},250);new ResizeObserver(u=>{for(const C of u)G(C)}).observe(s),setTimeout(()=>{s.classList.add("visible"),i||T()},10)}window.addEventListener("message",a=>{if(!a.data||!a.data.type)return;const{type:e,payload:t}=a.data;if(e==="request-close-self"){for(const s of v.activeWindows.values()){const o=s.querySelector("iframe");if(o&&o.contentWindow===a.source){_e(s);break}}return}let i;try{i=a.source.frameElement}catch{return}if(!i)return;const n=i.closest(".preview-window");if(n)switch(e){case"preview-focus":n.style.zIndex=++v.zIndexCounter,T();break;case"preview-url-changed":const s=n.querySelector(".preview-address-input");if(s&&t.newUrl){const o=new URL(t.newUrl);s.value=`${o.pathname}${o.hash}`,T()}break;case"request-preview-window":t&&ne(t.url,t.clientX,t.clientY);break}});function rn(a,e){a.classList.add("is-dragging");const t=a.getBoundingClientRect();v.dragState={windowEl:a,offsetX:e.clientX-t.left,offsetY:e.clientY-t.top};const i=a.querySelector("iframe");i&&(i.style.pointerEvents="none"),document.addEventListener("mousemove",et),document.addEventListener("mouseup",dn,{once:!0})}function et(a){if(!v.dragState)return;a.preventDefault();const{windowEl:e,offsetX:t,offsetY:i}=v.dragState;e.style.left=`${a.clientX-t}px`,e.style.top=`${a.clientY-i}px`}function dn(){if(v.dragState){const{windowEl:a}=v.dragState;a.classList.remove("is-dragging"),T();const e=a.querySelector("iframe");e&&(e.style.pointerEvents="auto")}v.dragState=null,document.removeEventListener("mousemove",et)}const gn=N.mark({class:"cm-wikilink"});class hn{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.isWindowed=window.self!==window.top,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.onMouseOver=this.onMouseOver.bind(this),this.isWindowed||(window.thoughtform&&window.thoughtform.ui&&!window.thoughtform.ui.openWindow&&(window.thoughtform.ui.openWindow=ne),window.thoughtform_windows_loaded||(cn(),window.thoughtform_windows_loaded=!0)),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0}),this.view.dom.addEventListener("mouseover",this.onMouseOver)}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove),this.view.dom.removeEventListener("mouseover",this.onMouseOver)}onMouseOver(e){if(!e.altKey)return;const t=e.target.closest(".cm-wikilink");if(!t)return;const i=Date.now();if(t.textContent===v.lastSpawnedLink&&i-v.lastSpawnTime<500)return;const n=this.view.state.field(J),s=t.textContent.slice(2,-2),o=ln(s,n);this.isWindowed?window.top.postMessage({type:"request-preview-window",payload:{url:o,clientX:e.clientX,clientY:e.clientY}},"*"):ne(o,e.clientX,e.clientY),v.lastSpawnedLink=t.textContent,v.lastSpawnTime=i}handleNavigation(e){const t=this.view.state.field(J);t.editor&&t.editor.navigateTo(e.textContent.slice(2,-2))}onMouseDown(e){const t=e.target.closest(".cm-wikilink");if(t&&(e.ctrlKey||e.metaKey)){e.preventDefault();const i=t.textContent.slice(2,-2);if(e.shiftKey){const n=this.view.state.field(J);n&&n.editor&&n.editor.paneId&&window.thoughtform.workspace.openInNewPane(i,n.editor.paneId)}else this.handleNavigation(t)}}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new k,i=/\[\[([^\[\]]+?)\]\]/g;for(const{from:n,to:s}of e.visibleRanges){const o=e.state.doc.sliceString(n,s);let c;for(;c=i.exec(o);){const l=n+c.index,r=l+c[0].length;t.add(l,r,gn)}}return t.finish()}}const mn=S.fromClass(hn,{decorations:a=>a.decorations}),In=N.mark({class:"cm-checkbox-todo"}),bn=N.mark({class:"cm-checkbox-done"}),un=N.mark({class:"cm-checkbox-doing"}),Cn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findCheckboxes(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findCheckboxes(a.view))}findCheckboxes(a){const e=new k,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:i,to:n}of a.visibleRanges){const s=a.state.doc.sliceString(i,n);let o;for(;o=t.exec(s);){const c=o[2],l=i+o.index+o[0].indexOf("["),r=l+3;c===" "?e.add(l,r,In):c==="x"?e.add(l,r,bn):c==="-"&&e.add(l,r,un)}}return e.finish()}},{decorations:a=>a.decorations}),Gn=N.mark({class:"cm-timestamp"}),Zn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findTimestamps(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findTimestamps(a.view))}findTimestamps(a){const e=new k,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:i,to:n}of a.visibleRanges){const s=a.state.doc.sliceString(i,n);let o;for(;o=t.exec(s);){const c=o[0],l=o[1],r=i+o.index+c.indexOf(l),g=r+l.length;e.add(r,g,Gn)}}return e.finish()}},{decorations:a=>a.decorations}),pn=N.mark({class:"cm-naked-link"});function yn(a){return a?a.startsWith("www.")?"https://"+a:a:null}class An{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;let i=yn(t.textContent);return i&&(i=i.replace(/[.,;)]+$/,""),window.open(i,"_blank","noopener,noreferrer")),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new k,i=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:n,to:s}of e.visibleRanges){const o=e.state.doc.sliceString(n,s);let c;for(;c=i.exec(o);){const l=e.state.doc.lineAt(n+c.index);if(/\[.*\]\(.*\)/.test(l.text)&&l.text.includes(`](${c[0]})`))continue;const r=n+c.index,g=r+c[0].length;t.add(r,g,pn)}}return t.finish()}}const Wn=S.fromClass(An,{decorations:a=>a.decorations}),fn=N.line({class:"cm-blockquote"}),wn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findBlockquotes(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findBlockquotes(a.view))}findBlockquotes(a){const e=new k,t=/^\s*>\s/;for(const{from:i,to:n}of a.visibleRanges){let s=i;for(;s<=n;){const o=a.state.doc.lineAt(s);t.test(o.text)&&e.add(o.from,o.from,fn),s=o.to+1}}return e.finish()}},{decorations:a=>a.decorations}),Bn=N.line({class:"cm-hr"}),vn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findRulers(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findRulers(a.view))}findRulers(a){const e=new k,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:i,to:n}of a.visibleRanges){let s=i;for(;s<=n;){const o=a.state.doc.lineAt(s);t.test(o.text)&&e.add(o.from,o.from,Bn),s=o.to+1}}return e.finish()}},{decorations:a=>a.decorations}),tt=["png","jpg","jpeg","gif","svg","webp","avif"],Ge=["mp4","webm","mov","ogg"],Ze=["mp3","wav","flac"],it=[...tt,...Ge,...Ze];function Yn(a){switch(a.toLowerCase()){case"png":return"image/png";case"jpg":case"jpeg":return"image/jpeg";case"gif":return"image/gif";case"svg":return"image/svg+xml";case"webp":return"image/webp";case"avif":return"image/avif";case"mp4":return"video/mp4";case"webm":return"video/webm";case"mov":return"video/quicktime";case"ogg":return"video/ogg";case"mp3":return"audio/mpeg";case"wav":return"audio/wav";case"flac":return"audio/flac";default:return"application/octet-stream"}}class Ve extends xe{constructor(e,t,i,n){super(),this.linkTarget=e,this.altText=t,this.type=i,this.view=n,this.objectURL=null}eq(e){return this.linkTarget===e.linkTarget&&this.type===e.type}toDOM(){const e=document.createElement("span");e.className="cm-embed-container";const t=this.linkTarget.split(".").pop()?.toLowerCase().split("?")[0];if(this.type==="external"){let i;Ge.includes(t)?(i=document.createElement("video"),i.className="cm-embedded-video",i.controls=!0):Ze.includes(t)?(i=document.createElement("audio"),i.className="cm-embedded-audio",i.controls=!0):(i=document.createElement("img"),i.className="cm-embedded-image",i.alt=this.altText),i.src=this.linkTarget,e.appendChild(i)}else{const i=document.createElement("span");i.className="cm-embed-placeholder",i.textContent=`Loading: ${this.linkTarget}`,e.appendChild(i),this.loadInternalContent(e).catch(n=>{console.error(`Failed to load internal embed for ${this.linkTarget}:`,n),i.textContent=`Error: ${this.linkTarget} not found.`,e.classList.add("cm-embed-error")})}return e}async loadInternalContent(e){let i=decodeURIComponent(this.linkTarget),n=null;i.includes("#")&&([n,i]=i.split("#"));const s=i.split(".").pop()?.toLowerCase(),o=this.view.state.field(J);let c;n&&n!==o.gitClient.gardenName?c=new w(n):c=o.gitClient;const l=i.startsWith("/")?i:`/${i}`;if(it.includes(s)){const r=await c.readFileAsBuffer(l);if(!r)throw new Error("File could not be read as a buffer.");const g=Yn(s),d=new Blob([r],{type:g});this.objectURL=URL.createObjectURL(d);let h;tt.includes(s)?(h=document.createElement("img"),h.className="cm-embedded-image",h.alt=this.linkTarget):Ge.includes(s)?(h=document.createElement("video"),h.className="cm-embedded-video",h.controls=!0):Ze.includes(s)&&(h=document.createElement("audio"),h.className="cm-embedded-audio",h.controls=!0),h.src=this.objectURL,e.innerHTML="",e.appendChild(h),(h.tagName==="VIDEO"||h.tagName==="AUDIO")&&(h.onerror=m=>{console.error("Embedded media playback error:",m),e.innerHTML=`<span class="cm-embed-error">Error playing: ${this.linkTarget}</span>`},h.load())}else{const r=await c.readFile(l);if(r==null)throw new Error("File content could not be read.");e.innerHTML="",e.classList.add("cm-embedded-content");const g=Ee.create({doc:r,extensions:[$e,ye(Te,{fallback:!0}),Ae(i),F.lineWrapping,F.editable.of(!1),...nt]});new F({state:g,parent:e})}}destroy(){this.objectURL&&URL.revokeObjectURL(this.objectURL)}}function Re(a){const e=new k,t=O(a.state),i=a.state.selection,n=new Set;for(const o of i.ranges)n.add(a.state.doc.lineAt(o.head).number);const s=o=>{let c=t.resolve(o,1);for(;c;){if(c.name.includes("Code"))return!0;c=c.parent}return!1};for(const{from:o,to:c}of a.visibleRanges){const l=a.state.doc.sliceString(o,c),r=/!\[\[([^\[\]]+?)\]\]/g;let g;for(;g=r.exec(l);){const h=o+g.index,m=a.state.doc.lineAt(h);if(s(h)||n.has(m.number))continue;const I=h+g[0].length,b=g[1];e.add(h,I,N.replace({widget:new Ve(b,b,"internal",a)}))}const d=/!\[(.*?)\]\((.*?)\)/g;for(;g=d.exec(l);){const h=o+g.index,m=a.state.doc.lineAt(h);if(s(h)||n.has(m.number))continue;const I=h+g[0].length,b=g[1],G=g[2],u=G.split(".").pop()?.toLowerCase()?.split("?")[0];G.startsWith("http")&&it.includes(u)&&e.add(h,I,N.replace({widget:new Ve(G,b,"external",a)}))}}return e.finish()}const Nn=S.fromClass(class{constructor(a){this.decorations=Re(a)}update(a){(a.docChanged||a.viewportChanged||a.selectionSet||O(a.startState)!==O(a.state))&&(this.decorations=Re(a.view))}},{decorations:a=>a.decorations}),Vn=N.line({class:"cm-response-wrapper"}),Se=N.mark({class:"cm-response-tag"}),Rn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findResponseBlocks(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findResponseBlocks(a.view))}findResponseBlocks(a){const e=new k,t=a.state.doc;let i=!1;for(let n=1;n<=t.lines;n++){const s=t.line(n),o=a.visibleRanges.some(c=>c.from<=s.to&&c.to>=s.from);if(s.text.trim()==="<response>"){i=!0,o&&e.add(s.from,s.to,Se);continue}if(s.text.trim()==="</response>"){i=!1,o&&e.add(s.from,s.to,Se);continue}i&&o&&e.add(s.from,s.from,Vn)}return e.finish()}},{decorations:a=>a.decorations}),Sn=N.line({class:"cm-prompt-wrapper"}),kn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findPrompts(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findPrompts(a.view))}findPrompts(a){const e=new k,t=/^\s*>\$\s/;for(const{from:i,to:n}of a.visibleRanges){let s=i;for(;s<=n;){const o=a.state.doc.lineAt(s);t.test(o.text)&&e.add(o.from,o.from,Sn),s=o.to+1}}return e.finish()}},{decorations:a=>a.decorations}),Mn=N.line({class:"cm-title-heading-line"}),Xn=S.fromClass(class{decorations;constructor(a){this.decorations=this.findTitleHeadings(a)}update(a){(a.docChanged||a.viewportChanged)&&(this.decorations=this.findTitleHeadings(a.view))}findTitleHeadings(a){const e=new k,t=/^#!\s.*$/,i=/(#!)|([A-Z])|([a-z]+)|(\d+)|([\p{P}\p{S}]+)/gu;for(const{from:n,to:s}of a.visibleRanges){let o=n;for(;o<=s;){const c=a.state.doc.lineAt(o);if(t.test(c.text)){e.add(c.from,c.from,Mn);let l;for(;l=i.exec(c.text);){const[r,g,d,h,m,I]=l,b=c.from+l.index,G=b+r.length;let u="cm-title-heading-word";g?u+=" cm-title-heading-punctuation cm-title-heading-sigil":d?u+=" cm-title-heading-uppercase":h||(m?u+=" cm-title-heading-number":I&&(u+=" cm-title-heading-punctuation"));const C=N.mark({class:u});e.add(b,G,C)}}o=c.to+1}}return e.finish()}},{decorations:a=>a.decorations});Je.initialize({startOnLoad:!0,theme:"base",securityLevel:"loose",themeVariables:{background:"#050f0e",primaryColor:"#12ffbc",secondaryColor:"#07443b",primaryTextColor:"#000000",secondaryTextColor:"#ffffff",tertiaryTextColor:"#ffffff",lineColor:"#12ffbc",textColor:"#dddddd",mainBkg:"#12ffbc",secondBkg:"#07443b",border1:"#12ffbc",border2:"#07443b",arrowheadColor:"#dddddd",fontFamily:'"trebuchet ms", verdana, arial, sans-serif',fontSize:"1rem",labelBackground:"rgba(0, 0, 0, 0.7)",THEME_COLOR_LIMIT:12,nodeBkg:"#12ffbc",nodeBorder:"#12ffbc",clusterBkg:"#07443b",clusterBorder:"#07443b",defaultLinkColor:"#dddddd",titleColor:"#ffffff",edgeLabelBackground:"#050f0e",actorBorder:"#12ffbc",actorBkg:"#12ffbc",actorTextColor:"#000000",actorLineColor:"#3d996b",signalColor:"#dddddd",signalTextColor:"#dddddd",labelBoxBkgColor:"#07443b",labelBoxBorderColor:"#07443b",labelTextColor:"#ffffff",loopTextColor:"#dddddd",noteBorderColor:"#eb9b27",noteBkgColor:"#07443b",noteTextColor:"#dddddd",activationBorderColor:"#12ffbc",activationBkgColor:"#050f0e",sequenceNumberColor:"#000000",sectionBkgColor:"#07443b",altSectionBkgColor:"#050f0e",sectionBkgColor2:"#07443b",excludeBkgColor:"rgba(50, 50, 50, 0.5)",taskBorderColor:"#12ffbc",taskBkgColor:"#12ffbc",taskTextLightColor:"#000000",taskTextColor:"#000000",taskTextDarkColor:"#000000",taskTextOutsideColor:"#dddddd",taskTextClickableColor:"#4dc3f5",activeTaskBorderColor:"#eb9b27",activeTaskBkgColor:"#12ffbc",gridColor:"#07443b",doneTaskBkgColor:"#12ffbc",doneTaskBorderColor:"#12ffbc",critBorderColor:"#ff1342",critBkgColor:"#ff1342",todayLineColor:"#eb9b27",vertLineColor:"#07443b",personBorder:"#12ffbc",personBkg:"#12ffbc",archEdgeColor:"#07443b",archEdgeArrowColor:"#dddddd",archEdgeWidth:"3",archGroupBorderColor:"#07443b",archGroupBorderWidth:"2px",rowOdd:"#050f0e",rowEven:"#07443b",labelColor:"#ffffff",errorBkgColor:"#ff1342",errorTextColor:"#ffffff"}});const ie=new Map;async function Jn(a){if(ie.has(a))return ie.get(a);try{const e=`mermaid-${Math.random().toString(36).substr(2,9)}`,{svg:t}=await Je.mermaidAPI.render(e,a);return ie.set(a,t),t}catch(e){const t=`<div class="cm-mermaid-error-container"><pre class="cm-mermaid-error">Mermaid Error:
${e.message}</pre></div>`;return ie.set(a,t),t}}class Fn extends xe{constructor(e){super(),this.code=e}eq(e){return this.code===e.code}toDOM(){const e=document.createElement("div");return e.className="cm-mermaid-container",e.innerHTML="<p>Loading diagram...</p>",setTimeout(()=>{e.isConnected&&Jn(this.code).then(t=>{e.innerHTML=t})},0),e}}function ke(a){const e=new k;return O(a.state).iterate({enter:i=>{if(i.name==="FencedCode"){const n=i.node.getChild("CodeInfo");if(n&&a.state.doc.sliceString(n.from,n.to).trim()==="mermaid"){const o=i.node.getChild("CodeText");if(o){const c=a.state.doc.sliceString(o.from,o.to);e.add(i.to,i.to,N.widget({widget:new Fn(c),side:1}))}}}}}),e.finish()}const zn=S.fromClass(class{constructor(a){this.decorations=ke(a)}update(a){(a.docChanged||O(a.startState)!==O(a.state))&&(this.decorations=ke(a.view))}},{decorations:a=>a.decorations}),nt=[on,mn,Cn,Zn,Wn,wn,vn,Rn,kn,Xn,zn],Hn=[...nt,Nn],Ln=N.mark({class:"cm-diff-inserted"});function Me(a,e){const t=[],i=e.doc.toString(),n=le(a,i);let s=0;for(const[o,c]of n)o===le.INSERT&&t.push(Ln.range(s,s+c.length)),o!==le.DELETE&&(s+=c.length);return N.set(t)}const pe=new H;function jn(a){return ze.define({create(e){return Me(a,e)},update(e,t){return t.docChanged?Me(a,t.state):e.map(t.changes)},provide:e=>F.decorations.from(e)})}const xn=new H,st=S.fromClass(class{constructor(a){this.view=a,this.statusBar=document.createElement("div"),this.statusBar.className="status-bar",this.filePathElement=document.createElement("span"),this.filePathElement.className="status-bar-filepath",this.tokenCountElement=document.createElement("span"),this.tokenCountElement.className="status-bar-token-count",this.statusBar.appendChild(this.filePathElement),this.statusBar.appendChild(this.tokenCountElement),a.dom.appendChild(this.statusBar),this.debouncedUpdate=me(this.updateAll.bind(this),100),this.updateAll()}update(a){(a.docChanged||a.selectionSet||a.viewportChanged)&&this.debouncedUpdate()}getDisplayPath(){const a=this.view.state.field(J);if(!a||!a.editor)return"...";const e=a.editor.gitClient.gardenName,t=a.editor.filePath||"/untitled";return`[${e}] ${t}`}updateAll(){if(!this.view.dom.isConnected)return;const a=this.getDisplayPath();this.filePathElement.textContent!==a&&(this.filePathElement.textContent=a);try{const e=this.view.state.doc.toString(),i=`Tokens: ${$(e).toLocaleString()}`;this.tokenCountElement.textContent!==i&&(this.tokenCountElement.textContent=i)}catch{this.tokenCountElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function En(){return st}function Tn({appContext:a,keymapCompartment:e,vimCompartment:t,defaultKeymapCompartment:i,languageCompartment:n,appContextCompartment:s,yjsCompartment:o,updateListener:c,filePath:l,getLanguageExtension:r}){return[s.of(a),e.of(X.of([])),t.of([]),i.of(X.of(Ie)),X.of([Tt]),Nt(),Vt(),Rt(),St(),kt(),Mt(),Xt(),Ee.allowMultipleSelections.of(!0),Jt(),ye(Te,{fallback:!0}),Ft(),zt(),Ht(),Lt(),jt(),xt(),X.of([...Ut,...Qt,...Dt,...Kt,...Ot,...Pt]),F.lineWrapping,Et,$e,n.of(r(l)),c,...Hn,pe.of([]),xn.of(En()),o.of([]),F.domEventHandlers({drop(g,d){return g.dataTransfer&&g.dataTransfer.files.length>0?(g.preventDefault(),!0):!1}})]}async function ot(a){const e=new Date,t=String(e.getFullYear()).slice(-2),i=String(e.getMonth()+1).padStart(2,"0"),n=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),o=String(e.getMinutes()).padStart(2,"0"),c=`${t}${i}${n}-${s}${o}`,l="/scratchpad";await a.ensureDir(l);let r=`${l}/${c}`,g=0;for(;;)try{await a.pfs.stat(r),g++,r=`${l}/${c}-${g}`}catch(d){if(d.code==="ENOENT")break;throw d}return r}class Un{constructor(e){this.editor=e}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="home"),t}async loadFileContent(e){try{return await this.editor.gitClient.readFile(e)}catch(t){return t.message&&t.message.includes("does not exist")||console.warn(`An unexpected error occurred while reading ${e}:`,t),`// "${e.substring(1)}" does not exist. Start typing to create it.`}}async loadFile(e){const t=["png","jpg","jpeg","gif","svg","webp","avif"],i=["mp4","webm","mov","ogg"],n=["mp3","wav","flac"],s=[...t,...i,...n],o=e.split(".").pop()?.toLowerCase();if(s.includes(o)){this.editor.hideDiff(),this.editor.targetElement.classList.remove("is-editor"),this.editor.targetElement.classList.add("is-media-preview"),this.editor.mediaViewerElement.innerHTML="<p>Loading media...</p>";const g=await this.editor.gitClient.readFileAsBuffer(e);if(g){const h={png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",svg:"image/svg+xml",webp:"image/webp",avif:"image/avif",mp4:"video/mp4",webm:"video/webm",mov:"video/quicktime",ogg:"video/ogg",mp3:"audio/mpeg",wav:"audio/wav",flac:"audio/flac"}[o]||"application/octet-stream",m=new Blob([g],{type:h});this.editor.currentMediaObjectUrl&&URL.revokeObjectURL(this.editor.currentMediaObjectUrl),this.editor.currentMediaObjectUrl=URL.createObjectURL(m);let I="";t.includes(o)?I=`<img src="${this.editor.currentMediaObjectUrl}" alt="${e}" />`:i.includes(o)?I=`<video src="${this.editor.currentMediaObjectUrl}" controls></video>`:n.includes(o)&&(I=`<audio src="${this.editor.currentMediaObjectUrl}" controls></audio>`),this.editor.mediaViewerElement.innerHTML=I;const b=this.editor.mediaViewerElement.querySelector("video, audio");b&&b.load()}else this.editor.mediaViewerElement.innerHTML=`<p class="error">Could not load media: ${e}</p>`;this.editor.filePath=e,this.editor.sidebar&&await this.editor.sidebar.refresh(),await this.editor._applyUserSettings();return}this.editor.targetElement.classList.remove("is-media-preview"),this.editor.targetElement.classList.add("is-editor"),this.editor.currentMediaObjectUrl&&(URL.revokeObjectURL(this.editor.currentMediaObjectUrl),this.editor.currentMediaObjectUrl=null),this.editor.hideDiff();const c=await this.loadFileContent(e);this.editor.filePath=e;const l=Ae(e);this.editor.editorView.dispatch({effects:this.editor.languageCompartment.reconfigure(l)});const r=this.editor.editorView.state.doc;this.editor.editorView.dispatch({changes:{from:0,to:r.length,insert:c},annotations:this.editor.programmaticChange.of(!0)}),this.editor.sidebar&&await this.editor.sidebar.refresh(),await this.editor._applyUserSettings()}async forceReloadFile(e){if(this.editor.filePath!==e||!this.editor.editorView){await this.loadFile(e);return}const t=this.editor.editorView.state.selection,i=this.editor.editorView.scrollDOM.scrollTop,n=await this.loadFileContent(e),s=this.editor.editorView.state.doc;if(n===s.toString())return;const o=n.length,c={changes:{from:0,to:s.length,insert:n},annotations:this.editor.programmaticChange.of(!0),selection:{anchor:Math.min(t.main.anchor,o),head:Math.min(t.main.head,o)}};this.editor.editorView.dispatch(c),requestAnimationFrame(()=>{this.editor.editorView&&this.editor.editorView.scrollDOM&&(this.editor.editorView.scrollDOM.scrollTop=i)})}async newFile(){try{const e=await y.prompt({title:"New File",label:"Enter file name (or leave blank for a scratchpad):"});if(e===null){this.editor.editorView?.focus();return}let t;if(!e.trim())t=await ot(this.editor.gitClient);else{const i=e.trim();t=`/${i}`;try{const s=(await this.editor.gitClient.pfs.stat(t)).isDirectory()?"folder":"file";await this.editor.sidebar.showAlert({title:"Creation Failed",message:`A ${s} named "${i}" already exists.`});return}catch(n){if(n.code!=="ENOENT"){console.error("Error checking for file:",n),await this.editor.sidebar.showAlert({title:"Error",message:"An unexpected error occurred."});return}}}window.thoughtform.workspace.openFile(this.editor.gitClient.gardenName,t)}finally{}}async duplicateFile(e){if(e)try{if((await this.editor.gitClient.pfs.stat(e)).isDirectory()){await this.editor.sidebar.showAlert({title:"Action Not Supported",message:"Duplicating folders is not yet supported."});return}const i=e.substring(0,e.lastIndexOf("/")),n=e.substring(e.lastIndexOf("/")+1),s=`${n.split(".").slice(0,-1).join(".")||n} (copy)${n.includes(".")?"."+n.split(".").pop():""}`,o=await y.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:s});if(o===null){this.editor.editorView?.focus();return}if(!o.trim())return;const c=`${i}/${o.trim()}`;try{const l=await this.editor.gitClient.readFile(e);await this.editor.gitClient.writeFile(c,l),window.thoughtform.workspace.openFile(this.editor.gitClient.gardenName,c)}catch(l){console.error("Error duplicating file:",l),await this.editor.sidebar.showAlert({title:"Error",message:`Failed to duplicate file: ${l.message}`})}}finally{}}}class Qn{constructor(e){this.editor=e}async showDiff(e){if(e===null){this.hideDiff();return}const t=jn(e);this.editor.editorView.dispatch({effects:pe.reconfigure(t)})}hideDiff(){this.editor.editorView.dispatch({effects:pe.reconfigure([])})}async previewHistoricalFile(e,t,i){const[n,s]=await Promise.all([this.editor.gitClient.readBlobFromCommit(t,e),this.editor.gitClient.readBlobFromCommit(i,e)]);if(n===null||s===null){await this.editor.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editor.editorView.dispatch({changes:{from:0,to:this.editor.editorView.state.doc.length,insert:n},annotations:this.editor.programmaticChange.of(!0)}),this.showDiff(s)}}class Dn{constructor(e){this.editor=e}getCurrentState(){return this.editor.editorView?{selection:{main:{anchor:this.editor.editorView.state.selection.main.anchor,head:this.editor.editorView.state.selection.main.head}},scrollTop:this.editor.editorView.scrollDOM.scrollTop}:null}restoreState(e){if(!this.editor.editorView||!e)return;const t=this.editor.editorView.state.update({selection:{anchor:e.selection.main.anchor,head:e.selection.main.head}});this.editor.editorView.dispatch(t),requestAnimationFrame(()=>{this.editor.editorView.scrollDOM&&(this.editor.editorView.scrollDOM.scrollTop=e.scrollTop)})}}class K{static editors=[];constructor({target:e,editorConfig:t={},gitClient:i,commandPalette:n,initialFile:s,paneId:o}){if(!i)throw new Error("Editor requires a gitClient instance.");if(!n)throw new Error("Editor requires a commandPalette instance.");this.targetElement=typeof e=="string"?document.querySelector(e):e,this.editorConfig=t,this.gitClient=i,this.commandPalette=n,this.paneId=o,this.editorView=null,this.sidebar=null,this.filePath=s||"/home",this.isReady=!1,this.keymapService=new _i(this),this.aiOverrides={},this.languageCompartment=new H,this.vimCompartment=new H,this.defaultKeymapCompartment=new H,this.appContextCompartment=new H,this.yjsCompartment=new H,this.mediaViewerElement=null,this.currentMediaObjectUrl=null,this.programmaticChange=qt.define(),this.yDoc=null,this.yUndoManager=null,this.isLiveSyncConnected=!1,this._files=new Un(this),this._git=new Qn(this),this._state=new Dn(this),this.debouncedHandleUpdate=me(this.handleUpdate.bind(this),500),this.debouncedStateSave=me(()=>{window.thoughtform.workspace?._saveStateToSession()},500),this.init()}async init(){if(!this.targetElement){console.error("Target container not found or provided.");return}if(document.querySelector("#sidebar").hasChildNodes())this.sidebar=window.thoughtform.sidebar;else{await this.gitClient.initRepo(),this.sidebar=new Di({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),window.thoughtform._dragDropInitialized||(Ki(this.sidebar),window.thoughtform._dragDropInitialized=!0);const n=document.getElementById("loading-indicator");n&&n.remove(),document.querySelector(".main-content").style.display="flex"}window.thoughtform.sidebar||(window.thoughtform.sidebar=this.sidebar);let e=await this._files.loadFileContent(this.filePath);this.mediaViewerElement=document.createElement("div"),this.mediaViewerElement.className="media-viewer-container",this.targetElement.appendChild(this.mediaViewerElement);const t=F.updateListener.of(n=>{n.docChanged&&(n.transactions.some(s=>s.annotation(this.programmaticChange)),n.transactions.some(s=>s.annotation("y-codemirror.next$remote"))),!this.isLiveSyncConnected&&(n.docChanged&&!n.transactions.some(s=>s.annotation(this.programmaticChange))&&this.debouncedHandleUpdate(n.state.doc.toString()),(n.selectionSet||n.viewportChanged)&&this.debouncedStateSave())}),i=Tn({appContext:J.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar,editor:this})),keymapCompartment:this.keymapService.keymapCompartment,vimCompartment:this.vimCompartment,defaultKeymapCompartment:this.defaultKeymapCompartment,languageCompartment:this.languageCompartment,appContextCompartment:this.appContextCompartment,yjsCompartment:this.yjsCompartment,updateListener:t,filePath:this.filePath,getLanguageExtension:Ae});this.editorView=new F({doc:e,extensions:i,parent:this.targetElement}),K.editors.push(this),this.isReady=!0,await this.loadFile(this.filePath)}connectLiveSync(e,t){console.log(`%c[LIVESYNC-LIFECYCLE] connectLiveSync CALLED for ${this.filePath}. Is Host: ${t}. Current connection state: ${this.isLiveSyncConnected}`,"color: green; font-weight: bold;"),this.isLiveSyncConnected&&this.disconnectLiveSync(),this.yDoc=e;const i=this.yDoc.getText("codemirror");this.yUndoManager=new ut(i);const n=$t(i,null,{undoManager:this.yUndoManager});this.editorView.dispatch({effects:[this.yjsCompartment.reconfigure(n),this.defaultKeymapCompartment.reconfigure(X.of([]))]}),this.isLiveSyncConnected=!0}disconnectLiveSync(){this.isLiveSyncConnected&&(this.editorView&&!this.editorView.isDestroyed&&this.editorView.dispatch({effects:[this.yjsCompartment.reconfigure([]),this.defaultKeymapCompartment.reconfigure(X.of(Ie))]}),this.yDoc=null,this.yUndoManager=null,this.isLiveSyncConnected=!1)}destroy(){console.log(`%c[LIVESYNC-LIFECYCLE] editor.destroy() CALLED for ${this.filePath}`,"color: red; font-weight: bold;"),this.disconnectLiveSync(),this.editorView&&this.editorView.destroy();const e=K.editors.indexOf(this);e>-1&&K.editors.splice(e,1)}async _applyUserSettings(){const{value:e}=await window.thoughtform.config.get("interface.yml","editingMode",this);e==="vim"?(_t.map("jj","<Esc>","insert"),this.editorView.dispatch({effects:[this.vimCompartment.reconfigure(ei()),this.defaultKeymapCompartment.reconfigure([])]})):this.isLiveSyncConnected||this.editorView.dispatch({effects:[this.vimCompartment.reconfigure([]),this.defaultKeymapCompartment.reconfigure(X.of(Ie))]}),this.keymapService&&await this.keymapService.updateKeymaps()}async navigateTo(e){if(!e)return;let t=e.split("|")[0].trim(),i=null;if(t.includes("#")&&([i,t]=t.split("#")),i&&i!==this.gitClient.gardenName)window.thoughtform.workspace.openFile(i,t.startsWith("/")?t:`/${t}`);else{const n=this.gitClient.gardenName;let o=await ue(t,{gitClient:this.gitClient,sidebar:this.sidebar})||(t.startsWith("/")?t:`/${t}`);window.thoughtform.workspace.openFile(n,o)}}async handleUpdate(e){if(!this.isReady||this.isLiveSyncConnected)return;let t=!1;try{await this.gitClient.pfs.stat(this.filePath)}catch(s){s.code==="ENOENT"&&(t=!0)}await this.gitClient.writeFile(this.filePath,e);const i={gardenName:this.gitClient.gardenName,path:this.filePath,content:e};t?window.thoughtform.events.publish("file:create",i):window.thoughtform.events.publish("file:update",i),window.thoughtform.workspace.notifyFileUpdate(this.gitClient.gardenName,this.filePath,this.paneId),this.sidebar&&await this.sidebar.refresh();const n=window.thoughtform.sync.liveSync;t&&!this.isLiveSyncConnected&&(n.state==="host"||n.state==="active")&&n.syncableGardens.includes(this.gitClient.gardenName)&&window.thoughtform.workspace.activateLiveSyncForCurrentFile()}refreshStatusBar(){if(this.editorView){const e=this.editorView.plugin(st);e&&e.updateAll()}}getFilePath(e){return this._files.getFilePath(e)}loadFileContent(e){return this._files.loadFileContent(e)}loadFile(e){return this._files.loadFile(e)}forceReloadFile(e){return this._files.forceReloadFile(e)}newFile(){return this._files.newFile()}duplicateFile(e){return this._files.duplicateFile(e)}showDiff(e){return this._git.showDiff(e)}hideDiff(){return this._git.hideDiff()}previewHistoricalFile(e,t,i){return this._git.previewHistoricalFile(e,t,i)}getCurrentState(){return this._state.getCurrentState()}restoreState(e){return this._state.restoreState(e)}}class Kn{constructor(e){this.workspace=e}async render(){this.workspace.panes.forEach(({editor:e})=>{e&&e.editorView&&e.editorView.dom.parentElement&&e.editorView.dom.remove()}),this.workspace.mainContainer.innerHTML="",this.workspace.mainContainer.removeAttribute("style"),await this._renderNode(this.workspace.paneTree,this.workspace.mainContainer),this.workspace.setActivePane(this.workspace.activePaneId)}updateLayout(){this._syncNodeStyles(this.workspace.paneTree,this.workspace.mainContainer)}_syncNodeStyles(e,t){!t||!e||e.type.startsWith("split-")&&(e.type.split("-")[1]==="vertical"?t.style.gridTemplateColumns=`${e.splitPercentage}% auto 1fr`:t.style.gridTemplateRows=`${e.splitPercentage}% auto 1fr`,t.children.length===3&&(this._syncNodeStyles(e.children[0],t.children[0]),this._syncNodeStyles(e.children[1],t.children[2])))}async _renderNode(e,t){if(e){if(e.type==="leaf"){const i=document.createElement("div");i.className="pane",i.dataset.paneId=e.id,t.appendChild(i);let n=this.workspace.panes.get(e.id)?.editor;if(n)i.appendChild(n.editorView.dom),this.workspace.panes.set(e.id,{element:i,editor:n});else{const s=e.buffers[e.activeBufferIndex],o=await this.workspace.getGitClient(s.garden);n=new K({target:i,gitClient:o,commandPalette:window.thoughtform.commandPalette,initialFile:s.path,paneId:e.id}),await new Promise(l=>{const r=setInterval(()=>{n.isReady&&(clearInterval(r),l())},50)}),this.workspace.panes.set(e.id,{element:i,editor:n});const c=this.workspace.initialEditorStates[e.id];c&&n.restoreState(c)}i.addEventListener("click",()=>{this.workspace.setActivePane(e.id)})}else if(e.type.startsWith("split-")){const i=e.type.split("-")[1];t.style.display="grid";const[n,s]=e.children,o=document.createElement("div");o.className="pane-container";const c=document.createElement("div");c.className="pane-container";const l=document.createElement("div");l.className=`pane-resizer pane-resizer-${i}`,i==="vertical"?t.style.gridTemplateColumns=`${e.splitPercentage}% auto 1fr`:t.style.gridTemplateRows=`${e.splitPercentage}% auto 1fr`,t.appendChild(o),t.appendChild(l),t.appendChild(c),this._initializeResizer(l,t,e,i),await this._renderNode(n,o),await this._renderNode(s,c)}}}_initializeResizer(e,t,i,n){const s=o=>{o.preventDefault(),this.workspace.isResizing=!0;const c=document.getElementById("resize-overlay");c.style.display="block",c.style.cursor=n==="vertical"?"col-resize":"row-resize";const l=g=>{if(!this.workspace.isResizing)return;const d=t.getBoundingClientRect();if(n==="vertical"){const h=(g.clientX-d.left)/d.width*100;i.splitPercentage=Math.max(10,Math.min(90,h)),t.style.gridTemplateColumns=`${i.splitPercentage}% auto 1fr`}else{const h=(g.clientY-d.top)/d.height*100;i.splitPercentage=Math.max(10,Math.min(90,h)),t.style.gridTemplateRows=`${i.splitPercentage}% auto 1fr`}},r=()=>{this.workspace.isResizing=!1,c.style.display="none",c.style.cursor="default",document.removeEventListener("mousemove",l),document.removeEventListener("mouseup",r),document.removeEventListener("touchmove",l),document.removeEventListener("touchend",r),this.workspace._stateManager.saveState()};document.addEventListener("mousemove",l),document.addEventListener("mouseup",r),document.addEventListener("touchmove",l,{passive:!1}),document.addEventListener("touchend",r)};e.addEventListener("mousedown",s),e.addEventListener("touchstart",s,{passive:!1})}}class On{constructor(e){this.workspace=e,this.isMaximized=!1}async splitPane(e,t,i=null){this.isMaximized&&this.toggleMaximizePane();let n=null;const s=c=>{if(c.type==="leaf"&&c.id===e){n=`pane-${Date.now()}`;let l;i?l={garden:i.garden,path:i.path}:l={garden:c.buffers[c.activeBufferIndex].garden,path:"/scratchpad/placeholder"};const r={type:"leaf",id:n,activeBufferIndex:0,buffers:[l]};return{type:`split-${t}`,splitPercentage:50,children:[c,r]}}return c.type.startsWith("split-")&&(c.children=c.children.map(l=>s(l))),c},o=(c,l)=>c.type==="leaf"&&c.id===l?c:c.type.startsWith("split-")?o(c.children[0],l)||o(c.children[1],l):null;if(this.workspace.paneTree=s(this.workspace.paneTree),n&&!i){const c=o(this.workspace.paneTree,n);if(c){const l=await this.workspace.getGitClient(c.buffers[0].garden),r=await ot(l);c.buffers[0].path=r}}this.workspace.render().then(()=>{n&&this.workspace.setActivePane(n)})}closeActivePane(){this.isMaximized&&this.toggleMaximizePane();const e=this._getPaneList();if(e.length<=1){if(window.self!==window.top){window.top.postMessage({type:"request-close-self"},"*");return}return}const t=e.findIndex(o=>o.id===this.workspace.activePaneId);if(t===-1)return;const i=(t+1)%e.length,n=e[i===t?0:i].id,s=o=>{if(!o||o.type==="leaf")return o;const c=o.children.findIndex(l=>l.id===this.workspace.activePaneId);return c!==-1?o.children[1-c]:(o.children=o.children.map(l=>s(l)).filter(Boolean),o.children.length===1?o.children[0]:o)};this.workspace.paneTree=s(this.workspace.paneTree),this.workspace.render().then(()=>{this.workspace.setActivePane(n)})}selectNextPane(){const e=this._getPaneList(),t=e.findIndex(n=>n.id===this.workspace.activePaneId);if(t===-1)return;const i=(t+1)%e.length;this.workspace.setActivePane(e[i].id)}selectPrevPane(){const e=this._getPaneList(),t=e.findIndex(n=>n.id===this.workspace.activePaneId);if(t===-1)return;const i=(t-1+e.length)%e.length;this.workspace.setActivePane(e[i].id)}movePaneUp(){this._findAndSwap("up")}movePaneDown(){this._findAndSwap("down")}toggleMaximizePane(){this.isMaximized?this._applyRestore(this.workspace.paneTree):this._applyMaximize(this.workspace.paneTree,this.workspace.activePaneId),this.isMaximized=!this.isMaximized,this.workspace.updateLayout(),this.workspace._stateManager.saveState()}_isDescendant(e,t){return e.type==="leaf"?e.id===t:e.type.startsWith("split-")?this._isDescendant(e.children[0],t)||this._isDescendant(e.children[1],t):!1}_applyMaximize(e,t){!e||e.type==="leaf"||e.type.startsWith("split-")&&(e.originalSplitPercentage=e.splitPercentage,this._isDescendant(e.children[0],t)?e.splitPercentage=99.5:this._isDescendant(e.children[1],t)&&(e.splitPercentage=.5),this._applyMaximize(e.children[0],t),this._applyMaximize(e.children[1],t))}_applyRestore(e){!e||e.type==="leaf"||e.type.startsWith("split-")&&(typeof e.originalSplitPercentage=="number"&&(e.splitPercentage=e.originalSplitPercentage,delete e.originalSplitPercentage),this._applyRestore(e.children[0]),this._applyRestore(e.children[1]))}getActivePaneInfo(){if(!this.workspace.activePaneId)return null;let e=null;const t=n=>{n.type==="leaf"&&n.id===this.workspace.activePaneId?e=n:n.type.startsWith("split-")&&n.children.forEach(t)};t(this.workspace.paneTree);const i=this.workspace.panes.get(this.workspace.activePaneId);return e&&i?{node:e,pane:i}:null}_getPaneList(){const e=[],t=i=>{i.type==="leaf"?e.push(i):i.type.startsWith("split-")&&i.children.forEach(t)};return t(this.workspace.paneTree),e}_rebuildTreeWithNewOrder(e,t){return e?e.type==="leaf"?t.shift():(e.type.startsWith("split-")&&(e.children=e.children.map(i=>this._rebuildTreeWithNewOrder(i,t))),e):null}_findAndSwap(e){this.isMaximized&&this.toggleMaximizePane();const t=this._getPaneList();if(t.length<2)return;const i=t.findIndex(o=>o.id===this.workspace.activePaneId);if(i===-1)return;const n=e==="up"?i-1:i+1;if(n<0||n>=t.length)return;[t[i],t[n]]=[t[n],t[i]];const s=JSON.parse(JSON.stringify(this.workspace.paneTree));this.workspace.paneTree=this._rebuildTreeWithNewOrder(s,t),this.workspace.render().then(()=>{const o=this.workspace.getActiveEditor();o&&o.editorView.focus()})}}class Pn{constructor(e){this.workspace=e}loadState(){try{const e=sessionStorage.getItem("thoughtform_workspace_layout");if(e)return JSON.parse(e)}catch(e){console.error("Failed to load or parse workspace state from sessionStorage:",e),sessionStorage.removeItem("thoughtform_workspace_layout")}return null}saveState(){if(!this.workspace.paneTree)return;const e={};this.workspace.panes.forEach((i,n)=>{i.editor&&(e[n]=i.editor.getCurrentState())});const t={paneTree:this.workspace.paneTree,activePaneId:this.workspace.activePaneId,editorStates:e,isMaximized:this.workspace._paneManager.isMaximized};try{sessionStorage.setItem("thoughtform_workspace_layout",JSON.stringify(t))}catch(i){console.error("Failed to save workspace state to sessionStorage:",i)}}}class qn{constructor(){this.sessionParams=new URLSearchParams,this.updateFromUrl()}updateFromUrl(){const e=window.location.hash,t=e.indexOf("?");if(t!==-1){const i=e.substring(t+1),n=new URLSearchParams(i),s={};for(const[o,c]of n.entries())s[o.toLowerCase()]=c;this.sessionParams=new URLSearchParams(s),sessionStorage.setItem("thoughtform_session_params",JSON.stringify(s))}else sessionStorage.getItem("thoughtform_session_params")&&(this.sessionParams=new URLSearchParams,sessionStorage.removeItem("thoughtform_session_params"))}getSessionParams(){return this.sessionParams}buildUrl(e,t,i=!1){const n=new URL(import.meta.url).pathname,s=n.lastIndexOf("/src/"),c=`${s>-1?n.substring(0,s):""}/${encodeURIComponent(e)}`,l=`#${encodeURI(t)}`,r=new URLSearchParams(this.sessionParams);i&&r.set("windowed","true");const g=r.toString(),d=l+(g?`?${g}`:"");return`${c}${d}`}}class $n{constructor(e){this.initialGitClient=e,this.panes=new Map,this.mainContainer=document.querySelector("main"),this.isResizing=!1,this.gitClients=new Map,this.gitClients.set(e.gardenName,e),this.isInitialized=!1,this.broadcastChannel=new BroadcastChannel("thoughtform_garden_sync"),this.broadcastChannel.onmessage=this.handleBroadcastMessage.bind(this),window.thoughtform.events.subscribe("file:rename",n=>this.notifyFileRename(n)),this._renderer=new Kn(this),this._paneManager=new On(this),this._stateManager=new Pn(this),this._urlManager=new qn;const t=this._stateManager.loadState();this._urlManager.getSessionParams().has("windowed")||!t||!t.paneTree||!t.activePaneId?(this.paneTree=this._createInitialPaneTree(),this.activePaneId="pane-1",this.initialEditorStates={},this._paneManager.isMaximized=!1):(this.paneTree=t.paneTree,this.activePaneId=t.activePaneId,this.initialEditorStates=t.editorStates||{},this._paneManager.isMaximized=t.isMaximized||!1)}_createInitialPaneTree(){let e=(window.location.hash||"#/home").substring(1);return e=e.split("?")[0],{type:"leaf",id:"pane-1",activeBufferIndex:0,buffers:[{garden:this.initialGitClient.gardenName,path:e}]}}updateSessionFromUrl(){this._urlManager.updateFromUrl()}activateLiveSyncForCurrentFile(){const e=this.getActiveEditor();e&&window.thoughtform.sync.liveSync.activateDocForEditor(e)}async hotReloadGarden(e){const t=window.thoughtform.sync.liveSync.state;if(t==="bootstrapping"||t==="active"){console.log(`%c[LIVESYNC-GUARD] hotReloadGarden BLOCKED for garden "${e}" to preserve active live sync session.`,"color: orange; font-weight: bold;");return}console.log(`%c[Workspace] hotReloadGarden TRIGGERED for "${e}"`,"color: red; font-weight: bold;");const i=new w(e);await i.initRepo(),this.gitClients.set(e,i);for(const[n,s]of this.panes.entries())if(s.editor&&s.editor.gitClient.gardenName===e){const o=s.element,c=s.editor.filePath;s.editor.destroy();const l=new K({target:o,gitClient:i,commandPalette:window.thoughtform.commandPalette,initialFile:c,paneId:n});await new Promise(r=>{const g=setInterval(()=>{l.isReady&&(clearInterval(g),r())},50)}),this.panes.set(n,{element:o,editor:l})}window.thoughtform.sidebar&&window.thoughtform.sidebar.gitClient.gardenName===e&&(window.thoughtform.sidebar.gitClient=i,await window.thoughtform.sidebar.refresh()),window.thoughtform.events.publish("workspace:garden:reloaded",{gardenName:e}),console.log(`[Workspace] Hot-reload complete for "${e}".`)}async resetAndSwitchToHome(){this.gitClients.clear();const e=await this.getGitClient("home");this.initialGitClient=e,this.paneTree=this._createInitialPaneTree(),this.activePaneId="pane-1",this.initialEditorStates={},await this.render(),await window.thoughtform.sidebar.refresh()}async getGitClient(e){if(!this.gitClients.has(e)){const t=new w(e);await t.initRepo(),this.gitClients.set(e,t)}return this.gitClients.get(e)}setActivePane(e){if(this._paneManager.isMaximized&&this.activePaneId!==e&&this.toggleMaximizePane(),!this.panes.has(e))return;this.activePaneId=e,this.panes.forEach((i,n)=>{i.element.classList.toggle("is-active-pane",n===e)});const t=this.panes.get(e);setTimeout(()=>t?.editor?.editorView.focus(),50),this._updateURL(),window.thoughtform.sidebar?.refresh(),this._stateManager.saveState()}async switchGarden(e){const t=this.getActiveEditor();if(!t||t.gitClient.gardenName===e)return;t.isLiveSyncConnected&&t.disconnectLiveSync();const i=await this.getGitClient(e);t.gitClient=i,window.thoughtform.sidebar.gitClient=i,t.editorView.dispatch({effects:t.appContextCompartment.reconfigure(J.init(()=>({gitClient:i,sidebar:window.thoughtform.sidebar,editor:t})))}),window.thoughtform.events.publish("workspace:garden:switched",{editor:t}),await this.openFile(e,"/home"),window.thoughtform.sidebar&&(window.thoughtform.sidebar.activeTab="Files",sessionStorage.setItem("sidebarActiveTab","Files")),await window.thoughtform.sidebar.refresh(),this.activateLiveSyncForCurrentFile()}async openFile(e,t){const i=this._paneManager.getActivePaneInfo();if(!i)return;const{node:n,pane:s}=i,o=s.editor;if(o.isLiveSyncConnected)if(o.gitClient.gardenName===e&&o.filePath===t){console.log(`%c[LIVESYNC-GUARD] openFile BLOCKED for "${e}#${t}" because it is already the live file.`,"color: orange; font-weight: bold;");return}else console.log("%c[LIVESYNC-GUARD] Navigating away from live file. Disconnecting editor...","color: orange; font-weight: bold;"),o.disconnectLiveSync();const c=n.buffers.findIndex(r=>r.garden===e&&r.path===t);c!==-1?n.activeBufferIndex=c:(n.buffers.push({garden:e,path:t}),n.activeBufferIndex=n.buffers.length-1);const l=await this.getGitClient(e);o.gitClient.gardenName!==e&&(o.gitClient=l,o.editorView.dispatch({effects:o.appContextCompartment.reconfigure(J.init(()=>({gitClient:l,sidebar:window.thoughtform.sidebar,editor:o})))}),window.thoughtform.events.publish("workspace:garden:switched",{editor:o})),await o.loadFile(t),this.setActivePane(this.activePaneId),this.activateLiveSyncForCurrentFile()}findEditorByFile(e,t){for(const i of this.panes.values())if(i.editor&&i.editor.gitClient.gardenName===e&&i.editor.filePath===t)return i.editor;return null}async openInNewPane(e,t){if(!e||!t)return;const i=this.panes.get(t)?.editor;if(!i)return;let n=e.split("|")[0].trim(),s=null;n.includes("#")&&([s,n]=n.split("#"));let o,c;if(s&&s!==i.gitClient.gardenName){c=s;const d=await this.getGitClient(c);o=await ue(n,{gitClient:d,sidebar:window.thoughtform.sidebar})||(n.startsWith("/")?n:`/${n}`)}else c=i.gitClient.gardenName,o=await ue(n,{gitClient:i.gitClient,sidebar:window.thoughtform.sidebar})||(n.startsWith("/")?n:`/${n}`);const l=this.panes.get(t);if(!l||!l.element)return;const r=l.element,g=r.offsetWidth>r.offsetHeight?"vertical":"horizontal";await this.splitPane(t,g,{garden:c,path:o})}_updateURL(){if(!this.isInitialized)return;const e=this._paneManager.getActivePaneInfo();if(!e)return;const t=e.node.buffers[e.node.activeBufferIndex],i=this._urlManager.buildUrl(t.garden,t.path),n=this._urlManager.getSessionParams().has("windowed");window.location.pathname+window.location.hash!==i&&(window.history.pushState(null,"",i),n&&window.parent.postMessage({type:"preview-url-changed",payload:{newUrl:window.location.href}},"*"))}async notifyFileUpdate(e,t,i){this.broadcastChannel.postMessage({type:"file_updated",gardenName:e,filePath:t,sourcePaneId:i});for(const[n,s]of this.panes.entries())n!==i&&s.editor.gitClient.gardenName===e&&s.editor.filePath===t&&await s.editor.forceReloadFile(t)}notifyFileRename({oldPath:e,newPath:t,gardenName:i}){this._performRenameUpdate(e,t,i),this.broadcastChannel.postMessage({type:"file_renamed",oldPath:e,newPath:t,gardenName:i})}_performRenameUpdate(e,t,i){let n=!1;const s=o=>{o.type==="leaf"?o.buffers.forEach(c=>{c.garden===i&&c.path===e&&(c.path=t)}):o.type.startsWith("split-")&&o.children.forEach(s)};s(this.paneTree),this.panes.forEach(o=>{const c=o.editor;c.gitClient.gardenName===i&&c.filePath===e&&(c.filePath=t,c.refreshStatusBar(),c.paneId===this.activePaneId&&(n=!0))}),n&&this._updateURL(),window.thoughtform.sidebar?.refresh(),this._stateManager.saveState()}async handleBroadcastMessage(e){const{type:t,gardenName:i,filePath:n,sourcePaneId:s,oldPath:o,newPath:c}=e.data;if(t==="file_updated")for(const[,l]of this.panes.entries())l.editor.gitClient.gardenName===i&&l.editor.filePath===n&&await l.editor.forceReloadFile(n);else t==="file_renamed"&&this._performRenameUpdate(o,c,i)}getActiveEditor(){const e=this.panes.get(this.activePaneId);return e?e.editor:null}async getActiveGitClient(){const e=this._paneManager.getActivePaneInfo();if(!e)return this.initialGitClient;const t=e.node.buffers[e.node.activeBufferIndex];return await this.getGitClient(t.garden)}buildUrl(e,t,i=!1){return this._urlManager.buildUrl(e,t,i)}render(){return this._renderer.render()}updateLayout(){return this._renderer.updateLayout()}splitPane(e,t,i=null){return this._paneManager.splitPane(e,t,i)}closeActivePane(){return this._paneManager.closeActivePane()}selectNextPane(){return this._paneManager.selectNextPane()}selectPrevPane(){return this._paneManager.selectPrevPane()}movePaneUp(){return this._paneManager.movePaneUp()}movePaneDown(){return this._paneManager.movePaneDown()}toggleMaximizePane(){return this._paneManager.toggleMaximizePane()}_saveStateToSession(){return this._stateManager.saveState()}}function _n(a){return new $n(a)}async function es(){const a=sessionStorage.getItem("thoughtform_session_params");if(!a)return;const e=JSON.parse(a);if(Object.keys(e).length===0)return;const t=window.thoughtform.workspace.getActiveEditor(),i=await window.thoughtform.workspace.getActiveGitClient();if(!t||!i){console.warn("[QueryLoader] Could not get active editor or git client for script execution.");return}for(const n in e){const s=await window.thoughtform.config.getExecutable("query",`${n}.js`,i);s?await se(s,t,i,null,e):console.warn(`[QueryLoader] No script found for query parameter: "${n}"`)}}const ts={},is=Object.freeze(Object.defineProperty({__proto__:null,default:ts},Symbol.toStringTag,{value:"Module"})),ns={".git/COMMIT_EDITMSG":"P2hhbmRzZnJlZSBwYXJhbSB0aGF0IGxldHMgeW91IHVzZSBoYW5kc2ZyZWUuanMgdmlhIHVybAo=",".git/HEAD":"cmVmOiByZWZzL2hlYWRzL21haW4K",".git/ORIG_HEAD":"ZjY1N2IwYTM2NzljM2RhNjlhZDhmMjM0ZDE0NzA4NmI5MThkNzBjZgo=",".git/config":"W2NvcmVdCglyZXBvc2l0b3J5Zm9ybWF0dmVyc2lvbiA9IDAKCWZpbGVtb2RlID0gdHJ1ZQoJYmFyZSA9IGZhbHNlCglsb2dhbGxyZWZ1cGRhdGVzID0gdHJ1ZQpbcmVtb3RlICJvcmlnaW4iXQoJdXJsID0gZ2l0QGdpdGh1Yi5jb206dGhvdWdodGZvcm1zL3NldHRpbmdzLmdpdAoJZmV0Y2ggPSArcmVmcy9oZWFkcy8qOnJlZnMvcmVtb3Rlcy9vcmlnaW4vKgpbYnJhbmNoICJtYWluIl0KCXJlbW90ZSA9IG9yaWdpbgoJbWVyZ2UgPSByZWZzL2hlYWRzL21haW4KW2h0dHBdCglyZWNlaXZlcGFjayA9IHRydWUKW3JlY2VpdmVdCglkZW55Q3VycmVudEJyYW5jaCA9IGlnbm9yZQo=",".git/description":"VW5uYW1lZCByZXBvc2l0b3J5OyBlZGl0IHRoaXMgZmlsZSAnZGVzY3JpcHRpb24nIHRvIG5hbWUgdGhlIHJlcG9zaXRvcnkuCg==",".git/hooks/applypatch-msg.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIGNoZWNrIHRoZSBjb21taXQgbG9nIG1lc3NhZ2UgdGFrZW4gYnkKIyBhcHBseXBhdGNoIGZyb20gYW4gZS1tYWlsIG1lc3NhZ2UuCiMKIyBUaGUgaG9vayBzaG91bGQgZXhpdCB3aXRoIG5vbi16ZXJvIHN0YXR1cyBhZnRlciBpc3N1aW5nIGFuCiMgYXBwcm9wcmlhdGUgbWVzc2FnZSBpZiBpdCB3YW50cyB0byBzdG9wIHRoZSBjb21taXQuICBUaGUgaG9vayBpcwojIGFsbG93ZWQgdG8gZWRpdCB0aGUgY29tbWl0IG1lc3NhZ2UgZmlsZS4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gImFwcGx5cGF0Y2gtbXNnIi4KCi4gZ2l0LXNoLXNldHVwCmNvbW1pdG1zZz0iJChnaXQgcmV2LXBhcnNlIC0tZ2l0LXBhdGggaG9va3MvY29tbWl0LW1zZykiCnRlc3QgLXggIiRjb21taXRtc2ciICYmIGV4ZWMgIiRjb21taXRtc2ciICR7MSsiJEAifQo6Cg==",".git/hooks/commit-msg.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIGNoZWNrIHRoZSBjb21taXQgbG9nIG1lc3NhZ2UuCiMgQ2FsbGVkIGJ5ICJnaXQgY29tbWl0IiB3aXRoIG9uZSBhcmd1bWVudCwgdGhlIG5hbWUgb2YgdGhlIGZpbGUKIyB0aGF0IGhhcyB0aGUgY29tbWl0IG1lc3NhZ2UuICBUaGUgaG9vayBzaG91bGQgZXhpdCB3aXRoIG5vbi16ZXJvCiMgc3RhdHVzIGFmdGVyIGlzc3VpbmcgYW4gYXBwcm9wcmlhdGUgbWVzc2FnZSBpZiBpdCB3YW50cyB0byBzdG9wIHRoZQojIGNvbW1pdC4gIFRoZSBob29rIGlzIGFsbG93ZWQgdG8gZWRpdCB0aGUgY29tbWl0IG1lc3NhZ2UgZmlsZS4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gImNvbW1pdC1tc2ciLgoKIyBVbmNvbW1lbnQgdGhlIGJlbG93IHRvIGFkZCBhIFNpZ25lZC1vZmYtYnkgbGluZSB0byB0aGUgbWVzc2FnZS4KIyBEb2luZyB0aGlzIGluIGEgaG9vayBpcyBhIGJhZCBpZGVhIGluIGdlbmVyYWwsIGJ1dCB0aGUgcHJlcGFyZS1jb21taXQtbXNnCiMgaG9vayBpcyBtb3JlIHN1aXRlZCB0byBpdC4KIwojIFNPQj0kKGdpdCB2YXIgR0lUX0FVVEhPUl9JREVOVCB8IHNlZCAtbiAncy9eXCguKj5cKS4qJC9TaWduZWQtb2ZmLWJ5OiBcMS9wJykKIyBncmVwIC1xcyAiXiRTT0IiICIkMSIgfHwgZWNobyAiJFNPQiIgPj4gIiQxIgoKIyBUaGlzIGV4YW1wbGUgY2F0Y2hlcyBkdXBsaWNhdGUgU2lnbmVkLW9mZi1ieSBsaW5lcy4KCnRlc3QgIiIgPSAiJChncmVwICdeU2lnbmVkLW9mZi1ieTogJyAiJDEiIHwKCSBzb3J0IHwgdW5pcSAtYyB8IHNlZCAtZSAnL15bIAldKjFbIAldL2QnKSIgfHwgewoJZWNobyA+JjIgRHVwbGljYXRlIFNpZ25lZC1vZmYtYnkgbGluZXMuCglleGl0IDEKfQo=",".git/hooks/fsmonitor-watchman.sample":"IyEvdXNyL2Jpbi9wZXJsCgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CnVzZSBJUEM6Ok9wZW4yOwoKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIGludGVncmF0ZSBXYXRjaG1hbgojIChodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby93YXRjaG1hbi8pIHdpdGggZ2l0IHRvIHNwZWVkIHVwIGRldGVjdGluZwojIG5ldyBhbmQgbW9kaWZpZWQgZmlsZXMuCiMKIyBUaGUgaG9vayBpcyBwYXNzZWQgYSB2ZXJzaW9uIChjdXJyZW50bHkgMikgYW5kIGxhc3QgdXBkYXRlIHRva2VuCiMgZm9ybWF0dGVkIGFzIGEgc3RyaW5nIGFuZCBvdXRwdXRzIHRvIHN0ZG91dCBhIG5ldyB1cGRhdGUgdG9rZW4gYW5kCiMgYWxsIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIG1vZGlmaWVkIHNpbmNlIHRoZSB1cGRhdGUgdG9rZW4uIFBhdGhzIG11c3QKIyBiZSByZWxhdGl2ZSB0byB0aGUgcm9vdCBvZiB0aGUgd29ya2luZyB0cmVlIGFuZCBzZXBhcmF0ZWQgYnkgYSBzaW5nbGUgTlVMLgojCiMgVG8gZW5hYmxlIHRoaXMgaG9vaywgcmVuYW1lIHRoaXMgZmlsZSB0byAicXVlcnktd2F0Y2htYW4iIGFuZCBzZXQKIyAnZ2l0IGNvbmZpZyBjb3JlLmZzbW9uaXRvciAuZ2l0L2hvb2tzL3F1ZXJ5LXdhdGNobWFuJwojCm15ICgkdmVyc2lvbiwgJGxhc3RfdXBkYXRlX3Rva2VuKSA9IEBBUkdWOwoKIyBVbmNvbW1lbnQgZm9yIGRlYnVnZ2luZwojIHByaW50IFNUREVSUiAiJDAgJHZlcnNpb24gJGxhc3RfdXBkYXRlX3Rva2VuXG4iOwoKIyBDaGVjayB0aGUgaG9vayBpbnRlcmZhY2UgdmVyc2lvbgppZiAoJHZlcnNpb24gbmUgMikgewoJZGllICJVbnN1cHBvcnRlZCBxdWVyeS1mc21vbml0b3IgaG9vayB2ZXJzaW9uICckdmVyc2lvbicuXG4iIC4KCSAgICAiRmFsbGluZyBiYWNrIHRvIHNjYW5uaW5nLi4uXG4iOwp9CgpteSAkZ2l0X3dvcmtfdHJlZSA9IGdldF93b3JraW5nX2RpcigpOwoKbXkgJHJldHJ5ID0gMTsKCm15ICRqc29uX3BrZzsKZXZhbCB7CglyZXF1aXJlIEpTT046OlhTOwoJJGpzb25fcGtnID0gIkpTT046OlhTIjsKCTE7Cn0gb3IgZG8gewoJcmVxdWlyZSBKU09OOjpQUDsKCSRqc29uX3BrZyA9ICJKU09OOjpQUCI7Cn07CgpsYXVuY2hfd2F0Y2htYW4oKTsKCnN1YiBsYXVuY2hfd2F0Y2htYW4gewoJbXkgJG8gPSB3YXRjaG1hbl9xdWVyeSgpOwoJaWYgKGlzX3dvcmtfdHJlZV93YXRjaGVkKCRvKSkgewoJCW91dHB1dF9yZXN1bHQoJG8tPntjbG9ja30sIEB7JG8tPntmaWxlc319KTsKCX0KfQoKc3ViIG91dHB1dF9yZXN1bHQgewoJbXkgKCRjbG9ja2lkLCBAZmlsZXMpID0gQF87CgoJIyBVbmNvbW1lbnQgZm9yIGRlYnVnZ2luZyB3YXRjaG1hbiBvdXRwdXQKCSMgb3BlbiAobXkgJGZoLCAiPiIsICIuZ2l0L3dhdGNobWFuLW91dHB1dC5vdXQiKTsKCSMgYmlubW9kZSAkZmgsICI6dXRmOCI7CgkjIHByaW50ICRmaCAiJGNsb2NraWRcbkBmaWxlc1xuIjsKCSMgY2xvc2UgJGZoOwoKCWJpbm1vZGUgU1RET1VULCAiOnV0ZjgiOwoJcHJpbnQgJGNsb2NraWQ7CglwcmludCAiXDAiOwoJbG9jYWwgJCwgPSAiXDAiOwoJcHJpbnQgQGZpbGVzOwp9CgpzdWIgd2F0Y2htYW5fY2xvY2sgewoJbXkgJHJlc3BvbnNlID0gcXgvd2F0Y2htYW4gY2xvY2sgIiRnaXRfd29ya190cmVlIi87CglkaWUgIkZhaWxlZCB0byBnZXQgY2xvY2sgaWQgb24gJyRnaXRfd29ya190cmVlJy5cbiIgLgoJCSJGYWxsaW5nIGJhY2sgdG8gc2Nhbm5pbmcuLi5cbiIgaWYgJD8gIT0gMDsKCglyZXR1cm4gJGpzb25fcGtnLT5uZXctPnV0ZjgtPmRlY29kZSgkcmVzcG9uc2UpOwp9CgpzdWIgd2F0Y2htYW5fcXVlcnkgewoJbXkgJHBpZCA9IG9wZW4yKFwqQ0hMRF9PVVQsIFwqQ0hMRF9JTiwgJ3dhdGNobWFuIC1qIC0tbm8tcHJldHR5JykKCW9yIGRpZSAib3BlbjIoKSBmYWlsZWQ6ICQhXG4iIC4KCSJGYWxsaW5nIGJhY2sgdG8gc2Nhbm5pbmcuLi5cbiI7CgoJIyBJbiB0aGUgcXVlcnkgZXhwcmVzc2lvbiBiZWxvdyB3ZSdyZSBhc2tpbmcgZm9yIG5hbWVzIG9mIGZpbGVzIHRoYXQKCSMgY2hhbmdlZCBzaW5jZSAkbGFzdF91cGRhdGVfdG9rZW4gYnV0IG5vdCBmcm9tIHRoZSAuZ2l0IGZvbGRlci4KCSMKCSMgVG8gYWNjb21wbGlzaCB0aGlzLCB3ZSdyZSB1c2luZyB0aGUgInNpbmNlIiBnZW5lcmF0b3IgdG8gdXNlIHRoZQoJIyByZWNlbmN5IGluZGV4IHRvIHNlbGVjdCBjYW5kaWRhdGUgbm9kZXMgYW5kICJmaWVsZHMiIHRvIGxpbWl0IHRoZQoJIyBvdXRwdXQgdG8gZmlsZSBuYW1lcyBvbmx5LiBUaGVuIHdlJ3JlIHVzaW5nIHRoZSAiZXhwcmVzc2lvbiIgdGVybSB0bwoJIyBmdXJ0aGVyIGNvbnN0cmFpbiB0aGUgcmVzdWx0cy4KCW15ICRsYXN0X3VwZGF0ZV9saW5lID0gIiI7CglpZiAoc3Vic3RyKCRsYXN0X3VwZGF0ZV90b2tlbiwgMCwgMSkgZXEgImMiKSB7CgkJJGxhc3RfdXBkYXRlX3Rva2VuID0gIlwiJGxhc3RfdXBkYXRlX3Rva2VuXCIiOwoJCSRsYXN0X3VwZGF0ZV9saW5lID0gcXFbXG4ic2luY2UiOiAkbGFzdF91cGRhdGVfdG9rZW4sXTsKCX0KCW15ICRxdWVyeSA9IDw8IglFTkQiOwoJCVsicXVlcnkiLCAiJGdpdF93b3JrX3RyZWUiLCB7JGxhc3RfdXBkYXRlX2xpbmUKCQkJImZpZWxkcyI6IFsibmFtZSJdLAoJCQkiZXhwcmVzc2lvbiI6IFsibm90IiwgWyJkaXJuYW1lIiwgIi5naXQiXV0KCQl9XQoJRU5ECgoJIyBVbmNvbW1lbnQgZm9yIGRlYnVnZ2luZyB0aGUgd2F0Y2htYW4gcXVlcnkKCSMgb3BlbiAobXkgJGZoLCAiPiIsICIuZ2l0L3dhdGNobWFuLXF1ZXJ5Lmpzb24iKTsKCSMgcHJpbnQgJGZoICRxdWVyeTsKCSMgY2xvc2UgJGZoOwoKCXByaW50IENITERfSU4gJHF1ZXJ5OwoJY2xvc2UgQ0hMRF9JTjsKCW15ICRyZXNwb25zZSA9IGRvIHtsb2NhbCAkLzsgPENITERfT1VUPn07CgoJIyBVbmNvbW1lbnQgZm9yIGRlYnVnZ2luZyB0aGUgd2F0Y2ggcmVzcG9uc2UKCSMgb3BlbiAoJGZoLCAiPiIsICIuZ2l0L3dhdGNobWFuLXJlc3BvbnNlLmpzb24iKTsKCSMgcHJpbnQgJGZoICRyZXNwb25zZTsKCSMgY2xvc2UgJGZoOwoKCWRpZSAiV2F0Y2htYW46IGNvbW1hbmQgcmV0dXJuZWQgbm8gb3V0cHV0LlxuIiAuCgkiRmFsbGluZyBiYWNrIHRvIHNjYW5uaW5nLi4uXG4iIGlmICRyZXNwb25zZSBlcSAiIjsKCWRpZSAiV2F0Y2htYW46IGNvbW1hbmQgcmV0dXJuZWQgaW52YWxpZCBvdXRwdXQ6ICRyZXNwb25zZVxuIiAuCgkiRmFsbGluZyBiYWNrIHRvIHNjYW5uaW5nLi4uXG4iIHVubGVzcyAkcmVzcG9uc2UgPX4gL15cey87CgoJcmV0dXJuICRqc29uX3BrZy0+bmV3LT51dGY4LT5kZWNvZGUoJHJlc3BvbnNlKTsKfQoKc3ViIGlzX3dvcmtfdHJlZV93YXRjaGVkIHsKCW15ICgkb3V0cHV0KSA9IEBfOwoJbXkgJGVycm9yID0gJG91dHB1dC0+e2Vycm9yfTsKCWlmICgkcmV0cnkgPiAwIGFuZCAkZXJyb3IgYW5kICRlcnJvciA9fiBtL3VuYWJsZSB0byByZXNvbHZlIHJvb3QgLiogZGlyZWN0b3J5ICguKikgaXMgbm90IHdhdGNoZWQvKSB7CgkJJHJldHJ5LS07CgkJbXkgJHJlc3BvbnNlID0gcXgvd2F0Y2htYW4gd2F0Y2ggIiRnaXRfd29ya190cmVlIi87CgkJZGllICJGYWlsZWQgdG8gbWFrZSB3YXRjaG1hbiB3YXRjaCAnJGdpdF93b3JrX3RyZWUnLlxuIiAuCgkJICAgICJGYWxsaW5nIGJhY2sgdG8gc2Nhbm5pbmcuLi5cbiIgaWYgJD8gIT0gMDsKCQkkb3V0cHV0ID0gJGpzb25fcGtnLT5uZXctPnV0ZjgtPmRlY29kZSgkcmVzcG9uc2UpOwoJCSRlcnJvciA9ICRvdXRwdXQtPntlcnJvcn07CgkJZGllICJXYXRjaG1hbjogJGVycm9yLlxuIiAuCgkJIkZhbGxpbmcgYmFjayB0byBzY2FubmluZy4uLlxuIiBpZiAkZXJyb3I7CgoJCSMgVW5jb21tZW50IGZvciBkZWJ1Z2dpbmcgd2F0Y2htYW4gb3V0cHV0CgkJIyBvcGVuIChteSAkZmgsICI+IiwgIi5naXQvd2F0Y2htYW4tb3V0cHV0Lm91dCIpOwoJCSMgY2xvc2UgJGZoOwoKCQkjIFdhdGNobWFuIHdpbGwgYWx3YXlzIHJldHVybiBhbGwgZmlsZXMgb24gdGhlIGZpcnN0IHF1ZXJ5IHNvCgkJIyByZXR1cm4gdGhlIGZhc3QgImV2ZXJ5dGhpbmcgaXMgZGlydHkiIGZsYWcgdG8gZ2l0IGFuZCBkbyB0aGUKCQkjIFdhdGNobWFuIHF1ZXJ5IGp1c3QgdG8gZ2V0IGl0IG92ZXIgd2l0aCBub3cgc28gd2Ugd29uJ3QgcGF5CgkJIyB0aGUgY29zdCBpbiBnaXQgdG8gbG9vayB1cCBlYWNoIGluZGl2aWR1YWwgZmlsZS4KCQlteSAkbyA9IHdhdGNobWFuX2Nsb2NrKCk7CgkJJGVycm9yID0gJG91dHB1dC0+e2Vycm9yfTsKCgkJZGllICJXYXRjaG1hbjogJGVycm9yLlxuIiAuCgkJIkZhbGxpbmcgYmFjayB0byBzY2FubmluZy4uLlxuIiBpZiAkZXJyb3I7CgoJCW91dHB1dF9yZXN1bHQoJG8tPntjbG9ja30sICgiLyIpKTsKCQkkbGFzdF91cGRhdGVfdG9rZW4gPSAkby0+e2Nsb2NrfTsKCgkJZXZhbCB7IGxhdW5jaF93YXRjaG1hbigpIH07CgkJcmV0dXJuIDA7Cgl9CgoJZGllICJXYXRjaG1hbjogJGVycm9yLlxuIiAuCgkiRmFsbGluZyBiYWNrIHRvIHNjYW5uaW5nLi4uXG4iIGlmICRlcnJvcjsKCglyZXR1cm4gMTsKfQoKc3ViIGdldF93b3JraW5nX2RpciB7CglteSAkd29ya2luZ19kaXI7CglpZiAoJF5PID1+ICdtc3lzJyB8fCAkXk8gPX4gJ2N5Z3dpbicpIHsKCQkkd29ya2luZ19kaXIgPSBXaW4zMjo6R2V0Q3dkKCk7CgkJJHdvcmtpbmdfZGlyID1+IHRyL1xcL1wvLzsKCX0gZWxzZSB7CgkJcmVxdWlyZSBDd2Q7CgkJJHdvcmtpbmdfZGlyID0gQ3dkOjpjd2QoKTsKCX0KCglyZXR1cm4gJHdvcmtpbmdfZGlyOwp9Cg==",".git/hooks/post-update.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHByZXBhcmUgYSBwYWNrZWQgcmVwb3NpdG9yeSBmb3IgdXNlIG92ZXIKIyBkdW1iIHRyYW5zcG9ydHMuCiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJwb3N0LXVwZGF0ZSIuCgpleGVjIGdpdCB1cGRhdGUtc2VydmVyLWluZm8K",".git/hooks/pre-applypatch.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHZlcmlmeSB3aGF0IGlzIGFib3V0IHRvIGJlIGNvbW1pdHRlZAojIGJ5IGFwcGx5cGF0Y2ggZnJvbSBhbiBlLW1haWwgbWVzc2FnZS4KIwojIFRoZSBob29rIHNob3VsZCBleGl0IHdpdGggbm9uLXplcm8gc3RhdHVzIGFmdGVyIGlzc3VpbmcgYW4KIyBhcHByb3ByaWF0ZSBtZXNzYWdlIGlmIGl0IHdhbnRzIHRvIHN0b3AgdGhlIGNvbW1pdC4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gInByZS1hcHBseXBhdGNoIi4KCi4gZ2l0LXNoLXNldHVwCnByZWNvbW1pdD0iJChnaXQgcmV2LXBhcnNlIC0tZ2l0LXBhdGggaG9va3MvcHJlLWNvbW1pdCkiCnRlc3QgLXggIiRwcmVjb21taXQiICYmIGV4ZWMgIiRwcmVjb21taXQiICR7MSsiJEAifQo6Cg==",".git/hooks/pre-commit.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHZlcmlmeSB3aGF0IGlzIGFib3V0IHRvIGJlIGNvbW1pdHRlZC4KIyBDYWxsZWQgYnkgImdpdCBjb21taXQiIHdpdGggbm8gYXJndW1lbnRzLiAgVGhlIGhvb2sgc2hvdWxkCiMgZXhpdCB3aXRoIG5vbi16ZXJvIHN0YXR1cyBhZnRlciBpc3N1aW5nIGFuIGFwcHJvcHJpYXRlIG1lc3NhZ2UgaWYKIyBpdCB3YW50cyB0byBzdG9wIHRoZSBjb21taXQuCiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJwcmUtY29tbWl0Ii4KCmlmIGdpdCByZXYtcGFyc2UgLS12ZXJpZnkgSEVBRCA+L2Rldi9udWxsIDI+JjEKdGhlbgoJYWdhaW5zdD1IRUFECmVsc2UKCSMgSW5pdGlhbCBjb21taXQ6IGRpZmYgYWdhaW5zdCBhbiBlbXB0eSB0cmVlIG9iamVjdAoJYWdhaW5zdD0kKGdpdCBoYXNoLW9iamVjdCAtdCB0cmVlIC9kZXYvbnVsbCkKZmkKCiMgSWYgeW91IHdhbnQgdG8gYWxsb3cgbm9uLUFTQ0lJIGZpbGVuYW1lcyBzZXQgdGhpcyB2YXJpYWJsZSB0byB0cnVlLgphbGxvd25vbmFzY2lpPSQoZ2l0IGNvbmZpZyAtLXR5cGU9Ym9vbCBob29rcy5hbGxvd25vbmFzY2lpKQoKIyBSZWRpcmVjdCBvdXRwdXQgdG8gc3RkZXJyLgpleGVjIDE+JjIKCiMgQ3Jvc3MgcGxhdGZvcm0gcHJvamVjdHMgdGVuZCB0byBhdm9pZCBub24tQVNDSUkgZmlsZW5hbWVzOyBwcmV2ZW50CiMgdGhlbSBmcm9tIGJlaW5nIGFkZGVkIHRvIHRoZSByZXBvc2l0b3J5LiBXZSBleHBsb2l0IHRoZSBmYWN0IHRoYXQgdGhlCiMgcHJpbnRhYmxlIHJhbmdlIHN0YXJ0cyBhdCB0aGUgc3BhY2UgY2hhcmFjdGVyIGFuZCBlbmRzIHdpdGggdGlsZGUuCmlmIFsgIiRhbGxvd25vbmFzY2lpIiAhPSAidHJ1ZSIgXSAmJgoJIyBOb3RlIHRoYXQgdGhlIHVzZSBvZiBicmFja2V0cyBhcm91bmQgYSB0ciByYW5nZSBpcyBvayBoZXJlLCAoaXQncwoJIyBldmVuIHJlcXVpcmVkLCBmb3IgcG9ydGFiaWxpdHkgdG8gU29sYXJpcyAxMCdzIC91c3IvYmluL3RyKSwgc2luY2UKCSMgdGhlIHNxdWFyZSBicmFja2V0IGJ5dGVzIGhhcHBlbiB0byBmYWxsIGluIHRoZSBkZXNpZ25hdGVkIHJhbmdlLgoJdGVzdCAkKGdpdCBkaWZmIC0tY2FjaGVkIC0tbmFtZS1vbmx5IC0tZGlmZi1maWx0ZXI9QSAteiAkYWdhaW5zdCB8CgkgIExDX0FMTD1DIHRyIC1kICdbIC1+XVwwJyB8IHdjIC1jKSAhPSAwCnRoZW4KCWNhdCA8PFxFT0YKRXJyb3I6IEF0dGVtcHQgdG8gYWRkIGEgbm9uLUFTQ0lJIGZpbGUgbmFtZS4KClRoaXMgY2FuIGNhdXNlIHByb2JsZW1zIGlmIHlvdSB3YW50IHRvIHdvcmsgd2l0aCBwZW9wbGUgb24gb3RoZXIgcGxhdGZvcm1zLgoKVG8gYmUgcG9ydGFibGUgaXQgaXMgYWR2aXNhYmxlIHRvIHJlbmFtZSB0aGUgZmlsZS4KCklmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZyB5b3UgY2FuIGRpc2FibGUgdGhpcyBjaGVjayB1c2luZzoKCiAgZ2l0IGNvbmZpZyBob29rcy5hbGxvd25vbmFzY2lpIHRydWUKRU9GCglleGl0IDEKZmkKCiMgSWYgdGhlcmUgYXJlIHdoaXRlc3BhY2UgZXJyb3JzLCBwcmludCB0aGUgb2ZmZW5kaW5nIGZpbGUgbmFtZXMgYW5kIGZhaWwuCmV4ZWMgZ2l0IGRpZmYtaW5kZXggLS1jaGVjayAtLWNhY2hlZCAkYWdhaW5zdCAtLQo=",".git/hooks/pre-merge-commit.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHZlcmlmeSB3aGF0IGlzIGFib3V0IHRvIGJlIGNvbW1pdHRlZC4KIyBDYWxsZWQgYnkgImdpdCBtZXJnZSIgd2l0aCBubyBhcmd1bWVudHMuICBUaGUgaG9vayBzaG91bGQKIyBleGl0IHdpdGggbm9uLXplcm8gc3RhdHVzIGFmdGVyIGlzc3VpbmcgYW4gYXBwcm9wcmlhdGUgbWVzc2FnZSB0bwojIHN0ZGVyciBpZiBpdCB3YW50cyB0byBzdG9wIHRoZSBtZXJnZSBjb21taXQuCiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJwcmUtbWVyZ2UtY29tbWl0Ii4KCi4gZ2l0LXNoLXNldHVwCnRlc3QgLXggIiRHSVRfRElSL2hvb2tzL3ByZS1jb21taXQiICYmCiAgICAgICAgZXhlYyAiJEdJVF9ESVIvaG9va3MvcHJlLWNvbW1pdCIKOgo=",".git/hooks/pre-push.sample":"IyEvYmluL3NoCgojIEFuIGV4YW1wbGUgaG9vayBzY3JpcHQgdG8gdmVyaWZ5IHdoYXQgaXMgYWJvdXQgdG8gYmUgcHVzaGVkLiAgQ2FsbGVkIGJ5ICJnaXQKIyBwdXNoIiBhZnRlciBpdCBoYXMgY2hlY2tlZCB0aGUgcmVtb3RlIHN0YXR1cywgYnV0IGJlZm9yZSBhbnl0aGluZyBoYXMgYmVlbgojIHB1c2hlZC4gIElmIHRoaXMgc2NyaXB0IGV4aXRzIHdpdGggYSBub24temVybyBzdGF0dXMgbm90aGluZyB3aWxsIGJlIHB1c2hlZC4KIwojIFRoaXMgaG9vayBpcyBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6CiMKIyAkMSAtLSBOYW1lIG9mIHRoZSByZW1vdGUgdG8gd2hpY2ggdGhlIHB1c2ggaXMgYmVpbmcgZG9uZQojICQyIC0tIFVSTCB0byB3aGljaCB0aGUgcHVzaCBpcyBiZWluZyBkb25lCiMKIyBJZiBwdXNoaW5nIHdpdGhvdXQgdXNpbmcgYSBuYW1lZCByZW1vdGUgdGhvc2UgYXJndW1lbnRzIHdpbGwgYmUgZXF1YWwuCiMKIyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY29tbWl0cyB3aGljaCBhcmUgYmVpbmcgcHVzaGVkIGlzIHN1cHBsaWVkIGFzIGxpbmVzIHRvCiMgdGhlIHN0YW5kYXJkIGlucHV0IGluIHRoZSBmb3JtOgojCiMgICA8bG9jYWwgcmVmPiA8bG9jYWwgb2lkPiA8cmVtb3RlIHJlZj4gPHJlbW90ZSBvaWQ+CiMKIyBUaGlzIHNhbXBsZSBzaG93cyBob3cgdG8gcHJldmVudCBwdXNoIG9mIGNvbW1pdHMgd2hlcmUgdGhlIGxvZyBtZXNzYWdlIHN0YXJ0cwojIHdpdGggIldJUCIgKHdvcmsgaW4gcHJvZ3Jlc3MpLgoKcmVtb3RlPSIkMSIKdXJsPSIkMiIKCnplcm89JChnaXQgaGFzaC1vYmplY3QgLS1zdGRpbiA8L2Rldi9udWxsIHwgdHIgJ1swLTlhLWZdJyAnMCcpCgp3aGlsZSByZWFkIGxvY2FsX3JlZiBsb2NhbF9vaWQgcmVtb3RlX3JlZiByZW1vdGVfb2lkCmRvCglpZiB0ZXN0ICIkbG9jYWxfb2lkIiA9ICIkemVybyIKCXRoZW4KCQkjIEhhbmRsZSBkZWxldGUKCQk6CgllbHNlCgkJaWYgdGVzdCAiJHJlbW90ZV9vaWQiID0gIiR6ZXJvIgoJCXRoZW4KCQkJIyBOZXcgYnJhbmNoLCBleGFtaW5lIGFsbCBjb21taXRzCgkJCXJhbmdlPSIkbG9jYWxfb2lkIgoJCWVsc2UKCQkJIyBVcGRhdGUgdG8gZXhpc3RpbmcgYnJhbmNoLCBleGFtaW5lIG5ldyBjb21taXRzCgkJCXJhbmdlPSIkcmVtb3RlX29pZC4uJGxvY2FsX29pZCIKCQlmaQoKCQkjIENoZWNrIGZvciBXSVAgY29tbWl0CgkJY29tbWl0PSQoZ2l0IHJldi1saXN0IC1uIDEgLS1ncmVwICdeV0lQJyAiJHJhbmdlIikKCQlpZiB0ZXN0IC1uICIkY29tbWl0IgoJCXRoZW4KCQkJZWNobyA+JjIgIkZvdW5kIFdJUCBjb21taXQgaW4gJGxvY2FsX3JlZiwgbm90IHB1c2hpbmciCgkJCWV4aXQgMQoJCWZpCglmaQpkb25lCgpleGl0IDAK",".git/hooks/pre-rebase.sample":"IyEvYmluL3NoCiMKIyBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMDggSnVuaW8gQyBIYW1hbm8KIwojIFRoZSAicHJlLXJlYmFzZSIgaG9vayBpcyBydW4ganVzdCBiZWZvcmUgImdpdCByZWJhc2UiIHN0YXJ0cyBkb2luZwojIGl0cyBqb2IsIGFuZCBjYW4gcHJldmVudCB0aGUgY29tbWFuZCBmcm9tIHJ1bm5pbmcgYnkgZXhpdGluZyB3aXRoCiMgbm9uLXplcm8gc3RhdHVzLgojCiMgVGhlIGhvb2sgaXMgY2FsbGVkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOgojCiMgJDEgLS0gdGhlIHVwc3RyZWFtIHRoZSBzZXJpZXMgd2FzIGZvcmtlZCBmcm9tLgojICQyIC0tIHRoZSBicmFuY2ggYmVpbmcgcmViYXNlZCAob3IgZW1wdHkgd2hlbiByZWJhc2luZyB0aGUgY3VycmVudCBicmFuY2gpLgojCiMgVGhpcyBzYW1wbGUgc2hvd3MgaG93IHRvIHByZXZlbnQgdG9waWMgYnJhbmNoZXMgdGhhdCBhcmUgYWxyZWFkeQojIG1lcmdlZCB0byAnbmV4dCcgYnJhbmNoIGZyb20gZ2V0dGluZyByZWJhc2VkLCBiZWNhdXNlIGFsbG93aW5nIGl0CiMgd291bGQgcmVzdWx0IGluIHJlYmFzaW5nIGFscmVhZHkgcHVibGlzaGVkIGhpc3RvcnkuCgpwdWJsaXNoPW5leHQKYmFzZWJyYW5jaD0iJDEiCmlmIHRlc3QgIiQjIiA9IDIKdGhlbgoJdG9waWM9InJlZnMvaGVhZHMvJDIiCmVsc2UKCXRvcGljPWBnaXQgc3ltYm9saWMtcmVmIEhFQURgIHx8CglleGl0IDAgOyMgd2UgZG8gbm90IGludGVycnVwdCByZWJhc2luZyBkZXRhY2hlZCBIRUFECmZpCgpjYXNlICIkdG9waWMiIGluCnJlZnMvaGVhZHMvPz8vKikKCTs7CiopCglleGl0IDAgOyMgd2UgZG8gbm90IGludGVycnVwdCBvdGhlcnMuCgk7Owplc2FjCgojIE5vdyB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgdG9waWMgYnJhbmNoIGJlaW5nIHJlYmFzZWQKIyBvbiB0b3Agb2YgbWFzdGVyLiAgSXMgaXQgT0sgdG8gcmViYXNlIGl0PwoKIyBEb2VzIHRoZSB0b3BpYyByZWFsbHkgZXhpc3Q/CmdpdCBzaG93LXJlZiAtcSAiJHRvcGljIiB8fCB7CgllY2hvID4mMiAiTm8gc3VjaCBicmFuY2ggJHRvcGljIgoJZXhpdCAxCn0KCiMgSXMgdG9waWMgZnVsbHkgbWVyZ2VkIHRvIG1hc3Rlcj8Kbm90X2luX21hc3Rlcj1gZ2l0IHJldi1saXN0IC0tcHJldHR5PW9uZWxpbmUgXm1hc3RlciAiJHRvcGljImAKaWYgdGVzdCAteiAiJG5vdF9pbl9tYXN0ZXIiCnRoZW4KCWVjaG8gPiYyICIkdG9waWMgaXMgZnVsbHkgbWVyZ2VkIHRvIG1hc3RlcjsgYmV0dGVyIHJlbW92ZSBpdC4iCglleGl0IDEgOyMgd2UgY291bGQgYWxsb3cgaXQsIGJ1dCB0aGVyZSBpcyBubyBwb2ludC4KZmkKCiMgSXMgdG9waWMgZXZlciBtZXJnZWQgdG8gbmV4dD8gIElmIHNvIHlvdSBzaG91bGQgbm90IGJlIHJlYmFzaW5nIGl0Lgpvbmx5X25leHRfMT1gZ2l0IHJldi1saXN0IF5tYXN0ZXIgIl4kdG9waWMiICR7cHVibGlzaH0gfCBzb3J0YApvbmx5X25leHRfMj1gZ2l0IHJldi1saXN0IF5tYXN0ZXIgICAgICAgICAgICR7cHVibGlzaH0gfCBzb3J0YAppZiB0ZXN0ICIkb25seV9uZXh0XzEiID0gIiRvbmx5X25leHRfMiIKdGhlbgoJbm90X2luX3RvcGljPWBnaXQgcmV2LWxpc3QgIl4kdG9waWMiIG1hc3RlcmAKCWlmIHRlc3QgLXogIiRub3RfaW5fdG9waWMiCgl0aGVuCgkJZWNobyA+JjIgIiR0b3BpYyBpcyBhbHJlYWR5IHVwIHRvIGRhdGUgd2l0aCBtYXN0ZXIiCgkJZXhpdCAxIDsjIHdlIGNvdWxkIGFsbG93IGl0LCBidXQgdGhlcmUgaXMgbm8gcG9pbnQuCgllbHNlCgkJZXhpdCAwCglmaQplbHNlCglub3RfaW5fbmV4dD1gZ2l0IHJldi1saXN0IC0tcHJldHR5PW9uZWxpbmUgXiR7cHVibGlzaH0gIiR0b3BpYyJgCgkvdXNyL2Jpbi9wZXJsIC1lICcKCQlteSAkdG9waWMgPSAkQVJHVlswXTsKCQlteSAkbXNnID0gIiogJHRvcGljIGhhcyBjb21taXRzIGFscmVhZHkgbWVyZ2VkIHRvIHB1YmxpYyBicmFuY2g6XG4iOwoJCW15ICglbm90X2luX25leHQpID0gbWFwIHsKCQkJL14oWzAtOWEtZl0rKSAvOwoJCQkoJDEgPT4gMSk7CgkJfSBzcGxpdCgvXG4vLCAkQVJHVlsxXSk7CgkJZm9yIG15ICRlbGVtIChtYXAgewoJCQkJL14oWzAtOWEtZl0rKSAoLiopJC87CgkJCQlbJDEgPT4gJDJdOwoJCQl9IHNwbGl0KC9cbi8sICRBUkdWWzJdKSkgewoJCQlpZiAoIWV4aXN0cyAkbm90X2luX25leHR7JGVsZW0tPlswXX0pIHsKCQkJCWlmICgkbXNnKSB7CgkJCQkJcHJpbnQgU1RERVJSICRtc2c7CgkJCQkJdW5kZWYgJG1zZzsKCQkJCX0KCQkJCXByaW50IFNUREVSUiAiICRlbGVtLT5bMV1cbiI7CgkJCX0KCQl9CgknICIkdG9waWMiICIkbm90X2luX25leHQiICIkbm90X2luX21hc3RlciIKCWV4aXQgMQpmaQoKPDxcRE9DX0VORAoKVGhpcyBzYW1wbGUgaG9vayBzYWZlZ3VhcmRzIHRvcGljIGJyYW5jaGVzIHRoYXQgaGF2ZSBiZWVuCnB1Ymxpc2hlZCBmcm9tIGJlaW5nIHJld291bmQuCgpUaGUgd29ya2Zsb3cgYXNzdW1lZCBoZXJlIGlzOgoKICogT25jZSBhIHRvcGljIGJyYW5jaCBmb3JrcyBmcm9tICJtYXN0ZXIiLCAibWFzdGVyIiBpcyBuZXZlcgogICBtZXJnZWQgaW50byBpdCBhZ2FpbiAoZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkpLgoKICogT25jZSBhIHRvcGljIGJyYW5jaCBpcyBmdWxseSBjb29rZWQgYW5kIG1lcmdlZCBpbnRvICJtYXN0ZXIiLAogICBpdCBpcyBkZWxldGVkLiAgSWYgeW91IG5lZWQgdG8gYnVpbGQgb24gdG9wIG9mIGl0IHRvIGNvcnJlY3QKICAgZWFybGllciBtaXN0YWtlcywgYSBuZXcgdG9waWMgYnJhbmNoIGlzIGNyZWF0ZWQgYnkgZm9ya2luZyBhdAogICB0aGUgdGlwIG9mIHRoZSAibWFzdGVyIi4gIFRoaXMgaXMgbm90IHN0cmljdGx5IG5lY2Vzc2FyeSwgYnV0CiAgIGl0IG1ha2VzIGl0IGVhc2llciB0byBrZWVwIHlvdXIgaGlzdG9yeSBzaW1wbGUuCgogKiBXaGVuZXZlciB5b3UgbmVlZCB0byB0ZXN0IG9yIHB1Ymxpc2ggeW91ciBjaGFuZ2VzIHRvIHRvcGljCiAgIGJyYW5jaGVzLCBtZXJnZSB0aGVtIGludG8gIm5leHQiIGJyYW5jaC4KClRoZSBzY3JpcHQsIGJlaW5nIGFuIGV4YW1wbGUsIGhhcmRjb2RlcyB0aGUgcHVibGlzaCBicmFuY2ggbmFtZQp0byBiZSAibmV4dCIsIGJ1dCBpdCBpcyB0cml2aWFsIHRvIG1ha2UgaXQgY29uZmlndXJhYmxlIHZpYQokR0lUX0RJUi9jb25maWcgbWVjaGFuaXNtLgoKV2l0aCB0aGlzIHdvcmtmbG93LCB5b3Ugd291bGQgd2FudCB0byBrbm93OgoKKDEpIC4uLiBpZiBhIHRvcGljIGJyYW5jaCBoYXMgZXZlciBiZWVuIG1lcmdlZCB0byAibmV4dCIuICBZb3VuZwogICAgdG9waWMgYnJhbmNoZXMgY2FuIGhhdmUgc3R1cGlkIG1pc3Rha2VzIHlvdSB3b3VsZCByYXRoZXIKICAgIGNsZWFuIHVwIGJlZm9yZSBwdWJsaXNoaW5nLCBhbmQgdGhpbmdzIHRoYXQgaGF2ZSBub3QgYmVlbgogICAgbWVyZ2VkIGludG8gb3RoZXIgYnJhbmNoZXMgY2FuIGJlIGVhc2lseSByZWJhc2VkIHdpdGhvdXQKICAgIGFmZmVjdGluZyBvdGhlciBwZW9wbGUuICBCdXQgb25jZSBpdCBpcyBwdWJsaXNoZWQsIHlvdSB3b3VsZAogICAgbm90IHdhbnQgdG8gcmV3aW5kIGl0LgoKKDIpIC4uLiBpZiBhIHRvcGljIGJyYW5jaCBoYXMgYmVlbiBmdWxseSBtZXJnZWQgdG8gIm1hc3RlciIuCiAgICBUaGVuIHlvdSBjYW4gZGVsZXRlIGl0LiAgTW9yZSBpbXBvcnRhbnRseSwgeW91IHNob3VsZCBub3QKICAgIGJ1aWxkIG9uIHRvcCBvZiBpdCAtLSBvdGhlciBwZW9wbGUgbWF5IGFscmVhZHkgd2FudCB0bwogICAgY2hhbmdlIHRoaW5ncyByZWxhdGVkIHRvIHRoZSB0b3BpYyBhcyBwYXRjaGVzIGFnYWluc3QgeW91cgogICAgIm1hc3RlciIsIHNvIGlmIHlvdSBuZWVkIGZ1cnRoZXIgY2hhbmdlcywgaXQgaXMgYmV0dGVyIHRvCiAgICBmb3JrIHRoZSB0b3BpYyAocGVyaGFwcyB3aXRoIHRoZSBzYW1lIG5hbWUpIGFmcmVzaCBmcm9tIHRoZQogICAgdGlwIG9mICJtYXN0ZXIiLgoKTGV0J3MgbG9vayBhdCB0aGlzIGV4YW1wbGU6CgoJCSAgIG8tLS1vLS0tby0tLW8tLS1vLS0tby0tLW8tLS1vLS0tby0tLW8gIm5leHQiCgkJICAvICAgICAgIC8gICAgICAgICAgIC8gICAgICAgICAgIC8KCQkgLyAgIGEtLS1hLS0tYiBBICAgICAvICAgICAgICAgICAvCgkJLyAgIC8gICAgICAgICAgICAgICAvICAgICAgICAgICAvCgkgICAgICAgLyAgIC8gICBjLS0tYy0tLWMtLS1jIEIgICAgICAgICAvCgkgICAgICAvICAgLyAgIC8gICAgICAgICAgICAgXCAgICAgICAgIC8KCSAgICAgLyAgIC8gICAvICAgYi0tLWIgQyAgICAgXCAgICAgICAvCgkgICAgLyAgIC8gICAvICAgLyAgICAgICAgICAgICBcICAgICAvCiAgICAtLS1vLS0tby0tLW8tLS1vLS0tby0tLW8tLS1vLS0tby0tLW8tLS1vLS0tbyAibWFzdGVyIgoKCkEsIEIgYW5kIEMgYXJlIHRvcGljIGJyYW5jaGVzLgoKICogQSBoYXMgb25lIGZpeCBzaW5jZSBpdCB3YXMgbWVyZ2VkIHVwIHRvICJuZXh0Ii4KCiAqIEIgaGFzIGZpbmlzaGVkLiAgSXQgaGFzIGJlZW4gZnVsbHkgbWVyZ2VkIHVwIHRvICJtYXN0ZXIiIGFuZCAibmV4dCIsCiAgIGFuZCBpcyByZWFkeSB0byBiZSBkZWxldGVkLgoKICogQyBoYXMgbm90IG1lcmdlZCB0byAibmV4dCIgYXQgYWxsLgoKV2Ugd291bGQgd2FudCB0byBhbGxvdyBDIHRvIGJlIHJlYmFzZWQsIHJlZnVzZSBBLCBhbmQgZW5jb3VyYWdlCkIgdG8gYmUgZGVsZXRlZC4KClRvIGNvbXB1dGUgKDEpOgoKCWdpdCByZXYtbGlzdCBebWFzdGVyIF50b3BpYyBuZXh0CglnaXQgcmV2LWxpc3QgXm1hc3RlciAgICAgICAgbmV4dAoKCWlmIHRoZXNlIG1hdGNoLCB0b3BpYyBoYXMgbm90IG1lcmdlZCBpbiBuZXh0IGF0IGFsbC4KClRvIGNvbXB1dGUgKDIpOgoKCWdpdCByZXYtbGlzdCBtYXN0ZXIuLnRvcGljCgoJaWYgdGhpcyBpcyBlbXB0eSwgaXQgaXMgZnVsbHkgbWVyZ2VkIHRvICJtYXN0ZXIiLgoKRE9DX0VORAo=",".git/hooks/pre-receive.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIG1ha2UgdXNlIG9mIHB1c2ggb3B0aW9ucy4KIyBUaGUgZXhhbXBsZSBzaW1wbHkgZWNob2VzIGFsbCBwdXNoIG9wdGlvbnMgdGhhdCBzdGFydCB3aXRoICdlY2hvYmFjaz0nCiMgYW5kIHJlamVjdHMgYWxsIHB1c2hlcyB3aGVuIHRoZSAicmVqZWN0IiBwdXNoIG9wdGlvbiBpcyB1c2VkLgojCiMgVG8gZW5hYmxlIHRoaXMgaG9vaywgcmVuYW1lIHRoaXMgZmlsZSB0byAicHJlLXJlY2VpdmUiLgoKaWYgdGVzdCAtbiAiJEdJVF9QVVNIX09QVElPTl9DT1VOVCIKdGhlbgoJaT0wCgl3aGlsZSB0ZXN0ICIkaSIgLWx0ICIkR0lUX1BVU0hfT1BUSU9OX0NPVU5UIgoJZG8KCQlldmFsICJ2YWx1ZT1cJEdJVF9QVVNIX09QVElPTl8kaSIKCQljYXNlICIkdmFsdWUiIGluCgkJZWNob2JhY2s9KikKCQkJZWNobyAiZWNobyBmcm9tIHRoZSBwcmUtcmVjZWl2ZS1ob29rOiAke3ZhbHVlIyo9fSIgPiYyCgkJCTs7CgkJcmVqZWN0KQoJCQlleGl0IDEKCQllc2FjCgkJaT0kKChpICsgMSkpCglkb25lCmZpCg==",".git/hooks/prepare-commit-msg.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHByZXBhcmUgdGhlIGNvbW1pdCBsb2cgbWVzc2FnZS4KIyBDYWxsZWQgYnkgImdpdCBjb21taXQiIHdpdGggdGhlIG5hbWUgb2YgdGhlIGZpbGUgdGhhdCBoYXMgdGhlCiMgY29tbWl0IG1lc3NhZ2UsIGZvbGxvd2VkIGJ5IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY29tbWl0CiMgbWVzc2FnZSdzIHNvdXJjZS4gIFRoZSBob29rJ3MgcHVycG9zZSBpcyB0byBlZGl0IHRoZSBjb21taXQKIyBtZXNzYWdlIGZpbGUuICBJZiB0aGUgaG9vayBmYWlscyB3aXRoIGEgbm9uLXplcm8gc3RhdHVzLAojIHRoZSBjb21taXQgaXMgYWJvcnRlZC4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gInByZXBhcmUtY29tbWl0LW1zZyIuCgojIFRoaXMgaG9vayBpbmNsdWRlcyB0aHJlZSBleGFtcGxlcy4gVGhlIGZpcnN0IG9uZSByZW1vdmVzIHRoZQojICIjIFBsZWFzZSBlbnRlciB0aGUgY29tbWl0IG1lc3NhZ2UuLi4iIGhlbHAgbWVzc2FnZS4KIwojIFRoZSBzZWNvbmQgaW5jbHVkZXMgdGhlIG91dHB1dCBvZiAiZ2l0IGRpZmYgLS1uYW1lLXN0YXR1cyAtciIKIyBpbnRvIHRoZSBtZXNzYWdlLCBqdXN0IGJlZm9yZSB0aGUgImdpdCBzdGF0dXMiIG91dHB1dC4gIEl0IGlzCiMgY29tbWVudGVkIGJlY2F1c2UgaXQgZG9lc24ndCBjb3BlIHdpdGggLS1hbWVuZCBvciB3aXRoIHNxdWFzaGVkCiMgY29tbWl0cy4KIwojIFRoZSB0aGlyZCBleGFtcGxlIGFkZHMgYSBTaWduZWQtb2ZmLWJ5IGxpbmUgdG8gdGhlIG1lc3NhZ2UsIHRoYXQgY2FuCiMgc3RpbGwgYmUgZWRpdGVkLiAgVGhpcyBpcyByYXJlbHkgYSBnb29kIGlkZWEuCgpDT01NSVRfTVNHX0ZJTEU9JDEKQ09NTUlUX1NPVVJDRT0kMgpTSEExPSQzCgovdXNyL2Jpbi9wZXJsIC1pLmJhayAtbmUgJ3ByaW50IHVubGVzcyhtL14uIFBsZWFzZSBlbnRlciB0aGUgY29tbWl0IG1lc3NhZ2UvLi5tL14jJC8pJyAiJENPTU1JVF9NU0dfRklMRSIKCiMgY2FzZSAiJENPTU1JVF9TT1VSQ0UsJFNIQTEiIGluCiMgICx8dGVtcGxhdGUsKQojICAgIC91c3IvYmluL3BlcmwgLWkuYmFrIC1wZSAnCiMgICAgICAgcHJpbnQgIlxuIiAuIGBnaXQgZGlmZiAtLWNhY2hlZCAtLW5hbWUtc3RhdHVzIC1yYAojIAkgaWYgL14jLyAmJiAkZmlyc3QrKyA9PSAwJyAiJENPTU1JVF9NU0dfRklMRSIgOzsKIyAgKikgOzsKIyBlc2FjCgojIFNPQj0kKGdpdCB2YXIgR0lUX0NPTU1JVFRFUl9JREVOVCB8IHNlZCAtbiAncy9eXCguKj5cKS4qJC9TaWduZWQtb2ZmLWJ5OiBcMS9wJykKIyBnaXQgaW50ZXJwcmV0LXRyYWlsZXJzIC0taW4tcGxhY2UgLS10cmFpbGVyICIkU09CIiAiJENPTU1JVF9NU0dfRklMRSIKIyBpZiB0ZXN0IC16ICIkQ09NTUlUX1NPVVJDRSIKIyB0aGVuCiMgICAvdXNyL2Jpbi9wZXJsIC1pLmJhayAtcGUgJ3ByaW50ICJcbiIgaWYgISRmaXJzdF9saW5lKysnICIkQ09NTUlUX01TR19GSUxFIgojIGZpCg==",".git/hooks/push-to-checkout.sample":"IyEvYmluL3NoCgojIEFuIGV4YW1wbGUgaG9vayBzY3JpcHQgdG8gdXBkYXRlIGEgY2hlY2tlZC1vdXQgdHJlZSBvbiBhIGdpdCBwdXNoLgojCiMgVGhpcyBob29rIGlzIGludm9rZWQgYnkgZ2l0LXJlY2VpdmUtcGFjaygxKSB3aGVuIGl0IHJlYWN0cyB0byBnaXQKIyBwdXNoIGFuZCB1cGRhdGVzIHJlZmVyZW5jZShzKSBpbiBpdHMgcmVwb3NpdG9yeSwgYW5kIHdoZW4gdGhlIHB1c2gKIyB0cmllcyB0byB1cGRhdGUgdGhlIGJyYW5jaCB0aGF0IGlzIGN1cnJlbnRseSBjaGVja2VkIG91dCBhbmQgdGhlCiMgcmVjZWl2ZS5kZW55Q3VycmVudEJyYW5jaCBjb25maWd1cmF0aW9uIHZhcmlhYmxlIGlzIHNldCB0bwojIHVwZGF0ZUluc3RlYWQuCiMKIyBCeSBkZWZhdWx0LCBzdWNoIGEgcHVzaCBpcyByZWZ1c2VkIGlmIHRoZSB3b3JraW5nIHRyZWUgYW5kIHRoZSBpbmRleAojIG9mIHRoZSByZW1vdGUgcmVwb3NpdG9yeSBoYXMgYW55IGRpZmZlcmVuY2UgZnJvbSB0aGUgY3VycmVudGx5CiMgY2hlY2tlZCBvdXQgY29tbWl0OyB3aGVuIGJvdGggdGhlIHdvcmtpbmcgdHJlZSBhbmQgdGhlIGluZGV4IG1hdGNoCiMgdGhlIGN1cnJlbnQgY29tbWl0LCB0aGV5IGFyZSB1cGRhdGVkIHRvIG1hdGNoIHRoZSBuZXdseSBwdXNoZWQgdGlwCiMgb2YgdGhlIGJyYW5jaC4gVGhpcyBob29rIGlzIHRvIGJlIHVzZWQgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQKIyBiZWhhdmlvdXI7IGhvd2V2ZXIgdGhlIGNvZGUgYmVsb3cgcmVpbXBsZW1lbnRzIHRoZSBkZWZhdWx0IGJlaGF2aW91cgojIGFzIGEgc3RhcnRpbmcgcG9pbnQgZm9yIGNvbnZlbmllbnQgbW9kaWZpY2F0aW9uLgojCiMgVGhlIGhvb2sgcmVjZWl2ZXMgdGhlIGNvbW1pdCB3aXRoIHdoaWNoIHRoZSB0aXAgb2YgdGhlIGN1cnJlbnQKIyBicmFuY2ggaXMgZ29pbmcgdG8gYmUgdXBkYXRlZDoKY29tbWl0PSQxCgojIEl0IGNhbiBleGl0IHdpdGggYSBub24temVybyBzdGF0dXMgdG8gcmVmdXNlIHRoZSBwdXNoICh3aGVuIGl0IGRvZXMKIyBzbywgaXQgbXVzdCBub3QgbW9kaWZ5IHRoZSBpbmRleCBvciB0aGUgd29ya2luZyB0cmVlKS4KZGllICgpIHsKCWVjaG8gPiYyICIkKiIKCWV4aXQgMQp9CgojIE9yIGl0IGNhbiBtYWtlIGFueSBuZWNlc3NhcnkgY2hhbmdlcyB0byB0aGUgd29ya2luZyB0cmVlIGFuZCB0byB0aGUKIyBpbmRleCB0byBicmluZyB0aGVtIHRvIHRoZSBkZXNpcmVkIHN0YXRlIHdoZW4gdGhlIHRpcCBvZiB0aGUgY3VycmVudAojIGJyYW5jaCBpcyB1cGRhdGVkIHRvIHRoZSBuZXcgY29tbWl0LCBhbmQgZXhpdCB3aXRoIGEgemVybyBzdGF0dXMuCiMKIyBGb3IgZXhhbXBsZSwgdGhlIGhvb2sgY2FuIHNpbXBseSBydW4gZ2l0IHJlYWQtdHJlZSAtdSAtbSBIRUFEICIkMSIKIyBpbiBvcmRlciB0byBlbXVsYXRlIGdpdCBmZXRjaCB0aGF0IGlzIHJ1biBpbiB0aGUgcmV2ZXJzZSBkaXJlY3Rpb24KIyB3aXRoIGdpdCBwdXNoLCBhcyB0aGUgdHdvLXRyZWUgZm9ybSBvZiBnaXQgcmVhZC10cmVlIC11IC1tIGlzCiMgZXNzZW50aWFsbHkgdGhlIHNhbWUgYXMgZ2l0IHN3aXRjaCBvciBnaXQgY2hlY2tvdXQgdGhhdCBzd2l0Y2hlcwojIGJyYW5jaGVzIHdoaWxlIGtlZXBpbmcgdGhlIGxvY2FsIGNoYW5nZXMgaW4gdGhlIHdvcmtpbmcgdHJlZSB0aGF0IGRvCiMgbm90IGludGVyZmVyZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGJyYW5jaGVzLgoKIyBUaGUgYmVsb3cgaXMgYSBtb3JlLW9yLWxlc3MgZXhhY3QgdHJhbnNsYXRpb24gdG8gc2hlbGwgb2YgdGhlIEMgY29kZQojIGZvciB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgZm9yIGdpdCdzIHB1c2gtdG8tY2hlY2tvdXQgaG9vayBkZWZpbmVkIGluCiMgdGhlIHB1c2hfdG9fZGVwbG95KCkgZnVuY3Rpb24gaW4gYnVpbHRpbi9yZWNlaXZlLXBhY2suYy4KIwojIE5vdGUgdGhhdCB0aGUgaG9vayB3aWxsIGJlIGV4ZWN1dGVkIGZyb20gdGhlIHJlcG9zaXRvcnkgZGlyZWN0b3J5LAojIG5vdCBmcm9tIHRoZSB3b3JraW5nIHRyZWUsIHNvIGlmIHlvdSB3YW50IHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbgojIHRoZSB3b3JraW5nIHRyZWUsIHlvdSB3aWxsIGhhdmUgdG8gYWRhcHQgeW91ciBjb2RlIGFjY29yZGluZ2x5LCBlLmcuCiMgYnkgYWRkaW5nICJjZCAuLiIgb3IgdXNpbmcgcmVsYXRpdmUgcGF0aHMuCgppZiAhIGdpdCB1cGRhdGUtaW5kZXggLXEgLS1pZ25vcmUtc3VibW9kdWxlcyAtLXJlZnJlc2gKdGhlbgoJZGllICJVcC10by1kYXRlIGNoZWNrIGZhaWxlZCIKZmkKCmlmICEgZ2l0IGRpZmYtZmlsZXMgLS1xdWlldCAtLWlnbm9yZS1zdWJtb2R1bGVzIC0tCnRoZW4KCWRpZSAiV29ya2luZyBkaXJlY3RvcnkgaGFzIHVuc3RhZ2VkIGNoYW5nZXMiCmZpCgojIFRoaXMgaXMgYSByb3VnaCB0cmFuc2xhdGlvbiBvZjoKIwojICAgaGVhZF9oYXNfaGlzdG9yeSgpID8gIkhFQUQiIDogRU1QVFlfVFJFRV9TSEExX0hFWAppZiBnaXQgY2F0LWZpbGUgLWUgSEVBRCAyPi9kZXYvbnVsbAp0aGVuCgloZWFkPUhFQUQKZWxzZQoJaGVhZD0kKGdpdCBoYXNoLW9iamVjdCAtdCB0cmVlIC0tc3RkaW4gPC9kZXYvbnVsbCkKZmkKCmlmICEgZ2l0IGRpZmYtaW5kZXggLS1xdWlldCAtLWNhY2hlZCAtLWlnbm9yZS1zdWJtb2R1bGVzICRoZWFkIC0tCnRoZW4KCWRpZSAiV29ya2luZyBkaXJlY3RvcnkgaGFzIHN0YWdlZCBjaGFuZ2VzIgpmaQoKaWYgISBnaXQgcmVhZC10cmVlIC11IC1tICIkY29tbWl0Igp0aGVuCglkaWUgIkNvdWxkIG5vdCB1cGRhdGUgd29ya2luZyB0cmVlIHRvIG5ldyBIRUFEIgpmaQo=",".git/hooks/sendemail-validate.sample":"IyEvYmluL3NoCgojIEFuIGV4YW1wbGUgaG9vayBzY3JpcHQgdG8gdmFsaWRhdGUgYSBwYXRjaCAoYW5kL29yIHBhdGNoIHNlcmllcykgYmVmb3JlCiMgc2VuZGluZyBpdCB2aWEgZW1haWwuCiMKIyBUaGUgaG9vayBzaG91bGQgZXhpdCB3aXRoIG5vbi16ZXJvIHN0YXR1cyBhZnRlciBpc3N1aW5nIGFuIGFwcHJvcHJpYXRlCiMgbWVzc2FnZSBpZiBpdCB3YW50cyB0byBwcmV2ZW50IHRoZSBlbWFpbChzKSBmcm9tIGJlaW5nIHNlbnQuCiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJzZW5kZW1haWwtdmFsaWRhdGUiLgojCiMgQnkgZGVmYXVsdCwgaXQgd2lsbCBvbmx5IGNoZWNrIHRoYXQgdGhlIHBhdGNoKGVzKSBjYW4gYmUgYXBwbGllZCBvbiB0b3Agb2YKIyB0aGUgZGVmYXVsdCB1cHN0cmVhbSBicmFuY2ggd2l0aG91dCBjb25mbGljdHMgaW4gYSBzZWNvbmRhcnkgd29ya3RyZWUuIEFmdGVyCiMgdmFsaWRhdGlvbiAoc3VjY2Vzc2Z1bCBvciBub3QpIG9mIHRoZSBsYXN0IHBhdGNoIG9mIGEgc2VyaWVzLCB0aGUgd29ya3RyZWUKIyB3aWxsIGJlIGRlbGV0ZWQuCiMKIyBUaGUgZm9sbG93aW5nIGNvbmZpZyB2YXJpYWJsZXMgY2FuIGJlIHNldCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgcmVtb3RlIGFuZAojIHJlbW90ZSByZWYgdGhhdCBhcmUgdXNlZCB0byBhcHBseSB0aGUgcGF0Y2hlcyBhZ2FpbnN0OgojCiMgICBzZW5kZW1haWwudmFsaWRhdGVSZW1vdGUgKGRlZmF1bHQ6IG9yaWdpbikKIyAgIHNlbmRlbWFpbC52YWxpZGF0ZVJlbW90ZVJlZiAoZGVmYXVsdDogSEVBRCkKIwojIFJlcGxhY2UgdGhlIFRPRE8gcGxhY2Vob2xkZXJzIHdpdGggYXBwcm9wcmlhdGUgY2hlY2tzIGFjY29yZGluZyB0byB5b3VyCiMgbmVlZHMuCgp2YWxpZGF0ZV9jb3Zlcl9sZXR0ZXIgKCkgewoJZmlsZT0iJDEiCgkjIFRPRE86IFJlcGxhY2Ugd2l0aCBhcHByb3ByaWF0ZSBjaGVja3MgKGUuZy4gc3BlbGwgY2hlY2tpbmcpLgoJdHJ1ZQp9Cgp2YWxpZGF0ZV9wYXRjaCAoKSB7CglmaWxlPSIkMSIKCSMgRW5zdXJlIHRoYXQgdGhlIHBhdGNoIGFwcGxpZXMgd2l0aG91dCBjb25mbGljdHMuCglnaXQgYW0gLTMgIiRmaWxlIiB8fCByZXR1cm4KCSMgVE9ETzogUmVwbGFjZSB3aXRoIGFwcHJvcHJpYXRlIGNoZWNrcyBmb3IgdGhpcyBwYXRjaAoJIyAoZS5nLiBjaGVja3BhdGNoLnBsKS4KCXRydWUKfQoKdmFsaWRhdGVfc2VyaWVzICgpIHsKCSMgVE9ETzogUmVwbGFjZSB3aXRoIGFwcHJvcHJpYXRlIGNoZWNrcyBmb3IgdGhlIHdob2xlIHNlcmllcwoJIyAoZS5nLiBxdWljayBidWlsZCwgY29kaW5nIHN0eWxlIGNoZWNrcywgZXRjLikuCgl0cnVlCn0KCiMgbWFpbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppZiB0ZXN0ICIkR0lUX1NFTkRFTUFJTF9GSUxFX0NPVU5URVIiID0gMQp0aGVuCglyZW1vdGU9JChnaXQgY29uZmlnIC0tZGVmYXVsdCBvcmlnaW4gLS1nZXQgc2VuZGVtYWlsLnZhbGlkYXRlUmVtb3RlKSAmJgoJcmVmPSQoZ2l0IGNvbmZpZyAtLWRlZmF1bHQgSEVBRCAtLWdldCBzZW5kZW1haWwudmFsaWRhdGVSZW1vdGVSZWYpICYmCgl3b3JrdHJlZT0kKG1rdGVtcCAtLXRtcGRpciAtZCBzZW5kZW1haWwtdmFsaWRhdGUuWFhYWFhYWCkgJiYKCWdpdCB3b3JrdHJlZSBhZGQgLWZkIC0tY2hlY2tvdXQgIiR3b3JrdHJlZSIgInJlZnMvcmVtb3Rlcy8kcmVtb3RlLyRyZWYiICYmCglnaXQgY29uZmlnIC0tcmVwbGFjZS1hbGwgc2VuZGVtYWlsLnZhbGlkYXRlV29ya3RyZWUgIiR3b3JrdHJlZSIKZWxzZQoJd29ya3RyZWU9JChnaXQgY29uZmlnIC0tZ2V0IHNlbmRlbWFpbC52YWxpZGF0ZVdvcmt0cmVlKQpmaSB8fCB7CgllY2hvICJzZW5kZW1haWwtdmFsaWRhdGU6IGVycm9yOiBmYWlsZWQgdG8gcHJlcGFyZSB3b3JrdHJlZSIgPiYyCglleGl0IDEKfQoKdW5zZXQgR0lUX0RJUiBHSVRfV09SS19UUkVFCmNkICIkd29ya3RyZWUiICYmCgppZiBncmVwIC1xICJeZGlmZiAtLWdpdCAiICIkMSIKdGhlbgoJdmFsaWRhdGVfcGF0Y2ggIiQxIgplbHNlCgl2YWxpZGF0ZV9jb3Zlcl9sZXR0ZXIgIiQxIgpmaSAmJgoKaWYgdGVzdCAiJEdJVF9TRU5ERU1BSUxfRklMRV9DT1VOVEVSIiA9ICIkR0lUX1NFTkRFTUFJTF9GSUxFX1RPVEFMIgp0aGVuCglnaXQgY29uZmlnIC0tdW5zZXQtYWxsIHNlbmRlbWFpbC52YWxpZGF0ZVdvcmt0cmVlICYmCgl0cmFwICdnaXQgd29ya3RyZWUgcmVtb3ZlIC1mZiAiJHdvcmt0cmVlIicgRVhJVCAmJgoJdmFsaWRhdGVfc2VyaWVzCmZpCg==",".git/hooks/update.sample":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIGJsb2NrIHVuYW5ub3RhdGVkIHRhZ3MgZnJvbSBlbnRlcmluZy4KIyBDYWxsZWQgYnkgImdpdCByZWNlaXZlLXBhY2siIHdpdGggYXJndW1lbnRzOiByZWZuYW1lIHNoYTEtb2xkIHNoYTEtbmV3CiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJ1cGRhdGUiLgojCiMgQ29uZmlnCiMgLS0tLS0tCiMgaG9va3MuYWxsb3d1bmFubm90YXRlZAojICAgVGhpcyBib29sZWFuIHNldHMgd2hldGhlciB1bmFubm90YXRlZCB0YWdzIHdpbGwgYmUgYWxsb3dlZCBpbnRvIHRoZQojICAgcmVwb3NpdG9yeS4gIEJ5IGRlZmF1bHQgdGhleSB3b24ndCBiZS4KIyBob29rcy5hbGxvd2RlbGV0ZXRhZwojICAgVGhpcyBib29sZWFuIHNldHMgd2hldGhlciBkZWxldGluZyB0YWdzIHdpbGwgYmUgYWxsb3dlZCBpbiB0aGUKIyAgIHJlcG9zaXRvcnkuICBCeSBkZWZhdWx0IHRoZXkgd29uJ3QgYmUuCiMgaG9va3MuYWxsb3dtb2RpZnl0YWcKIyAgIFRoaXMgYm9vbGVhbiBzZXRzIHdoZXRoZXIgYSB0YWcgbWF5IGJlIG1vZGlmaWVkIGFmdGVyIGNyZWF0aW9uLiBCeSBkZWZhdWx0CiMgICBpdCB3b24ndCBiZS4KIyBob29rcy5hbGxvd2RlbGV0ZWJyYW5jaAojICAgVGhpcyBib29sZWFuIHNldHMgd2hldGhlciBkZWxldGluZyBicmFuY2hlcyB3aWxsIGJlIGFsbG93ZWQgaW4gdGhlCiMgICByZXBvc2l0b3J5LiAgQnkgZGVmYXVsdCB0aGV5IHdvbid0IGJlLgojIGhvb2tzLmRlbnljcmVhdGVicmFuY2gKIyAgIFRoaXMgYm9vbGVhbiBzZXRzIHdoZXRoZXIgcmVtb3RlbHkgY3JlYXRpbmcgYnJhbmNoZXMgd2lsbCBiZSBkZW5pZWQKIyAgIGluIHRoZSByZXBvc2l0b3J5LiAgQnkgZGVmYXVsdCB0aGlzIGlzIGFsbG93ZWQuCiMKCiMgLS0tIENvbW1hbmQgbGluZQpyZWZuYW1lPSIkMSIKb2xkcmV2PSIkMiIKbmV3cmV2PSIkMyIKCiMgLS0tIFNhZmV0eSBjaGVjawppZiBbIC16ICIkR0lUX0RJUiIgXTsgdGhlbgoJZWNobyAiRG9uJ3QgcnVuIHRoaXMgc2NyaXB0IGZyb20gdGhlIGNvbW1hbmQgbGluZS4iID4mMgoJZWNobyAiIChpZiB5b3Ugd2FudCwgeW91IGNvdWxkIHN1cHBseSBHSVRfRElSIHRoZW4gcnVuIiA+JjIKCWVjaG8gIiAgJDAgPHJlZj4gPG9sZHJldj4gPG5ld3Jldj4pIiA+JjIKCWV4aXQgMQpmaQoKaWYgWyAteiAiJHJlZm5hbWUiIC1vIC16ICIkb2xkcmV2IiAtbyAteiAiJG5ld3JldiIgXTsgdGhlbgoJZWNobyAidXNhZ2U6ICQwIDxyZWY+IDxvbGRyZXY+IDxuZXdyZXY+IiA+JjIKCWV4aXQgMQpmaQoKIyAtLS0gQ29uZmlnCmFsbG93dW5hbm5vdGF0ZWQ9JChnaXQgY29uZmlnIC0tdHlwZT1ib29sIGhvb2tzLmFsbG93dW5hbm5vdGF0ZWQpCmFsbG93ZGVsZXRlYnJhbmNoPSQoZ2l0IGNvbmZpZyAtLXR5cGU9Ym9vbCBob29rcy5hbGxvd2RlbGV0ZWJyYW5jaCkKZGVueWNyZWF0ZWJyYW5jaD0kKGdpdCBjb25maWcgLS10eXBlPWJvb2wgaG9va3MuZGVueWNyZWF0ZWJyYW5jaCkKYWxsb3dkZWxldGV0YWc9JChnaXQgY29uZmlnIC0tdHlwZT1ib29sIGhvb2tzLmFsbG93ZGVsZXRldGFnKQphbGxvd21vZGlmeXRhZz0kKGdpdCBjb25maWcgLS10eXBlPWJvb2wgaG9va3MuYWxsb3dtb2RpZnl0YWcpCgojIGNoZWNrIGZvciBubyBkZXNjcmlwdGlvbgpwcm9qZWN0ZGVzYz0kKHNlZCAtZSAnMXEnICIkR0lUX0RJUi9kZXNjcmlwdGlvbiIpCmNhc2UgIiRwcm9qZWN0ZGVzYyIgaW4KIlVubmFtZWQgcmVwb3NpdG9yeSIqIHwgIiIpCgllY2hvICIqKiogUHJvamVjdCBkZXNjcmlwdGlvbiBmaWxlIGhhc24ndCBiZWVuIHNldCIgPiYyCglleGl0IDEKCTs7CmVzYWMKCiMgLS0tIENoZWNrIHR5cGVzCiMgaWYgJG5ld3JldiBpcyAwMDAwLi4uMDAwMCwgaXQncyBhIGNvbW1pdCB0byBkZWxldGUgYSByZWYuCnplcm89JChnaXQgaGFzaC1vYmplY3QgLS1zdGRpbiA8L2Rldi9udWxsIHwgdHIgJ1swLTlhLWZdJyAnMCcpCmlmIFsgIiRuZXdyZXYiID0gIiR6ZXJvIiBdOyB0aGVuCgluZXdyZXZfdHlwZT1kZWxldGUKZWxzZQoJbmV3cmV2X3R5cGU9JChnaXQgY2F0LWZpbGUgLXQgJG5ld3JldikKZmkKCmNhc2UgIiRyZWZuYW1lIiwiJG5ld3Jldl90eXBlIiBpbgoJcmVmcy90YWdzLyosY29tbWl0KQoJCSMgdW4tYW5ub3RhdGVkIHRhZwoJCXNob3J0X3JlZm5hbWU9JHtyZWZuYW1lIyNyZWZzL3RhZ3MvfQoJCWlmIFsgIiRhbGxvd3VuYW5ub3RhdGVkIiAhPSAidHJ1ZSIgXTsgdGhlbgoJCQllY2hvICIqKiogVGhlIHVuLWFubm90YXRlZCB0YWcsICRzaG9ydF9yZWZuYW1lLCBpcyBub3QgYWxsb3dlZCBpbiB0aGlzIHJlcG9zaXRvcnkiID4mMgoJCQllY2hvICIqKiogVXNlICdnaXQgdGFnIFsgLWEgfCAtcyBdJyBmb3IgdGFncyB5b3Ugd2FudCB0byBwcm9wYWdhdGUuIiA+JjIKCQkJZXhpdCAxCgkJZmkKCQk7OwoJcmVmcy90YWdzLyosZGVsZXRlKQoJCSMgZGVsZXRlIHRhZwoJCWlmIFsgIiRhbGxvd2RlbGV0ZXRhZyIgIT0gInRydWUiIF07IHRoZW4KCQkJZWNobyAiKioqIERlbGV0aW5nIGEgdGFnIGlzIG5vdCBhbGxvd2VkIGluIHRoaXMgcmVwb3NpdG9yeSIgPiYyCgkJCWV4aXQgMQoJCWZpCgkJOzsKCXJlZnMvdGFncy8qLHRhZykKCQkjIGFubm90YXRlZCB0YWcKCQlpZiBbICIkYWxsb3dtb2RpZnl0YWciICE9ICJ0cnVlIiBdICYmIGdpdCByZXYtcGFyc2UgJHJlZm5hbWUgPiAvZGV2L251bGwgMj4mMQoJCXRoZW4KCQkJZWNobyAiKioqIFRhZyAnJHJlZm5hbWUnIGFscmVhZHkgZXhpc3RzLiIgPiYyCgkJCWVjaG8gIioqKiBNb2RpZnlpbmcgYSB0YWcgaXMgbm90IGFsbG93ZWQgaW4gdGhpcyByZXBvc2l0b3J5LiIgPiYyCgkJCWV4aXQgMQoJCWZpCgkJOzsKCXJlZnMvaGVhZHMvKixjb21taXQpCgkJIyBicmFuY2gKCQlpZiBbICIkb2xkcmV2IiA9ICIkemVybyIgLWEgIiRkZW55Y3JlYXRlYnJhbmNoIiA9ICJ0cnVlIiBdOyB0aGVuCgkJCWVjaG8gIioqKiBDcmVhdGluZyBhIGJyYW5jaCBpcyBub3QgYWxsb3dlZCBpbiB0aGlzIHJlcG9zaXRvcnkiID4mMgoJCQlleGl0IDEKCQlmaQoJCTs7CglyZWZzL2hlYWRzLyosZGVsZXRlKQoJCSMgZGVsZXRlIGJyYW5jaAoJCWlmIFsgIiRhbGxvd2RlbGV0ZWJyYW5jaCIgIT0gInRydWUiIF07IHRoZW4KCQkJZWNobyAiKioqIERlbGV0aW5nIGEgYnJhbmNoIGlzIG5vdCBhbGxvd2VkIGluIHRoaXMgcmVwb3NpdG9yeSIgPiYyCgkJCWV4aXQgMQoJCWZpCgkJOzsKCXJlZnMvcmVtb3Rlcy8qLGNvbW1pdCkKCQkjIHRyYWNraW5nIGJyYW5jaAoJCTs7CglyZWZzL3JlbW90ZXMvKixkZWxldGUpCgkJIyBkZWxldGUgdHJhY2tpbmcgYnJhbmNoCgkJaWYgWyAiJGFsbG93ZGVsZXRlYnJhbmNoIiAhPSAidHJ1ZSIgXTsgdGhlbgoJCQllY2hvICIqKiogRGVsZXRpbmcgYSB0cmFja2luZyBicmFuY2ggaXMgbm90IGFsbG93ZWQgaW4gdGhpcyByZXBvc2l0b3J5IiA+JjIKCQkJZXhpdCAxCgkJZmkKCQk7OwoJKikKCQkjIEFueXRoaW5nIGVsc2UgKGlzIHRoZXJlIGFueXRoaW5nIGVsc2U/KQoJCWVjaG8gIioqKiBVcGRhdGUgaG9vazogdW5rbm93biB0eXBlIG9mIHVwZGF0ZSB0byByZWYgJHJlZm5hbWUgb2YgdHlwZSAkbmV3cmV2X3R5cGUiID4mMgoJCWV4aXQgMQoJCTs7CmVzYWMKCiMgLS0tIEZpbmlzaGVkCmV4aXQgMAo=",".git/index":"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",".git/info/exclude":"IyBnaXQgbHMtZmlsZXMgLS1vdGhlcnMgLS1leGNsdWRlLWZyb209LmdpdC9pbmZvL2V4Y2x1ZGUKIyBMaW5lcyB0aGF0IHN0YXJ0IHdpdGggJyMnIGFyZSBjb21tZW50cy4KIyBGb3IgYSBwcm9qZWN0IG1vc3RseSBpbiBDLCB0aGUgZm9sbG93aW5nIHdvdWxkIGJlIGEgZ29vZCBzZXQgb2YKIyBleGNsdWRlIHBhdHRlcm5zICh1bmNvbW1lbnQgdGhlbSBpZiB5b3Ugd2FudCB0byB1c2UgdGhlbSk6CiMgKi5bb2FdCiMgKn4K",".git/logs/HEAD":"",".git/logs/refs/heads/main":"MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAwZTlkNGFmODA5YTMxZTJmODY1OWZlM2E0ZjA1NmJiOTVkYzBhYmFjIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjEzODIyNjcgLTA3MDAJY29tbWl0IChpbml0aWFsKTogaW5pdGlhbCBjb21taXQgZnJvbSBtYWluIHRob3VnaHRmb3Jtcy5nYXJkZW4KMGU5ZDRhZjgwOWEzMWUyZjg2NTlmZTNhNGYwNTZiYjk1ZGMwYWJhYyA2ZTVjZWRjYmYyMmY4YjYzNDc5ZjRlOTVlYjBlOThlMWI3N2QxNDMxIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDE1MTM4IC0wNzAwCXB1c2gKNmU1Y2VkY2JmMjJmOGI2MzQ3OWY0ZTk1ZWIwZTk4ZTFiNzdkMTQzMSBiZTlhYjYxN2VjZjk3ZmVhYmVmYTA4ZDc3Mjc1ZWRkYThmM2Y0ZjVhIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDE3MTMwIC0wNzAwCXB1c2gKYmU5YWI2MTdlY2Y5N2ZlYWJlZmEwOGQ3NzI3NWVkZGE4ZjNmNGY1YSAyMGM4OWMyMDdiYWI5YzFjOTMzMmFiODYwNTZlMThhNDkzM2E0N2UxIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDE3MjQ5IC0wNzAwCXB1c2gKMjBjODljMjA3YmFiOWMxYzkzMzJhYjg2MDU2ZTE4YTQ5MzNhNDdlMSAzN2Q3ZWQ5ODg3OGFjOWUxNWY2ZGRmNzBlZjM1YTZkMjdiMGNjZDhmIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDIwNTg5IC0wNzAwCXB1c2gKMzdkN2VkOTg4NzhhYzllMTVmNmRkZjcwZWYzNWE2ZDI3YjBjY2Q4ZiAyMmIzZGE0YTg3M2E5ZGEzMDM4NmZiM2Y1Zjg3MGJhMzBlNmMxMjI1IGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDI1NDc3IC0wNzAwCXB1c2gKMjJiM2RhNGE4NzNhOWRhMzAzODZmYjNmNWY4NzBiYTMwZTZjMTIyNSAyZDM1YjI2MTE0Mzk1ZTA0MmExYTVmNmRjOGZhMzc4NDlhYTRjYTkzIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDI4MzY2IC0wNzAwCXB1c2gKMmQzNWIyNjExNDM5NWUwNDJhMWE1ZjZkYzhmYTM3ODQ5YWE0Y2E5MyAyNzVkZDY4ODU5YmIyMzE3YzM0ZTA0YzY1ZGNlNmNlMzlkYWEzYzkxIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDI4NDc3IC0wNzAwCXB1c2gKMjc1ZGQ2ODg1OWJiMjMxN2MzNGUwNGM2NWRjZTZjZTM5ZGFhM2M5MSAyMDNiYjA0MTE1NzI4MThjMDIzM2NhOGVhMjRlZTgwZTQwOThlZDllIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDI4NTA0IC0wNzAwCXB1c2gKMjAzYmIwNDExNTcyODE4YzAyMzNjYThlYTI0ZWU4MGU0MDk4ZWQ5ZSA3MjBjNjRlMjk0MTcyNTg2OTVhY2MwYWFmM2U1NmQ1YjVkNzdlOTEwIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDMzMDc5IC0wNzAwCXB1c2gKNzIwYzY0ZTI5NDE3MjU4Njk1YWNjMGFhZjNlNTZkNWI1ZDc3ZTkxMCA0YmFmYmY1N2MzMDYxM2I0NDk0ZWQxMzMyY2JjYTM3M2VhZmFiMzJmIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDMzMjE0IC0wNzAwCXB1c2gKNGJhZmJmNTdjMzA2MTNiNDQ5NGVkMTMzMmNiY2EzNzNlYWZhYjMyZiAwMjNmZjUzZDlmMWE1MGQ4OTU0YTlmYjgzMjQ1ZmJkZThmYjU2MTkyIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDM0ODg2IC0wNzAwCXB1c2gKMDIzZmY1M2Q5ZjFhNTBkODk1NGE5ZmI4MzI0NWZiZGU4ZmI1NjE5MiBmNjU3YjBhMzY3OWMzZGE2OWFkOGYyMzRkMTQ3MDg2YjkxOGQ3MGNmIGFub255bW91cyA8YW5vbnltb3VzQGh0dHAuKG5vbmUpPiAxNzYxNDM0OTE0IC0wNzAwCXB1c2gKZjY1N2IwYTM2NzljM2RhNjlhZDhmMjM0ZDE0NzA4NmI5MThkNzBjZiAyMDk3NTU1MjUwNjQ4OGU2NjA2YzMxYTU3MzdkMzM1N2FkODVjYWMxIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE3MDE4OTMgLTA3MDAJY29tbWl0OiByZW1vdmVzIHRlc3QgZmlsZSBjb21pdHRlZCBmcm9tIHdlYgoyMDk3NTU1MjUwNjQ4OGU2NjA2YzMxYTU3MzdkMzM1N2FkODVjYWMxIDk2M2Y3NTQ4N2FiYzQyNzczMDA4ZTE5NzA4M2UxNDZiYmI1ZTNkZjUgVGhvdWdodGZvcm0gPHRob3VnaHRmb3JtZ2FyZGVuQHByb3Rvbi5tZT4gMTc2MTc4ODMxNiAtMDcwMAljb21taXQ6IGFkZHMgP3JlcG89IHRvIGNsb25lIHJlbW90ZSAob3IgbG9jYWwpIGdpdGh1YiByZXBvcwo5NjNmNzU0ODdhYmM0Mjc3MzAwOGUxOTcwODNlMTQ2YmJiNWUzZGY1IGU1ZDIxOGY5Njg1MDY2MmE3MzhiMjVjZDA1OWFhY2ZkOTZjMjkzZjUgVGhvdWdodGZvcm0gPHRob3VnaHRmb3JtZ2FyZGVuQHByb3Rvbi5tZT4gMTc2MTgwNzMzNyAtMDcwMAljb21taXQ6IEFMVCtFTlRFUiB0byBvcGVuIGEgbmV3IHdpbmRvdyB3aXRoIGEgc2NyYXRjaHBhZAplNWQyMThmOTY4NTA2NjJhNzM4YjI1Y2QwNTlhYWNmZDk2YzI5M2Y1IGM0ZDFkZDRkZWE2MTQ0N2JiMjJiZWM3ZGI0ZmM4NDYyNTcyMjIzY2IgVGhvdWdodGZvcm0gPHRob3VnaHRmb3JtZ2FyZGVuQHByb3Rvbi5tZT4gMTc2MTk1MzY5NyAtMDcwMAljb21taXQ6ID9oYW5kc2ZyZWUgcGFyYW0gdGhhdCBsZXRzIHlvdSB1c2UgaGFuZHNmcmVlLmpzIHZpYSB1cmwK",".git/logs/refs/remotes/origin/main":"MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAwZTlkNGFmODA5YTMxZTJmODY1OWZlM2E0ZjA1NmJiOTVkYzBhYmFjIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjEzODIyNzEgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKMGU5ZDRhZjgwOWEzMWUyZjg2NTlmZTNhNGYwNTZiYjk1ZGMwYWJhYyA2ZTVjZWRjYmYyMmY4YjYzNDc5ZjRlOTVlYjBlOThlMWI3N2QxNDMxIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE0MTUyODMgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKNmU1Y2VkY2JmMjJmOGI2MzQ3OWY0ZTk1ZWIwZTk4ZTFiNzdkMTQzMSBmNjU3YjBhMzY3OWMzZGE2OWFkOGYyMzRkMTQ3MDg2YjkxOGQ3MGNmIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE2OTE5MjkgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKZjY1N2IwYTM2NzljM2RhNjlhZDhmMjM0ZDE0NzA4NmI5MThkNzBjZiAyMDk3NTU1MjUwNjQ4OGU2NjA2YzMxYTU3MzdkMzM1N2FkODVjYWMxIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE3MDE4OTYgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKMjA5NzU1NTI1MDY0ODhlNjYwNmMzMWE1NzM3ZDMzNTdhZDg1Y2FjMSA5NjNmNzU0ODdhYmM0Mjc3MzAwOGUxOTcwODNlMTQ2YmJiNWUzZGY1IFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE3ODgzMTkgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKOTYzZjc1NDg3YWJjNDI3NzMwMDhlMTk3MDgzZTE0NmJiYjVlM2RmNSBlNWQyMThmOTY4NTA2NjJhNzM4YjI1Y2QwNTlhYWNmZDk2YzI5M2Y1IFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE4MDczNDQgLTA3MDAJdXBkYXRlIGJ5IHB1c2gKZTVkMjE4Zjk2ODUwNjYyYTczOGIyNWNkMDU5YWFjZmQ5NmMyOTNmNSBjNGQxZGQ0ZGVhNjE0NDdiYjIyYmVjN2RiNGZjODQ2MjU3MjIyM2NiIFRob3VnaHRmb3JtIDx0aG91Z2h0Zm9ybWdhcmRlbkBwcm90b24ubWU+IDE3NjE5NTM3MDAgLTA3MDAJdXBkYXRlIGJ5IHB1c2gK",".git/objects/02/3ff53d9f1a50d8954a9fb83245fbde8fb56192":"eAGVjssNwjAQBTm7CjcA8q6/kRCiCQqw1y8JhxBknP6x6IDLSHMYaWTftmfXTP7UG6DhrBMpBtHXKIJgpZBwIfjMUmxInCAhq3dueHUdLKWSQBNZM0/CiS3PJoZgbHUTwA6ccywqH33dm3580PT1GLwPP5a1z3vbLktuFa+bphhoHKTk9dlEY5T8/vqI/i3Vhragqi95lkTo",".git/objects/05/947e19b93d4d9a6c6bf74f30c3b8e490add3a6":"eAFLyslPUjC2ZFBWVPBIzcnJ5+LyycxLVTC0UkhMSubKAbGNrBSKE3NTc1NL8vMBOa4OGQ==",".git/objects/06/70a649a9578f526fcde736bed9c4a3c26f0af0":"eAFLyslPUjA1ZtDXV1AqSS0uUVJIyU8tVsjLL1FIrcgsLtFTCC5JLCpRKKksyMxLVyjJV0guSk0sSVXILNHjAgBZJxQW",".git/objects/0d/43c330309e58e3b23f42c20de69a94ce0e5343":"eAFlkM1Ow0AMhDnnKebUwoGtVHFDFeJYiR8JlXvdxG0sNrtl7aSKEO/OJqFIFbe11/N5PDsfd7hbLq8WC2xqUWiZ5GhIbVBQa7Ehk5K873GqOaCPLQJ1ciBjWATh/e0JJ7Ea24cmVuxXzrltkXFrQ+w4JalYYTXjcY1xAvuYxkbZpsTBwJVYbimrSgyIwfduIGyy6IN7ZFslKd9KUA4qJh0P/+eR+ZESNTpHR0lo53kQUEfix4JChTIGoywf1+Zx5Wo0/tly6jHq2Tjp39r55OmSORyRIUah5H9HHClkV4XscT35wWw2kdVNZ+d6ot7gq8Dv25G8nlNyZas58echxhdqGKsLwH3x/QNP1pQA",".git/objects/0e/9d4af809a31e2f8659fe3a4f056bb95dc0abac":"eAGljksKAjEQBV3nFH0Bh/xIIoh4CC+QSTozAZOW2HN/xUFw7/K9RVUlaq0yaO0PPBBBJT07EwLKk3VJovElF69jtMHNsQS0Tlkjs4gbrzTgttK2rFxoNDi/n+9Y4sjYr49BTH1qeAHlnTJBa+fhKL2UIn3UjH9BRO2Va7zDToMyqEGLtcNPzHPac8QL8CNO6w==",".git/objects/10/d1a0f097d150bea3cb5491ed96d75c3171ed42":"eAF9VV1v00oQ5dm/YupWikMTm8sTJIpQFULFlS4gCroPFCkbe+KssHet3TVpFPzf78yuk5T0CilybO98nDlzZryq9Ar+evX61bPsefQWbW5k46RWk+gzisKC2yCs26oagRFbyLVyqBzoNWiFoA3U2pCBrNDC2ugattJtpPJurUUzsFAKU6CyKXzZSAv045CNkbUwO3BaV7CmOIU0mLtqByLP0VqpShCqgFYVaKyjW35jG8zlWuagtEM7goCWbjiAztuasFGKkP6H0tsKixJhJSymUfTVIuUmAGLt0MCykta9Y+RLgkFeP9E6WQrH6HQtPQauDBrhNiHJdoMKf5LzTrfACXwx+CBy562YGOHp8BYKseDYhqgkADemDBAn0ThwNoEbBcIYsWPPU7KjE3zi3JALBSvimepk9vLWGG5DoBYSTMt0BHHGQDOnMw6U1kU8ZGJyo60dn5l+pDDm1nfm8qkbYV08iLqh2ueiqiAhSv+++/iBAdTCDSfRPgKIOY2NJ/CNHugx+7y4efvPghOPwps7dI76Zi8z299lP3BXi8amu7qKyeh71EXPsyiSa0guhClt6oPCr19wccO8pNL6/+R0OOTT02NaoSrdBmazGbwYAiMz6FqjIF4Yo82EhIcw8HEH7Od7AHVrHXMqSExqjHXjSHtPO5HGU4IYkfDJfA+ldCMosEHSpcoli1CrT0aXhkQLHczCiDy46dHlVjp/8NjrcMqgQodnjyqaRlGFjiLVK6mwmPdDN4OYwPCJr4Xnk/K9IGvWRRIgsgQOWvKRAyMhXhjeGSx7Yua6rQoeJq/QoD/hIL7ac5guTpdTYpN9rW5NjkEwH0SNlJioSIOq+MXB8FDRexWMyZBjEUgAbvKJLRLnkblkydXwiLP/BHoAy6H3c7QouK0hAodLpcqrtkCbDC4Hw1Ain387xznyAZmIA6DvPaLUNpV07D+Cl5SH3Tt/9Zcsg4WyLS03v64owOPVFuoGWkyGFg7vPNKRrYTdHGFenDORBut/yTgZZI9RwxOQhHGZXe3PQ3S+H4zTpwkdpz7MK0nr4IvmDTf7n17RZPzeLXjDL2ACCrdwSzSc89YTQhn8vid1bgU5/J4r5b32jhqWnAPt3fm15c5eXzPBHe0xl29oXx06doofJOl1yDI4SpC1QLuMpkuUGOrnLtHvfDyuibPxeAzzHrP/HPVCAjq4V1f7Pl93r+4VcUk8/kmTd63/FvHnbxcmJLTEl9TxlJ1aZPs11Ple2tRLt99DZ0in/wE8Jnqv",".git/objects/13/1d5fe96f12f95aff8e102089b5792987d1c9b0":"eAFlkDFPw0AMhZnzK97UwsCVoRuqEGMlJBAqe92LSyzSu3B2UkWI/84laSsB253t9/k97+q4w3J5d7VYYFOJQn2SxpDaoKDW4oFMPNV1j2PFAX1sEaiTdzKGRRDeXp9wFKuwfWhS7KTktHLObYtMXBtixynlosIqBnmTjvG4xnkW+5jGlm9T4mDgUiyXlFUlBsRQ925gbbL8g3tkj56UbyUoB5WBN/TPI/OGEh10jo6S0K7mQUAdST1+KJTwMRhl+bg2jyuXY4rPllOPUc/GSS9r55On38whToYYBc//QjQUsqtC9rie/GA2m8jqLslzaQLf4KvA6e1Ins8nc9O5Xk5nxeov4r74/gEtQZu+",".git/objects/13/c311ff04d03e98a7164376cec8289411acbf73":"eAErKUpNVTAyMWEwMQAChYz8/OxihtitDnFaAb761wX3PDELc504oSByn6GBgZmJiUJmXklqUVpicqpeZW4OwxrtBe7W9pO6+We+amPpysm7a3DkJ1RhdmplbmJBMVhZ+gqD7tgNXFnflv0ReTljyQRvgeXcEPugqhhuBBpY2raWNoWJbnpUWLDLddqNJz0QFQVF+bkFJcUMri5n4x/JVVdIds3xz075pfO2eWMvREVhaWpRJcPa/yujK/h0uvf9fsqWvGhOzg717SUQ+ZL8/JxiBrO+8r4U9S3fP3yzFmRt0k3hXnixBwCOR2SM",".git/objects/15/78a6a5dd4718e910234207ffaa7d4ac8f4ef71":"eAENi7ERwjAMAKmZQmVoHKhSsEQKFpAVJdZhLJ+lxOvj8v/+Y9YIr+dym2f4JDEwalIdKGE52GBXOg1cwRNDbXyJDsYLJWPMQ2HhcO9SNu3Bk55H8l3bL3RtX6tIHIwzk6/jXUc8Pd5/RZQp7w==",".git/objects/19/566a6d46bd81689542de117cde7056de4f6dec":"eAGVjkEKwjAQRV3nFHMBJZNJkwZEvIQHSDIzrYtaien9Dd7AzYcH78Gv+7Y9Ozh0p95EIMyYNLkahWfGMiUnPMWqni1LCczCMjudzDs3eXXwJWvRYZANSMX75IWRyNVSM0WSrLmQU5OPvu4NHh9pcD3G3gcfy9p1b9tlyY3ldQOMAT2RTxbONlpr6u9fH9G/pUFE8wVnhERW",".git/objects/1b/c419609cfb156ad2b45531e5146dd0a9fbe143":"eAFLyslPUrBkUFZU8EjNycnnAgAmKwRb",".git/objects/1c/2b6388e0946c0e37fdf72aa486baf8e461430d":"eAErKUpNVTA2ZTAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXaADchEJo=",".git/objects/1d/34f93ba754499bd3fa65500ab26968d0bfec19":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMzcF/f6dMkFk5Mzfm1g25XRMWf9z9BgAUYB/s",".git/objects/20/3bb0411572818c0233ca8ea24ee80e4098ed9e":"eAGVzssNwjAQRVHWrsINgPwdjyWEaIIC7PEkYZEEOZP+seiAzZPu4kiP9nV9i3Y2XKQz6xCo2RoqmgIpE6OdoFBNgOwb5JhjzYwV1Kd03gZMsTVAjLlW520iH9gEgtiIgdjnVoqnbFU5Zdm7fh3c9f0c+xx9zotMe19vc+mNt4e2CWxwGI3XV5OMUfT7JwP9K5XwIU59ATBLRIM=",".git/objects/20/975552506488e6606c31a5737d3357ad85cac1":"eAGljlFKBDEQBf3OKfoCSmcSuxNYxEN4gZ6kszNgJku2V6/vIHgCP1/BK6qM3neDhejJpir4sqwUUlLMkQpq4FYbLyIx0SotaSQfA1Z3k6mHQaNXXlECcS6hCmWpqS0hVh8Zz0v2qTKW5uRh25jwsY3HdbM2ZofLSf7GVWbV4/02h43jpesbeCbP6FMO8IyM6Mpvqum/JG5qH196B9P7Wb9/Kpze3UwrtDk6fOvqfgCzkVip",".git/objects/20/c89c207bab9c1c9332ab86056e18a4933a47e1":"eAGVjsEJwzAMRXv2FF6gRRKS5UApXaIDOI6S9JCkOMr+Dd2glw8P3oNft2V5eyTkizezmIAzlCrDYGPt+ySZbNRKORubdpI6wKKQw6c0Wz1aAWURLKRqpkwCXUZi6Pn0KmYVyGwSyuHz1uJrtxbvx7nPk49p9nFry20qbbD1EVETMipRildQgFB///yM/i2D2+4YvlsFQu8=",".git/objects/21/5c5d0cb66c56afbd60ee20dca3e73f3a8e3f83":"eAFdkDFPw0AMhZnzK97UwsBVQjChCjEwVEJCQu1eN3GJxfUunJ1UEeK/c0laBGxnn9/n57fzcYfbm7uLxQLrWhRaJmkMqQ0Kai0eyKQk73scaw7oY4tAnbyRMSyCsHl9xlGsxvaBGlk657ZFhq0MseOUpGKF1YzHFThUTZRgo2Yf09gv25Q497gSyy1lVYkBMfjeDaB11r5zj+ytJOVrCcpBxaTj4f88Mm8o0UHn6CgJ7TwPAupI/FhQqFDGYJTl49o8rlyNTj5aTj1GPRsn/Vk7nzz9ZQ63ZIhRKBn/j2goZFeF7HE5+cFsNpHV5XSGamJe4bPA6e1IXs5RubLVHPrTKalN8lj+AtwXX9/OhZTj",".git/objects/22/b3da4a873a9da30386fb3f5f870ba30e6c1225":"eAGVjlsKwjAQRf3OKrIBJTN5TAIibsIFjJlJ60etpOn+Le7AnwvnwIFb12V5DYuQTqOrWixOMzcVD9wQinIMiQHjoRsGzDV4J7WYD3d9D+tJSKXkTJlrUYgtiTRy2nzkJEhPV6vkZngf89rtY9Nur/ux94P3aR5t7ctl4i76vlmgBAFjIG/Pjpwz9fdvHNG/pRm6DUBvvuKjRUQ=",".git/objects/23/654696f034d2d188c0e0569d44ab31119720d2":"eAFLyslPUjA2YVBWVPBIzcnJ5+LyycxLVTC0UkhMSubKAbGNrBSKE3NTAfbEC/A=",".git/objects/24/acfc958735f392a02d6637005758260708adc7":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMbAXLPFeG9wfln31utu/mkcWH8rk+AAAB/R52",".git/objects/26/c444f6219bffa028967ab9dcfa3e0f45370ba6":"eAF9kTFPwzAUhJnzK25LK5FUILFQMUCFKkTVDnRAQgyO/ZpYdezKdggV4r/znKYdGZ99d/7uuTKuwt3tzdVshm2jA4L0+hAhPYlIAQKWetTCK7KojpDCGG1rxIYQtKJK+DxAOk/YdVZG7awwOh7LjANfInptDKLXdU2ew1qnBM8OIuyxc37IGdOtaKnMkq8oCiw26+3z+xbL1ebpcfWWztJVTkpH5/N7piXUTM95pzNoG6Kwkq5xECGQSryJk75JdmwamPJax7Nbc0+jycYLiuy8T/MJ6f8g+mIlR607rpi67OnYikMxtuX3B0XgTtIx2nlfeOCtWOX6Mjauq5vI3rYclznPMr3DZJym+Mlw9pWNsMrQmvrl8B2T6Tz7BZlAgyq94QyV5L3zk/yDdTgJ8TqAfWLhOqNgHfdlgHPuZW9lnhL/AI79sq4=",".git/objects/27/5dd68859bb2317c34e04c65dce6ce39daa3c91":"eAGVzssNwyAQBNCcqYIGErGw/KQoShMpYIHFzsF2hKH/oHSQy0hzeJrJx7a9u9SAl96YZS05GSgxVu2TDcGTqxCjV4A6YUrGBesws/hQ433CYmzSDgBNtKxQE5CtruRQyfiAkQgzRSNo9PVo8nVyk/cx8zn7WNZej7bdFmqF94cE7+ZQQO/kVXmlRP796xP9K0Xns4P4ArAYQ74=",".git/objects/27/b2634ce9959621e7abe07b6a8518996d09624f":"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",".git/objects/28/89a7d19488dd58387bc3ca127d316b57121620":"eAGVjtsJAjEQAP1OFduAkmRv8wARm7CAJLv3AO8iMYfte9iBPwPzMTClruvSwSKeehMBEfTemGxSZB6GQjY77U0ZrUvETph0iTZ79UpNtg6EWVxOqDFwIc5CZGwk9IiUUDByDBjCqNLe59rg8ZYG1/3g/fB9mvtY23qZUmPZbmC8M4N1JkQ4a6+1Kr+/fkT/loolPeGz9BlWaZNAqdv4XEpXXzDNSws=",".git/objects/28/af9de9247eecd810419f2cb7ce473e6d0b76e6":"eAFdUl1r3DAQ7LN/xTzlLnCn9KmFHiGkoS2lIQnNPQRKHnTS2haRJSPJOY7S/95df4TSN2t3Z3Zm1gcfD/j4/sO7iwvsW5eRTXJ9QaKgO8ooLcEMiZ/Fn6BNca+E2nmCC2OTrCsxqYrx3wuOznuU5JqGEjS6aDW/I3R+QR3TiAh0nBhkg6oEud1ucXN/t//ytMe32/vP17ePUpPWalqw+sTyCA3LZcapxhJy0cEwiQw2rixTrsB4x5rfls4e0OhkKUwAeuUJhtwNLFrUvdCp0/121k8W40RmjSbyKmRn6aATLtlnsPGoShuHpi2M7dTc3M2z88KvHNWDLi1jJtFXStKT0q6qXI31Qnp2tgS9YM7xuwLYmjhvdbCefo5nQT0EvkQMqFPsxlAXFhZaNOcCLYdgXCBDOet0go+NM5uJ0QXjB+tCg54Z+iJfMj1kShv0lMTSUpz+hQ1YwSRDGkaC916LDMWkswD1r871fyGc76o/IJ9pNCaZRk+KUoppvfo1e/sxHuEZN3HwFiHyDTnshR98puWW42/Yc5JqJcx/AZAs9O4=",".git/objects/29/0e8afed31af219ea546a1250e8f2428c430dc9":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMRvKNKYkNTgIuf41/Bx/IdBIyXzcPAOpUG9k=",".git/objects/29/2636302b7c7fb74ca655371a3e77380544ec72":"eAFLyslPUjCyYFBWVHBMyi8tUQhOLSnJzEsv5uJSVvBOrcxNLCgGAMPRCys=",".git/objects/29/c3f2279201db386cfc8139add642512e39b415":"eAENy7ERwjAMAEBqplAZGofc0dEyAAUL2EZEOhLJZykR45P+vyxaYLreTuMIL2IDq52bg0VuBk4IuTrvCC0LQrATsBsI/g7DZWGZ0zlY3hrJSbeZ/KN9TaH9ay1XTKvu+DzyQ0OGy/0PvcsooQ==",".git/objects/2b/3375eeae30357b7071542818d3a20e47072a84":"eAErKUpNVTA2ZTAxAAKF4tSSksy89GKG/GrTwmdlCxM7Z7IYfJ65TbYrgOEYADjfEAE=",".git/objects/2d/35b26114395e042a1a5f6dc8fa37849aa4ca93":"eAGVjsENAiEQRT1TBQ1oGBiYJTHGJixggGHXA65Btn+JHXh5yT+8n5f31p5DW8DT6CJaxBEBJOBYCmL2NgVDkKsN7EuQ4k2ONpF6c5fX0C4W76SElChmZgzRCdRUXV4AM/F8Y6zIio+x7V0/PtL19Zi8z32s26h7b5eVe5HXTQMFQBt8XPTZkDEq//rGlP41VZO+ivoCWEtE9w==",".git/objects/2d/4dc4ee237c8ed8ce82ad021e15995b557b68b9":"eAFLyslPUjA0ZFBWVAhOLSnJzEsvBgA17AXX",".git/objects/2e/a9835439fb26d53404ace22bf1b8f1001ce534":"eAEVy7EOgjAYRWHnPsUFdxD0DWpMSQgMYJyL/pEmlZr2Dvr2wHiS70w+TKhOl0NZIqck5ngFSVgCIT+XWGCgjQT/X7e8wYBnFEuBY6HsxmaJSB/rPfZdqWOGh2n0HlV9NhhMf2+v0H13axs9riLoI+8=",".git/objects/32/1f81646180421044fd33fb53c069421237ae9e":"eAEVy7EKwjAUBVDn9xXXurdWwR+ISArFDlWck/qwgdhIcgf9e3U/x8fk0W4Pq6ZBRS2scE9asCRC36GwxkiXCX5eYXmACVNWR0VgLe7HZs0oTxcj/l1ks8bNdsZitMO1P8IM51PfmYtIu9uL89MXW7YjdQ==",".git/objects/32/9225d24f2f8117dd986513e9d185a78fb7656b":"eAF1UrFu2zAQ7ayvOAQFbKGKgnSLBQcokg4eig410iVDGPJkEqFIgzxZMQL9e4+0HMdAqkEiqXvv3ju+Z+uf4eb65svVFay1iRBlMFsCXuEryp5QAXkwLmIgEOBwgB8r2AbfcZUgII2AToFv81J52XfoqC6YcJV5UoXCVvSWAZKMd9D6AL+8uvzpCAMMGl0Gyz5E/sO9nSfgOgHWuBdIZ2lz6FoXhfQuEuwMi1nCYJzyQ03a9xtNTN3VqAz5MH0euKyZICyPEQlYRxKENR8c/7GL3+19LuDT2qLbkG4Ki+wi21/jKzH66dE9utuv8NQUyeSdRvkC5tw+CBtQqH0aTWSFpNPk2AzGNE6x80aBUMq4De89dMLt64JJ5u8qbuG6hLcC+DnYtSLSevB3WoTIMpLGaI3EPxSY5gS8hO9V6pvNlE1mSMzn+OUSZsnI7NgkNTr3efCYzkdAGzGZPGOpk7u/bG7OVLPy/0zHeWWuYsxzuzdxK0hqvlcKwsUpGqewpdwQj7yCzu94ydtDQCoQHDgOqreWJTMiX2iR32qinafRSS3cBuMC3qDlxC7ex1JNVhcfLY8VQyJazCFNIOGk9uEEg28f6qeEQIZh2zKMO2UR+cJCL1MIDzpXLPOBY3e6pk+oKm65X8AFj/UCxrIYy+YfYdQ2Bw==",".git/objects/34/03b4c5da89c6a7d562d2adbf9626249a94e6de":"eAErKUpNVTAyNGMwNDAwMzFRSCzI1MsqZlCMieXZlhO2fm/CO4U7i5/bW/XZNyNUZKdWghRF6DWd6y7RuhcQU2p9JLb+VOccF2Gootz8lNQckBpe58MGBvMiHm+ydzrE+2zWlHN8wc5QNQVF+WWZKalFIGXCsvEv84V+Rv3vE1Do3Fqp2X7x5AaosqLUgnyQEvPZCnVsfCdq1sUylCduf59e5HcTpqQktbgEpMQ5TlA1P+Tvel+7Zk+loqKwX2V7owDreFPK",".git/objects/36/648d1c1363b7fef00dd71aa8aa89cbf3402704":"eAF9kbFOwzAQhpnzFP+WViLpAhKCCSpAiKod6ICEGFznkp7q2pXtUCLEu3N2o46MPp+/+/7zxrgNrq5vLmYzrLccELTnQ4T2pCIFKFg6omVD2AzQyhi2HeKWQA1H58sA7Tyh7a2O7KwyHIe6ENpLxJGNQfTcdeSFtHeNkrODCju0zmdMRlu1p7pIr6qqwny1XD++r/G8WD3cL95SLV2V48RbESV0Ii60Uw1sQ1RW0yUOKgRqkmyW/Cbdi2Y2KjuO5fiaJaJhsvEsonvv07lTviH7P4i+pFNQy14CpiQ7GvbqUI1ZZX7uCJKJW0xOklP8FBiFa9nqkyx1Mr0rfkEmUL7UzgZnqCbvnZ+UH0vZfWrDa+Z/Yu5608A60WYrU/IfnNPXZcL9ATNOm2k=",".git/objects/36/8e778e6427b4f7f0f63b1105822d640ba1d18c":"eAErKUpNVTAytWQwNDAwMzFRSK0oyMkvSg3PzM7MyczLLtbLKmawb+pWnx8xPal5B+fpML6EYOGTWrlQ5TmZxSVumTmpYHUHXHc8tYq/3vHpd5J4lenn7KQLr7ug6opSE1NA6kDGCVxc8GH6xYB9i0+HTHw77XqMYeFbJyRloUE+IFWvE1r2KG742RKplH7vZYBB9eNL3bPgqgpLU4tLfFNz84sqnfNzC4pSi4sz8/NA2haayfPdzL3swRz0uNz1WkHRvf1X06HaylOTglMTi5IzQOosllyYXW4rsF5kK8vxNC97nQDevMMADDVq7A==",".git/objects/36/b9cd10dfdb8e38460631a14b77e4bbda028c3a":"eAFVzTEOwjAQBEBqXrFKE2gcIUFFyQco8oHEPmJL8Z1lnxWeT6JAQb27s+MsIy7X26Hr0PtQUGwOSSGJuEA9wUqMAzukYSZVQmA09CZblR571CCKI7wkI1fmwNNvVMxxCexkMeqlTl7XTjRf8bmDZrs6tf9ke75/AGoCN6I=",".git/objects/37/1422131f0af10f61336a913e819acd5ff90d42":"eAEdi0EOgjAUBV33FE/cg9Uj1JiSEFmgcf3RH21SqGnfQm+vOMvJzBjTCGu3q6ZBRS2scE9aMCdC36GwxkDJBD+vMD/AhFtWoSKwNvLLnppRJokRy27MZg35c/WtW5Td7T0G31+6A1x/OnatO38BD+MmMg==",".git/objects/37/9b207e060ec87cae5d007761b7ef67724ed9b0":"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",".git/objects/37/d7ed98878ac9e15f6ddf70ef35a6d27b0ccd8f":"eAGVjssNwjAQBTm7CjcA8vq3toQQTVDAxl4nHJIgZ9M/Fh1weZo5jPTKvq5v0RbcRTqzrtRCAkAMBSn6SlBadjW3yqllzxQD5JiL+lDnTTSaKbvWwHpLboCZOCGWVKstoXrijBMlAkWnLHvXr4O7vp9jn8PPeZG29/U2U6+8PTRgBG9NiFFfDRqjyu+fjOjfUgkfor5EpkTg",".git/objects/38/a4d09b773d10af14b504c7664a3f2c500d6ec3":"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",".git/objects/39/2ad79312b8ec7e54d0efd738a6c962fffa7a90":"eAElzDEOwjAMQFFmTuERllQwsHAGJAYu4KZuYpHEkeMS4PRFdP76b0wywul82Q0DPCI3aF65GpiEkKiBRYKMb878RWMp0AyNQOZ/8YsqFUsfQG/8IqhYyO07l0m6syhLiDaLZtdFn62iJ7fJt82k+284HK8ryvUxiQ==",".git/objects/39/d53ed6bb79caa4693e1fbf3c814c7a377a4f4a":"eAGVzssNwjAQRVHWrsINgDzjv4QQTVDA2DNJWCRBjtM/Fh2wedJdHOnVfV3fXSPYS28iOgUj3tMEjjNl4RzJFo6lVAlWkIph67IB9aEm24ApZYoM2aXE7JNNsVRbCTCyhVB8BISARtHZl73p1yFN38+xz9HnvPRpb+ttpsayPTTEAA4DIuqricao+vvXB/pXqi5HV1+KkkNr",".git/objects/3a/63767369d4605498c5f02eacd2dba2a3b4f800":"eAGVjsENwjAMAHlniiwAchKnxhJCLMEAruO0PNqikO5PxQZ8TrrHSafbsry6jyGeejPzLDkiW80ESLUgJQhwTYUCkxkLjpwxUHVvabZ2T4TIwGZD0oyqFAbFIkFVmUqVKLmWEaqTvc9b88+PNX/bDz4O36e5160tl0lasfXuAw0BU8rA/gwE4PT314/o39LFGN0XNMdCxA==",".git/objects/3c/c24c21da410ecb9cce029a24f00d368c18221f":"eAF1V2Fv28gR7Wf9ioEPaBNC0uGSL4W+MTIdq2eJBkUnNYqiWpErausll91dWnEC//e+WZKy7q4NYESmlrMzb957M95rs6ePHz/89U8/0X2SbdNNTH+mdby5jvNk8pg+UJwlFNM2ubuZxV/xy5TihzzdpOv0YUtZsk3ibHlL8edkk8/p0XSWWqtqYV+oVFYWXj1LUo6iyEl9mBWm8fKb74RW34VXpomi8BYJK0k0pPC11qqSTSFJ1ntTKlniKfkjgpSqUl5oqoQtZTNcVxk8wZfeEEdXTWc6p19o3yldkqBSypa6ppTWedGUqqnIHOiFM+2ctNP+ozk1yKE4Ko+cOyunyKbErZKeGnPSsqwknRSyGFJxrSjkkIGVbedDNZwH3+vJNLSXfJeVWjZeS8c5+aOxpquO88nkJ8pvE7rPVuuErldZssxXX5IFLdNNnvw9p9WWfl1tPk+iKO8rv8CyMc2skZXxSuw1w1YCc1nIUjoSWpNB2pact8LLSkk3jyL6JA8GEKNs5FVxFYZEWVrkFapkKP7iyLWyUAdVEKMaoKH1wzanVlq8X/ctUrhYB7DRylnAmSttj8IBkvgCscqK9kgC7fS4RXgqDXJsjL9oCCnviOHvDwNB5MJ4AaRf5gTm3HNg+mVBmUSHG6GcE8yPdzutnL9ROLx7H0WLnn4HhUaTAPPQAyRN8eaRGnkiL9zTQBTcEKq+CABAjGZUKom3UV3daukl1aJlvjATis5armSkX+gM8q3RAeGNfZlPPlwk/GFBNwbEC8wAYJkUgX3vdhafOO0+6/jg0S4uhVHkiw5c0kBMxzWDx309oRl7JG8Ypb6Gc7S+BFQtaA/EtGokOVSD9A+XiZSm6GoU4tAsrrVWjaq7eopwqEY1he6YSrssia/Xybwud4Fju58RjHN0PzNbdr1w3dF0rDPtzPgqTr+A9wVjtSvlszbVrq8p5H2WIp2YElwwx+PWDAhDKSdjnxgO04AGaYMnIsCE01z3yfR0A+HB6nOzhmSY5a01hYR3ACm+4UzsN1kEchw6DbQBVY88JwIZWPmfTjofZLrMVvlqGd/RTby6e8gSglbTL0n2+CZW/vXmLv06WQ3GogUomH7aJtmXOF+lm15zLjgI7c4R4/vVGHU3hQ6olqJxvSENTolXmtKcGBykqueTWc/yKEo3d48Q9jOstAS/v505j6MoumAn4MrBtlDMWtag6BK8ZtFDHLvAlyHiIHMx2AHfRbvEWujnWnqhtEMLralDSLMHTM+D4zUDwjvJp9eIDb2DMbYKJBvFw/I6Zw8fhAt6GvoFY4bSgkFw67iloCRcJiiiDomHJg+Zk0DfmWHmWWLQ1LI4ika5OvQLQyujPN7+uuC55a0q/JT/D2ZY0FcQ66DNafKIm+oOfYK/Y0gUquz1dAnl/gUk0Tjd8wPIym9QYk8u5xajQ215tmXyoHngQYDvblUFonq6t8pY5V/eL6JoQvgX4Qc3W7pZZfBV9u7b1efbhD12ODt4lCswD7mBkBEmKbkCJRTHVpSBuNC4NsUTabGHW5a0+8cyXd9jIG+Ta1on6zR7/Odufr4zRyBufBiswc9QTB8BH6KolIcAOaY1lGMOYFboB9zhj/DLZ5Y2XJlMESRbvl3USwC+w2iOd1xMElXXskRnJSRt5UyCv13f/d4GoD6ePXNCIK5+UGSY8ifcyGxjZEPws6qD2sHdd3Jezad05bxpB8f4Y/7TK7rqKRwGouXNhNnUWcfbiutq7C/qO3p+9Z5NUTa9JMcBMtrNMP4vCTOuBwVPrChiuwaSMOwdw+uO6MgwI26gKewZtDzK4umSHZl8VjytUPvvbSSAApsArOL/2ggUZGGbgPdiM+pZHIJG0dl/fu9oSDUAWSIxJPoxDLNROt/lZZZDm1mqPM5Rt6DDUBI846zNIO0pFVwlqWCPIA5QHkEsiakJndSSrseN8Td0+h/fMwJ87RhknJW9yl8GBY3fwll/E7BHcPx2ShG3OELOZ+Af4Nz0OYXps0AxwhTaCSl02quZ81goW83qfNuh+ArsdPEXDIn4011CeZrebYPJhHK5nRdWAjNED33Pq1K51jhsCBwPKyjkFTpVY9GBm8wnP36we/6LV4TXV75m+ZBlWLhpm2NNx8J+u9rmEPxk3Ej4NoiPdxL23zBnWa5H0baygVtgWB+EXUxmsxmiv1kLwvMjvmIce1myXm2ukyzUEvYP2EjLOwnvw0DFQSgaC3M/if6GvyHI7P8NJ7wsmK2g907eI4Wf07WhTZqT6Ty257Ay9Hsr/30AxYR1FUw6j326iAysf8DaroY5crWgq/l8fjXlZ/2mhEd8gs8AussDfMRWjg8QXqJXHHudvP4XuNdnRw==",".git/objects/3e/7dfc3c148aa667583ed0c579d3db8cf21e1f44":"eAGVjlEOwiAQRP3mFFxAAwssNDHGS3gA2C6tSRFD6f1Fb+DPJJPMyzyqpTy7BLCn3pglW2OJkmLvZk/EaChpgqTZRaBkMEBgwijesfGryzRN1vmENgenMKMOEfg7DgR6williMaPfTz6Wpt87Nzk9Rh5H/1Y1p5rK5cltplfN6k96mEwTuRZeaUE/fz6gP4lxcrbVuUeCxfutYoPJfdIrw==",".git/objects/3f/828b279f58976283b809cb560e605313c92a6d":"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",".git/objects/43/5e11256f54fdaf4d3e834922727256fa76bd5a":"eAFtkbFOwzAQhpnzFEcZ0gqUTAjUDqwgkCqgbAw4ziVx5fqKz26oUN+dc1pUFSFlcBz7v+//Ulmq4Prm9qwsYdEZBnkUBOQArL1ZB2jIQ+gQPiP6LayVVysM6EHFQJZUjb7I5PKDXOgo2hp8dMPHlQpGK2u30HfoYEsRnNqYVgWEQDLl7eUJehM6+LhLAz8kJiUtZFg+zOEcNsobVVkcuDbK2P2LEyQh3SPmaUFrBOVq0OSCMo5TUsKWIMZ6mPWnARdZJqeZLBaW2nF+P58/Tqf5lUC5mnrZ1FKBXEHetMbBJeTlK4ZgXMsXfFiUQ2qZChRLziez08znwdrR1Yla/EIdg9Bx1BqZmyi2zlNGZhoY7x1M4DuDVOsImgw1ZC0JaHv8JQw9+tSYU2MBTv1Fcqp0yJplO0DL+H/maH9qBFQtUQfoFYOjAOpUPB68v/+KLxLy7geKbMsJ",".git/objects/44/310500276092a336d65ae52b3844f3bbd7f29d":"eAGVjksOwiAUAF1zincBzeMPiTFewgM84NG6QBpK72/jDdxMMotJJvfW3hOUspc5mMEkm1QqFY1kh9YHzUkHqRMq4xUGxhiqVlpsNPgzATkWQzVgJC1Z1eBsrKzJVLQupWhLRkqUBR1z7QNeOw+4Hyefpx/LOmsf7bbQKPx5gPRO6uC8V3BFjyjy72+e0b+l2CeNucPaG8NGC4svxVFIQA==",".git/objects/44/c22102767b95ddff5dc8948cb8c76dd830f3c5":"eAFLyslPUrAwYdDXVwjJyCxWKE4uyiwoUchLLMtMTyxJLVZIyy8qTyxKUcjMUyjJSFVIKsovL04tUi9WAKouyS+q1OMqz8xLyS/Xg/GhGjQ0rQHRMSD1",".git/objects/44/cd1b4b80a679ce81f6acb768e3d69595b9e8b6":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMyqlu0z6YXLrYceBB2FyX1YaC0xUuAQAFmx2u",".git/objects/45/44cd5fe21e7b78198a9c4f6b64fa2ced83b18d":"eAErKUpNVTA0NmEwNDAwMzFRSC7KLMksLE3VLS5JLdDLTWH4+aFdIM/oJk9c58bmjUEa/qpxH5uhaotTc1KTS3RL8vNzQCptDvko3nLkOz3nHNMslQ+8Zj0SSvIwlZV5JRmpxZlVqbqJecXlqUUg9TET/rrd3PZjwsKt0xg67TOYr13+FQ4ASBg2sQ==",".git/objects/45/5b12512e84a64fd34208a0c34395f91e40f1c9":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUM5450vO3Qm9X3tHdhelOOW6rQqi5+ABagHfs=",".git/objects/47/355fa671e5de4c7250f5162929665c13a5bd04":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMlbJhrs79PDKzIz4t2cdYmayz8VUGAOnuHCw=",".git/objects/4b/5b2bdf041e605783eb3813b0247208e098f323":"eAErKUpNVTAzZzA0MDAzMVHIyM9NZdBUMzPQrqnf7rMs1FzKrtyC1eVNkYkBECgUp5aUZOalFzOEs682mN7gyXr0+vIzW655PKuJKdEGAGF0GlU=",".git/objects/4b/afbf57c30613b4494ed1332cbca373eafab32f":"eAGVjkEOwiAQAD3zCj6g2V12oSTG+AkfQGFpPdQapP+X+AMvk8xhksn7tj27JaRTb6qWRWYkQdKJk+daHBNMCbJjF6VGVIaKOZp3avrqNhBkz0qRMZBMPkrKGVKqTsUXmaWEoBHBpKOve7OPjzZ7PQbvw49l7XVv22VJrejrZjF4ZOfGjj1DADD599dH9G9pkJz5AoRTQXQ=",".git/objects/53/be6ba3038dc5dbe55129537335a3e39d98388f":"eAGVjkEOwiAQRV1zCi6gGaB0IDHGS3iAYWZoXdQapPeXeAM3P+8tXvJ537Znt975U2+qtgSIM7BXB1kEqeRSwgBO7BgTBwbvkKJ5U9NXtwEFVXJKmIizulhnkYqgNUSaxWMBZknV0NHXvdnHR5u9HmPvw49l7XVv22WhJvq6WYezm3ycsrdnQADDv399RP+WhgqbLwQORGc=",".git/objects/57/07ab3097804905c5d7a7ccb4d648e67c5c742b":"eAErKUpNVTAyMWEwMQAChYz8/OxihtitDnFaAb761wX3PDELc504oSByn6GBgZmJiUJmXklqUVpicqpeZW4OwxrtBe7W9pO6+We+amPpysm7a3DkJ1RhdmplbmJBMVhZ+gqD7tgNXFnflv0ReTljyQRvgeXcEPugqhi+Ws1ol9l8zoN/mp33+xv8pS8fqtyBqCgoys8tKClmcHU5G/9IrrpCsmuOf3bKL523zRt7ISoKS1OLKhle8JqICf9l3N5lvaA9y72Ej+fPMSWIfEl+fk4xg1lfeV+K+pbvH75ZC7I26aZwL7zYAwBRLGJo",".git/objects/57/6f44cf164a27f830f896d0449f983f1693aaea":"eAFVUF1LwzAU9Xm/4jwIcbB1IlWwexeHDwPxByxtru11MRlJ2k5H/7tpszF8Cjf33PNValsif368Wa3w0bCHrxwfAlxrPGQb7LcMXEmtf9A3ZKgjB4mDo46pR89G2R7xzJHnX1LZ7MITkSaMG0WlbU1FCsFCdpYV6FiR99wRPtmxqaHa6ZFnGtgDuahrzciXKAliohTopGNZahrJZSdZp8EgXP2LMUhkGW+lUaisCZJjJCWDhIyOQoQTksvQyDg6rmtyo8+4aKzdT2FerINIOYsUUizAAToCPDTvqcDpXMRGFRDnbpZZlkVkzyo0BZ7y+wUa4roJBfKHHMNsFj15qynTtr4Tr9vtW1HAmmUSWSbJ7MuL+fofdPeeqr6Uf3uaQmTpYKOGsefrZ5QfjpcxORh28/UfFJmvXQ==",".git/objects/58/2e82ce8b742ade505c753bc45d7fca899c4413":"eAFlUMFKw0AQ9ZyveKdWD25BepMiPRYFReq9083UDKa7cWeSEsR/d5NYoXjbnXnvzXtvX8c9lnfLq8UC20oU6pM0htQGBbUWj2Tiqa57nCoO6GOLQJ28kzEsgvD2+oSTWIXdAzXyyP3KObcrst7GEDtOSUpWWMVYb7B+2eCDexxiGke+TYmDgUuxPFJWlRgQQ927QWObaQM+O/OkfCtBOaiYdDzsz5B5Q4mOOkdHSWhf80CgjqQePxRK+BiMMn08m+HK5ej9s+XUY+SzcdK/s/PJ06XmECOLGAXP/0I0FLKrQg64nvxgNpuU1eVuhhx5MMne4KvA79uRPJ+Lcr7V3Pp6rBKrS/p98f0D2MiUOw==",".git/objects/5c/90fd46d9b6f890a1b59600893f6803d6d3fa57":"eAFVVEtv00AQ5txfMScKURKpnBC3qgVUBAg1cOCEJuuxPXS9a3bXTk3V/863aye0hyjJPma+1+ze+j1dvHl78eKnH4iDENO1SE+3EoWDaenSsZ1i2hIOBAreCmmk5ClOLrUS9W++UyuOrcn4rg/Sios6yprYVdQNNummZiNJKqzEgwTac8Qf7wgVSO7TfIHCsekEMC2PgoKuGgxubs/OVqsrD4A3LqaANfUuvlutzja0Wu1OWNZ07d15ot3QdRwADkewRM4n+j3EhB69cCqNe68uRaqD70AhqmtALoKmkYXuyHYofNVlbnt1OFRoAVgKHFP+r672oeOMaClmbWkw14p0ohOEwSQjvpXaikmzqiexd6iZpJky6KL3olds/WChpYbgQyn9XNZnwvUSMh5oRjd16a1uFEBtUBsWwLxezXmkVmPyYVpTEtM6NWypksRq42xd9Eaxpl3PJq1zpXA0cAG0h17FjCGgMkLBVQUsyAeSIVShgTqwRLAYRQ2+imJMrbd505AfJYwqh1mWS3Pn/MFK1Qi9pE/DfeLex2LiTSUuaQ24OWWoOIM8GlFUuZOJZlexGZqhw5WFDBJ49DqHrtK6loDtxfC4pff3vVWjyU6U72U3Dy3OHE8QN0HQFayWX/DC5zI0OP2Tg/I/CDMd+ImkQhyCI3RlkchUzN0lDokOmlr44WSA7xifVpt2Y2UUS7Hkd9rSd0wTekoFf5IQiKM5920kVIyIUJ6DMo+9GK2hKO4X1llz7K3zQWQiYj9hLLFwEB7n4D6FPGe3uDwCqB/ikflM5gtjXPChrzPehUrJaZn/Yzi6PGeIBmPOLTuDaGDqckZxv+jq62LXE71KThHQLPg87D+iBIT0o2ebx/zhocGvx8f8DnwLflRIQleYQjwf9KqAOI3RZ9+8Lk/DZoN7OSE49Gs/ZK9QYYNlVPmQ3yy8b/lFwul/QO3Mbw==",".git/objects/5d/b5405e2a504d2fd711bce436564591907059be":"eAErKUpNVTAysWQwNDAwMzFRSC5KTSxJ1csqZng3p+HphfAe2TLWrtZN/P0vr1l3ZkMVpaTmpEIUffXl2xHG2G5hUrHo0umU35Y7eju/QRXl5CemgMzZfPDy89NX67+8v6143Ukn8eayG/P3QJXk5+km5+QXp+qWZ+al5JeDVF9qODVlor5k52mTY08y/j0LFf6Zz4ukGuw6JOWzlVb+vPO7SWdxMZPW1UsH928UKN+MUF6UWpxZhWx6eL7LeTEv9R8GP6ZdcJk/w15s8qpXAECCbAU=",".git/objects/60/480ac5ddefcbb6582ef7c288e4e7956901a708":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMeiubQyx/q101YVnzSPvjjo8MMk9NAP2xHUs=",".git/objects/63/18b8e19130f9c28232f076603d49ee24e2aa7b":"eAGVj0FOxTAMRFn3FNn9FSiJnaSREOICLDmA7djtX7T9Cun9qZDYw2akkeZpZuTYtvtwEOPT6KouNECrwFQSYq3cwCin5D1xzDXPzbOphDo9qOt+gVqaCUjAmSjnkmbQ5iWV2qDxLBaDBkP8zSOTsaUi4HMAvjpQWwCIwkJQQMmIIdpE51iP7j6/tLvX89L3y5/LOuzo28tCven+5kLJAQHngu7ZF+8n+fkzLui/5PShfVHHnXZZ3e2vQ2/uvo/DbXTfp2+AYmUA",".git/objects/63/81ec8efd73399860207b72175a2197a55506c5":"eAGVzt0JAjEQBGCfU0UaUJJs/hZEbMICNpvNnQ/nScz1b7ADXwaG4YPhfdueQzvrTqOLaLalcsPsEaBlMg0LRDDBYimIHkusyTvy6k1dXhOmUGvMOczdgU0MXoznGCpLZAGsRMBoFR1j3bt+fKTr6zHzPvuxrKPtfbss1Ku8btqmaL3LwaE+m2SM4t+/MdG/UlFh9QVgpUNb",".git/objects/67/a8308b5db00a6af6a6fc14e998a4904b10a70b":"eAGVlDFv2zAQhTv7VxD2kIlOUXRpthQxgiCth6ZFUTRDKeokMaZ4AklbTn59j6ITW5VNuZtN8X18dzy+TGPGPrz/+OndjH2vcF1WvkBbz2+FzcGwe3iuRcMewHtlSjeZTcI25VihNDD65NgKnjOk3cxVaL1ce8c8MtgC/RQZ7XLSqsZ3Cjfv9MAu7NpcsEb4ihHMV8C08mCFjmuFxbpbtYieYdH9LqOltgILtPBqwoJTORB5woOXKzb9ijn/PZ0wRofQX7czf0lfg+NLj2WpgQdZJuz8yU372oUhKwm9ERtVCg8cLW/IaeOHjIdKFZ6fTVKGG2h5IwxE1oxxztly8ZPdL359vlve3C1vw9Jbkdd6HI8NGE7oVpkc26HJP4kid03KYeMRtRuKm4TYgbCy4mFIjihjb1L6OD3AJda1MPnw8IgoEhZKGmyheXRyCpAnAPm60UqGa5Zra8H4rpwhKVzE/3HiIB8nmYSjMCGhpUNlbEc5oj11bmrWqXBRj7VA7g9W4e0Yoa+kMBI0FyV17uB9hW5dW4vtFyho/eQbzWiLA8szIVf9et8I3xSF1RkIyrOWoqNPCRnx+JhQO7p93z1IvgHraRL0kBD7fi6H8lG9oPH/kkJFkdR1ZqwuBxqkp7zYRn+drdfsCyydKuuYuBcqB05G7mhnpLGw2SfXoZFq3EhffMrIDbaph1HjBuJVUcyZQT+eEjaOSE+Z+JFKrD1n3QwMrM4ysBP2jt8mlFKji2X3BzOMwEtCt0v2WmxVrV72hL8FQatA",".git/objects/68/19f92c7ed8d1b592ed57cf4d0deb6ddede82f5":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUM99WD1JQfsOjnFV/c0SN9uzvgkstrAPRuHSo=",".git/objects/68/7a0725a1bbba011dfe524e2e65aad243f73cb7":"eAFLyslPUrBgUFZU8EjNyckHACHGBFA=",".git/objects/6e/5cedcbf22f8b63479f4e95eb0e98e1b77d1431":"eAGVjssNwjAQRDm7im0AtP6sPxJCNEEBG3udcAhBjtM/FlTAZaQ5vDeTt3V9djCGTr2JgHGca04Ug6Vqk2E0xXsbEClQNB4DRi45qDc3eXVAScVxjZjYajE1ekpVLLuK5KcpUcnIE2fFR1+2Bo9dGlyPkffRj3npdWvrZeZW5HUDHbx2mrQNcB5TqPL3Xx/Qv6TiUnbosnf4SdQHoVdICQ==",".git/objects/6f/7b3571e676a16189990430f399b61d8a5000c6":"eAErKUpNVTAyMWEwMQAChYz8/OxihtitDnFaAb761wX3PDELc504oSByn6GBgZmJiUJmXklqUVpicqpeZW4OwxrtBe7W9pO6+We+amPpysm7a3DkJ1RhdmplbmJBMVhZ+gqD7tgNXFnflv0ReTljyQRvgeXcEPugqhi+Ws1ol9l8zoN/mp33+xv8pS8fqtyBqCgoys8tKClmcHU5G/9IrrpCsmuOf3bKL523zRt7ISoKS1OLKhlMmLccvdV5bPnVpEtr909TU5k15dk9iHxJfn5OMYNZX3lfivqW7x++WQuyNummcC+82AMA6plmGQ==",".git/objects/70/b93ff1242a33ff0be877c8dd2c5d4ae97ba8a1":"eAGVjsEJwzAMRXv2FF6gxUpsy4ZSukQHUGwp6SFJcZT9a7pBLx8evAe/7Ov6VjvAeNHGbCtJSACIoSBFXwmK5LFmqZwke6YYIMdczIcab2onzjRFQO4aCtPEQi5VxAED10pJRvESyNCpy97s6+Bm72ffZ+dzXlT2tt5mapW3hwWM4AcXYrRXh86Z8vunPfq3NMqHmi/dZUXk",".git/objects/72/0c64e29417258695acc0aaf3e56d5b5d77e910":"eAGVjz1qxTAQhFP7FNu9KmG1+ocQcoGUOcCutM92YfmhyPePCKRPmoFh5oOZch7HPsASPY2uCs6VasRJQg4xF03mHrhIDEltDdlnL1mThOXBXduAHBTJOrbFauRK2VElQutNpeBjTiqZUOW3PyMRdMb4SMmkMmFbOCmTU02oDidSsy58je3s8PmlHV6vqe/TX+s27mc/XlbuVdsbmBiMsxajh2eMiEv5+TMm9F9y+dC+KkjnVja4/XXoDfY2Tjh4b8s3xGdiDA==",".git/objects/76/d9ce063bbceb5b5ad76b4307bb012c8985b999":"eAGVjt1twzAMhPusKbhAC+pfAoIiS3QAWiadPNgOJHr/Kt2gLwfc4T7ctXPfnwou2A/tzNBEaiwJU2leKobQskVXi0sURDw2h9EXv5oXdT4UkOsaSApW8padlBSrsJ9ljGlZalwb0kLN0KWPs8PP4A63a+p9+mt7qJx9/9qor3x8g83J+pJtyvCJGdG0v386of+SZih1HTBY9XlsA160Mcw1UB7vxPwCkwZOoA==",".git/objects/77/44909ee63c54cc716c4da1ccc97dfa2a5fdb0f":"eAGVjssNwjAMQDlniiwAip2PGwkhlmAAx3FaDqUopPtTsQGXJ73Dk55s6/ocFgFPo6ta0gmyT4RAAVUECrdKOdU2xQQlZK3oPLJ5c9fXsIROUlDMAQjjlHJkEcfcvMZUY4mVSDM4w/tYtm4fH+32uh+8H77Py2hbXy8z96qvmwVKELxHnOzZkXNGfn/jiP4tDRcxX/7IQrM=",".git/objects/79/1d5645438f0c1c9b58f2a4be0179632cb1ea68":"eAFLyslPUrBkUFYoySzJSeXiAgAooQRy",".git/objects/7c/1da754a0fc21cfb4b44aede2dfeace80af7537":"eAEVy7EOgjAUBVDmfsUVdhgNc40pCZEBCXPBF2lSWtLeQf8e3c9ZfFzQXoumQUnJLPGKkhEiIR+XWWOkTQS/hwtvMGJNYilwrJX9sU0S8m69x78rVV0wm04bjGaY+hv08Lj3nX6eFWghdA==",".git/objects/7e/81936721742ecc1bafd796df8561b49ed2032a":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMP65sdP89nUft45GG6SKVc8LftnxYAAAZkh+D",".git/objects/83/53fdfb64901ca9996d5cdad81eba90a3f1bbec":"eAFLyslPUjAxYlBWVPBIzcnJNzQy5uLyycxLVTC0UkhMSubKAbGNrBSKE3NTc1NL8vMBWYcOqQ==",".git/objects/86/0e55af14d9a9ed97a3bd7bbce63e2ab0d34901":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMGVXsqgt372KU/Rfkp5e66pLzd5vtAPIOHMo=",".git/objects/8a/b7327a0b9d948e22e42639b7abc57867ba8415":"eAGVjltqxDAMRfvtVWgDLYoVv2AYuokuQLGlZD6SDLay/4buoD8XDpwDt577/jLwRB/WRaCqlpAjxlxJC85zTRP6kn3kWZWwegyUqbk3dzkMUEqbWTMWpkm85hiKCt0yhrgsJbSKvHB1fNl2dvgZ0uFx3ft987Vupmffv1buTY4nTClOlGNJCT4xIbr698/u6L+lG8bdpMEQs9exDrATTIa5Xyt+S6g=",".git/objects/8c/0193131820b4cfc273e9f77adaf4171c597cbb":"eAFNzDEOwjAMBVBmTvHVpbCk6obEzszABdLEYEtJHCWuen2E6NADvLckXTDPt9M04cXS0UOTatBKpcOYEDRnXyKqT2RGkIKhk2+BH5KoD8gayZ03KVE3Z6zrh+2tLbtdPv/Q/crLeKDj9f4F/LUtFg==",".git/objects/8d/004d0dc45cb0fb396e64ef78a70a8a1a925b90":"eAENy7ERwjAMBVBqpvglNA4cJTtwFCwgCyX2YSyfpcSMT/r3YtGI6+V2mCa8UjYY99wcnKguYpiVV4MrPAmq/By0US4Ui6BRlXAcub51BE+6Lsln7d8wtH+sEUswKcL+2N9zx6fz/Q+PVSgv",".git/objects/8e/64d2c0deacadf55f293f7a3854c547e2754a7f":"eAEtzDEOwjAMRmFmTvGPZXHbDYmBBW7ABRqSJpZMXcVOK26PBKxPn14QDRiH86Hv8ShssGfl1eGasySDl4SNjQML+xs6f8u9tjghps1VxbBOSxI67rxE3cmLtlx81vqixvQ73f72St3p8gFsaCnj",".git/objects/8f/1b64f31ce5e6bc6640923ed74b87005df2077e":"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",".git/objects/96/3f75487abc42773008e197083e146bbb5e3df5":"eAGljkFOxDAQBDn7FXNcDiDbE3u8Eiw8gg9M7CFZKc5EXuf/WEi8gGNXq0udtdZ7B5/8U28i4GdECiIsaDHQTJZcmHxyqSB7K9MAntNkDm6yj6G9UgjBBxunlCRGGzM6DoRUcAi4pJA5O8NnX7XB16rnsvZvbRXeBvkLC7ci++fRtOv+WuUGjqKjlNBFeLFkrcm/V7v8S2K4lAd8NDn0HbpC3nQXaFK1C1zGwU0zb8+w3Pt6zqM49GF+AHoTW6Q=",".git/objects/96/e0234a3c3e7ad2942d220351d265798eb920eb":"eAGVjskNwjAQAHm7im0AtOtj15YQogkK8LFJeIQg4/RPRAd8RprHSFO3dX0OsGRPo6uC97VR8SViZklVI02caxGO6hqnkEJJGgubd+76GsAuktaoUxPnUoqMFqWIJQnZUpIcQkCuweR9LFuHx0c7XPeD98P3eRnT1tfLnHvT1w1ImLxzKB7OKIim/v7GEf1bGiIyX/43Qdk=",".git/objects/97/4da779ce7ae911b790fad2c55eb316169c3b5d":"eAElzDEOQEAQRmG1U0xJM2pROAQXsKzdP1lGdgZxewnty5fnkjhq26JpaIxQ0jnjMDIJIXkli54uKBwS7CFZv7JN2EmxeDdlLm/si9xsUc4QbZW88Qn+D8OPeq7q7gXoMSYU",".git/objects/9a/5249ef57047fd47301083d7197ee9a4b95417f":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMs6VX30naMH/pzDvHyqc68fapzCgvBQAPLx4N",".git/objects/9b/1babdc62b09fa599dcc67795420d8e24987775":"eAFLyslPUjAxYFBWVPBIzcnJT0xK5uLyycxLVTC0UgByjIyMuHJAXCMrheLE3FQAR/kNqQ==",".git/objects/9b/22a9f9dcfb822ca373022ad5d2c1bfb11077b3":"eAFVkNFKxDAQRX3er7jgQ1zYTRF8kC7igyAuCguiHzBtxjZuTEqatoj4706bhUUIJJPcO/dMKhcq3FzfXhQF3lrbo6+j7RLi4HvQkMIXJVuTc9+YWvY8cgTB84Qu8mhln6w3YYJY68iU2OhVUciSdgwlBp8URoqWKsezjEayLhce6Zyp5vDQ8ewlb1AHn8gKhqFEoCoMSeSMpaWcSMpom4Yjm+WhDeE4h+MxRKjMVWYotYFNcCLo4eyRS/ycwPemhDrNstVai3KITu6KhqJhf/lhHd/nZmzuUhxY4Xe1Ero+ONYuNFfq6XB4LksEv81x26zXn71a7/5LH/InndJLiVvm0dmxN5uZPLV4f305PwrRevcH2hmR8A==",".git/objects/9f/4d203c0f1cf4b61a77447052af7539bea3f464":"eAFVjk0OgjAYRF33FLMCSUyJbIkHcMfCC5RSbGNtm/YDQox39y+CLidvXmZa61tU+2pTljhpk5BkNIGQgjWUQFpBDjEqR3aGkGRGhSCcwqgiGSmsnTlj0rtEmHy8pCCkwgGTcZ2fOGk/nDX1Pl75gmtmemyXiCxbVf7ZaJ4Tx67AjeGHvU+90Cr/9XfIv7fyomb3BzhuTyM=",".git/objects/a1/361f0ed96dd3480352e37745d67072debfd567":"eAFlUsFu2zAM3VlfwfmSpMic7da5pyDLgAxZW2TZoadCselUqCy5lNTEG/Lvo6RgyDofDIMm3+N7fDttd3D9+frd7Ep8QVeT6r2yphJzcD3WSmrw1sYX7BCCwwbubtcPcHhCAxIWm9V2tZivYX6/gq/z1frnZgl255BeZcQBZRpVS48O/BNCbY3Ho4cDl+0BlIM2aF3CyoNTeyN1bnOD89hFTsm14RemYSSyNIUGPVKnTC56+8yLaNUpP+Xuhgk9aq32aLwewIWuk6TOCFY36Dz0krwD28JgA0GHnaWhhHvpMntcCRIZ/3NO7hFasrwOC7iUJh0TgqR96JisFGJ+/nSV+JABvuf5CrY8m3CTfKaOYNGzf3l6sq+qYY+VeUvH+Muj7HqNsJC84Jhbvv24u4XWUif9pBK/BUCR8M60RQVF5CB8CVF3K5XGpoIHGwCPNWJkSh7UgYg1wEuwXpZlmQ2t4NPH9HClECdxNRNCtTB+z5pdeck0gUhO6AMZKJbxUFnz6LJr9NesePm4lSJsyuKGscVsxiZxOaWtsejMiC+FFOVx0GobpR9B1jlW3qFuU3AyK98CnKdQ8wrYRLQcKLZR+uTlVrrnTTAGiePHBsagUI29T7FhXAi9NaU4q4jeloyozF61wzjqy9xs6tnQxxydx7gb8aU578WU+zih7LSrkinwJgn/eRcnTuI0ufkDrRU5cg==",".git/objects/a5/07764d330206a2912ba47fb65fc863a61c54de":"eAENzLERwjAMAEBqplAJjRMaGpaggAFsIyIdiaWzFGt90v99WaXAbb6fpglexAZWO6uDRVYDJ4RcnQeC5oYQ7ATsBtpxsOwH57JyW9I5uH0kkpPsC/lX+pZC+s80V0ybDHwewVsv18cfHPEpjg==",".git/objects/a9/901ac24c6cd04a6a8c167fcbb11035592e334b":"eAF9Ve9v2zYQ3Wf/Fdd0qKTVptvuy2bPLbIgXQxkKZAmawfHQ2npLBGRSY2iEhuZ//fekZJ/rNgAw5aod+/evTudF6VZwOuffvz5u+EQbgpVQ51aVTmgK1cgyNQpo2FprL89OS3d4Fw7tCdwj5uFkTaDujDWpY0TPeKYLj0wbWxNMcRC0RIe1b0qlb7vg3JgKtTMLh3wGShGaHyEZWmkUzonuM7Mo+gx4WAwgLMPVzfnn2/gt8sPv55efuQzfhRhppyx0YiUI+RUiiwhnBFp7aROsQ+VrGvMYLHxwnCNJNVYLzbKleuiSVhaKtRuVyzVYPk+pyJR/z8RPhCSqK6asvQE5M5KVgNnVZ6jpfweUVNNqSFp8KCo4EmrVgTRf9DZuKeWED/jxwk89QAYbkoUaK2xcTRj9wZKD4JHczj3HgQ+bVh9ozMRJWOKtegaS92TZY3j3rbLXZmaUnMKQSY5FDWW6BstVlJpUaDMxq1O6hAegzOTCj49dTERUZ5QUNfia8xxTRHDu9ndLJ79RT/z+ct3yd38bj7Mx70SHaykS4tx7yhElLJ2U5354FfjXu+xUCVCHHswER6juY8xyxAO1y5J9mY5oKKsowj/eGnNCl6GlILmCtfsTNCMOiNYgLeQ2au5KFHnjvQRjpvBdr3tYC9eAN//Qq3TWUjasVG6+zNDLwfNzCQknL2eczYA/xWS5uguCXl7fUmomM44IIHJW99uBgOwSZV0BSFagKirUrk4+idKWCLN1Sr2Pd4HhDmlEJpqEW6u5IoaHyBtMcRKNqRlk2EdR88jcm62n3BXzImAU3cJCbFnaAfqy/D7J9SpyfD2enpmVpXRVEMcaJLt84OnMXMl23dhXDGbONvgl8C49RZ39jW2ZO07d7i7nZ+thGCgqq+wdvRK8Uz4RUHzu4Rnk929M1VLzVvtYvoR6HNzcQ7vp59HcFujH/6K1hakJBxt98qGhRaWHr2rbFzIyRPdJlNao/2kMurOEN6ESgJo8y/QBaq8cAHluXiaOvXd7HCOlplkCxou9zvWtcwxftp1jkFuU+EIIot/N1T+oLLIb3C7B6L+EbaSG9ql2QiegGztt5uNal9313+OYAPbXdC2D9EPXae3gLQwDsaRdXN6s9xJLUxDtdH/wko0SvBS+uR7ARNqQ7RstN8n0WGVh5X+V3js5ZLKzcHUfaOHmdjy/V48+WYvBjn8b9KJAV6P8kGqUi5ooZ4cZvBGBDv8ZTvoPKzc4S0vz6Nt+hXIp0pT",".git/objects/ac/2ba0473b3f928b0f99ea86048a6c6edd30c4f9":"eAFVjr1OxDAQhKnzFCNd4QYF6TruBRAFooCG0j/rZEXiPa3tSHl77OgORLmrmW8+t4jD+fn8cMLnLHWaSxRdxxergRJeUyGN1hM+qBROUx5OQ09yRuSF4CUVlSWjzARHs91YFBKPmwIXUZPBd8zYyl9S4W2CbKTKgVr0TnM7vJLtQzD5tvj0197XxTQYdqkKX1UpFUyH6jg0dB9s3TcJdOnGh0WgaOtS8E274xQ6e22BrvJ+LSwpX2A2Xs0jzC1rhn+k3/cPu+holw==",".git/objects/ad/ffa95b780e2c8bbefbe50663a29c6cb827b774":"eAErKUpNVTAyNWMwNDAwMzFRSCzI1MsqZlCMieXZlhO2fm/CO4U7i5/bW/XZNyNUZKdWghRF6DWd6y7RuhcQU2p9JLb+VOccF2GooozEvJTiNKDZIHW/Unl4z6rWRUn845kumRAWsOH2nddQdbn5Kak5IDW8zocNDOZFPN5k73SI99msKef4gp2hagqK8ssyU1KLQMqEZeNf5gv9jPrfJ6DQubVSs/3iyQ1QZUWpBfkgJeazFerY+E7UrItlKE/c/j69yO8mTElJanEJSIlznKBqfsjf9b52zZ5KRUVhv8r2RgEAVIFjRA==",".git/objects/b3/0560c2e109dd7ab9bb3dd7c8c1c78c3c0217a5":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUM32zuB2c7FRnOO2qk2vaIifej7JIjAP8kHQk=",".git/objects/b3/c1d3e7cbd57ff4efdb21d7422c61d9a6d89fbc":"eAE9jkFrwzAMhXfOrxDs4I4VGwq9ZPcx6KGH7Q84qRZr1aRgOQn797VpGeggPfS+9wbWAQ7Hw1MI8JXIwMZMc4G8iEFciv7GQmNk/oMtoUBJCHGeuWqFVOCbhCyhAWu8kEy+C6FOZSE4XFGKgzVmigMjVHxcI/H9aLD/QNeSdcbmh3fN4GpK36BuD1SaVRZm33WjiimjZ5127uN8PvV9fdlILrpV8d7La6aJBF7BhU8spTazZ3ssIaleLTS4/zH38nYDk9VY8g==",".git/objects/b8/44a8b3138f84ef6bd22954043ae1762c01c674":"eAFLyslPUjC2YFBWVPBIzcnJVzA0Mubi8snMS1UwtFJITErmygGxjawUihNzUwEdlQyq",".git/objects/b9/9457b64f8506f618a2e1e5a8c21969bf2a376a":"eAGVzsENAiEQhWHPVEEDGhiGARJjbMICBhh2PaxrkO1fYgdeXvIfvuSVfdueQ4OF0+giOki0yVEAGxCkFJu51ZCotujJZkxSwThg9eYur6EdkwsUHKWKZDymWHwzIFwq1MzALmOLxig+xrp3/fhI19dj7n32sayj7X27LNyrvG7aBrLoED3qswmTld+/MdG/UnEu6gsPSELa",".git/objects/be/9ab617ecf97feabefa08d77275edda8f3f4f5a":"eAGVjksOwjAMBVnnFL4AKE7juJEQ4hIcIB+nZdEWpe79qbgBm5HeYvSmbMvyVnAuXrSLgOeBqKXAKFTFF3ZkG2Fw0cUQqOCQKFfrzSd1WRWCUJFacnOujTkMnmPzEkmylTgKZuaKfkCTDp23Dq9dOtyPk89zH9OsbevLbUq9yvoA5IAeGd0IV8vWmvLr01P61zTLez0Py5zWSUA3UNnVfAHQ3klc",".git/objects/c0/45b8e53a5fd788f2fb62177a35f36b62d0eb8a":"eAGNVmFv2zYQ3Wf9ioNbQHIbyx32aQ68omibLsXWDu32qR1mRqYtrjJpkJSdINV/3zuSkh03DRYYiE0e7969e3fkVWOu6KdnP/78w/RJ9kq6yqqtV0bPsjdSSyu8dCSoUc6TWZFoGhI7oRpx1UhaqQa7xVaspRuXdOmpEprMNhwjpcnvDbkKC24WXCi9ToeMbm5or3zNVrWkqrVWak9rYZcSPuyJvaiscUCC+NHElfRnrRzh0zq5ahta4dBaes9BGMZO2p2S+wB7gLw0VbtBIEdXEgckLWWllnxkX6uqJqORkTdkpViW9GLlpYV/3gdU3jHNGd2YNmSKwAH8gq0vQMYiGMBJWN4YkGZlI3dC+0ljzJc+f9oKX7syy17YdYQzyyaRqRnSkvErI2dumGZyUtiqLuklUruSJEEdoI0SbyMqlnIl2saPmbsReBqVGdHkYDGj31DESGEsXKI+Uc6RUEjUYC8cOS+sl0sUMblhj9+6OCrLF232ui/OGW2tXKlreOAicxoK1YnF1WIjqZDlujyjN2HpHVYeTZmUqTdTRjcGOa+vxWaL1F9y1Qugffvx/Tsu80b48Sy7RX6joC4ACxlnXfZkmmXTKU0mE/pVNlAirVpdsaBjVcGXUzsJ8QVJRyJgzYeCngZzVHspnVpr5ABBgHMnm9WkMtoLxYtH6mVZlJlwN7o6xOMAF9whH2SKWmxX7oyWyo6JwRM10ofqcmVoTp/+Pg/L3t4kAzZCROwqLzcONmIvlCc4Kll08FWwv3iOrbkLisMR1lA42odkG/5TK1AKnzSfzykv18rnYw6F9mnlOYGOj1/UNugPewxaVt7YmwAwuuihcd2AbPH4FlbR3zSn55TnNOOD3fTxLYfqFgeY7OFumnd9Qn/MyCFbXsCk8fVRrv0RzoX3S+Ve9TiL8WnGvTXXPBHefy2ReAX/Mdz3Chei3xO+I9lgEsSS9lH6/0OIbevq7yXQ3WG1w3DxmEWFvC8Frgwy0B4ahjp5hklrjXWh9Eov1U4tW4F5yNpDAUHkRq1rT9r4IGMwNeH5fTfo8CuCuR/Ew8F7kah747Jeh7AxiJW+tXpogXM08NC+v6PLSF6jd0L3NmatKu7rLIr7liBLNJPcSo0bo0LMMwzeP6xZW4mbooN6WM7y2p8PR95AybxxfKrfDZOEJWfXrow/vn6lPA3Y/DzLgsz4Nosa73f6IvH2AQDm8ACmWLDe+uGPO0uf3HczenyLdMo4IHkadmVZLpLWYsKxnH1L3KNRdhAGTD7N08mHIF2YVi8RN/gtIai1r7somiFyqs/iIkgJsNMEH30DdzT7rBf0NJ3/1yhd5J8140BJT4jDOMesie3yAML8LmlHV01E4UBRn2ikKK1/EHvUsTGVaD5iZOFSK/EuuMQEKnJfmxa9wJfIP8n8Xh9wcOTtebh6yq2wThaH9THm26e8NhuZp8nNAx3pBb7et37b8hDLIR4eB7zpjRdxGxvPICreOJrZ0TkrgCd3CtWTxbYPELYAIXg5CK1ZavFsUNZwx3a9pNjTMWfcGHPSeC3hW8qQQRxNu/+rwhAMXk61yCGPsn86T1qJyjvcDFGPoOS1qOqCf9H8l5PhekIxfOHyOVDXPYqy7qDJg+MuJQNBMpaHiOx744A3dQYlFfbR3NA4qVTftA6LODxB8YYJqfUu+FGTDqXeuZtV6JzUgPlrnvAzutQ70ahlfB6W9BduncMLcHj35ef/Ad7txC4=",".git/objects/c1/3a81a077229fc7d6eca2d8bbd61398fc2de0d9":"eAGVjlsKwyAQAPvtKfYCLa7R1UApvUQPoOvmAU0sxty/0hv0Z2A+BobLtq0NjHGXVkVA7GCZkxbvsmcWGjghm4TiouE0UDBBmKL6xCp7AxwdUaRsKeWAFEZnTRZEz1m8dpTFTh2s4tmWUuF1SIX72fnsfs5Lm0rdbnOsWfYHoCfsByMiXLXXWvHvr/Xo31JN6x7fkMpxwCZ1FvUFm4FJFw==",".git/objects/c1/bdcf984933f8a0f9b3630519bb9949b6d742a4":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMD+JipPpYxbRWTb8utdPPb/qDmqtMAPNRHIY=",".git/objects/c4/d1dd4dea61447bb22bec7db4fc8462572223cb":"eAGlj9tNQzEQRPl2FdsAkR/xS0JAETSw8a7joPg68l0j0T0BCRrgc0ajozll9H4RsCk8yGQGjhxONjiXj4b8kSsl8skxkgu12lQMmVII1Q0nbwLsyZpUc0heh2AxunSyvpD2GbFUyqHY7KpXuKSNCW9trHOTOmaHp3vzG844ibfX2xwytkPnZzAxmOxdyBEeddRalZ+rwv+CqJeGG+312/WugB2kocCVZYfPsWDtDH+Lw/sOHxeENa/qC7CUYKA=",".git/objects/c5/99f773dd7c8e51031d6e0c226b57654276cc88":"eAFVjk0OgjAUhF33FLMCSUyJLtwQD+DOhRcopdjG2kfahwSNd/cvAV1OvvkyU3uqsVlvF2WJo3UJSUfXMVLnHSewNdB9jCawH6E0u6tBp4KBpehuFFh5P0ohNIXEGCieU6e0wQ6DCw0Nki31J8stxYuccCVci+UUkWWzKr8rh9fIvilwF/hhn1tvNMt//RXy+VheVOLxBKJVUQc=",".git/objects/ce/c488ed882e9a8ee58da167826c466512aa8a0f":"eAFLyslPUjA2Z1BWVPBIzcnJNzQy5uLyycxLVTC0UkhMSubKAbGNrBSKE3NTARUrDIk=",".git/objects/cf/f9586068c3f9044c71029826a4ff30c205383d":"eAErKUpNVTAzZzA0MDAzMVHIyM9NZdD1PfJOuabvxrmmtUxyojOjQ6szdpoYAIFCcWpJSWZeejFDOPtqg+kNnqxHry8/s+Wax7OamBJtAN3fHN8=",".git/objects/d2/80ca94912f1989cb34c6e468fee65513f96f0d":"eAFVj89KxDAQxj33Kb5bXLApIl66xwVx8bAXX2DaDN24MVOStEXEdzdNCyLkkGG+P7/pnHR4en68axq8X21E7IMdE8LkI2hK8knJ9uTcF5Yre545gDAGni0vWKw3siDbeieRja6aJr+cxFBZ65PCTMFS53hV0UzWbYNH+qtTa6+MvHrJG/TiE9lMYCgRqJMpZTmjROYf5THYYeDApiyuIre1HC8SoDastjCpB9gEl/cRzt64xfeOfTYt1H5JrbVW+Kmq3BzFsXYy3KvXy+WtbSG+LlH1lqs/ojoc/ytP5fw9uM2dhVRvhrM5HH8BQ4J7MQ==",".git/objects/d8/5130393d8575825615b2e27170ba4596d8e48c":"eAErKUpNVTA0NLBkMDQwMDMxUUgqyi8vTi3STUpMztbLKmZ4lemc3Fd+z/fRzokRRT3deSUshxagKU3LLypPLEoBqXY5pMhUVj317v/YE1N6dhzPvWHw+ShUdXJOfnGqbkFiXipI4Z1tz5f0LPhT8W32caGft4wPbZ6mwg9VmFJakJOZnFiSqptcWlSUmleim5aZA9b0bb2gjozj2eNSt4U1BL3lde5emNWFU1M60EmpeSC7fnud3By+iylswZFHujM7J0o2xd3shWpLrUhNLgXZlJ+bm5gH9oLZzrMC92/3WbixGS70Ln+y+xZTjxVUdXpOflJijm5xamJRcgbI5JuMe5qcBHyjC9bV/7uq/jstti0uFKo2N78M4lvdlPxysDM0D39Sn8R42yLnT6Pl2mtOgXqWW0QxFJcWgMxdyl7ma8zEtmii9pL6bfEnkpfJhNyDKs1LLMtMBwVOZp5uXmo5PEDVNyX7vJw6TfH56gfVWa0SM3M5k/zRteQX6RYU5ecWlIBDRaA685vNrCUN2fZyx29FvzToY18O0wA0FxbmZim9MsLJ2/994L0utWJV5+nPDuosSMoQoax2xOWb4uz/CzSmVe2888uO39WcexlUYX5Bah7IveWZecDAAFneL53yWebpsz1pDpPsrnu3M8R+Yq+DKka40GiS6iV//UbxuzNShV9ebF3evz01G6oImCwSczETiMb6uS9V6t7cEHCcr7P9nLtdLnfZM6gOSKSBvVUMckEP42RhCYUt5w8Vv/xedeuLuExkzW640pzU5BJg6FaUwIO3l8GX90jMht+WeSnvK5ZzdUlNip6AqrygKLUMrly0YtnSu+4SLwWUndj/r6r1OvHlfSFMOTB1Q8zVzcgvyqzKzytJzAG56OjM78V3a/oCmWXzeJSyw1Odys50YOopSy0qAeYOsI75vgo2/DJftkmVuxQErS+13Lf4SwpUR0l+enpOqm5KallJfn4O2Md9KZcO3Fuz9mu8pn2VRchR90elXvWoqnMTKzJzM6sQudRS6/pkoR1v6kIuvL9usexk0v9fVTBfQy0ozkxJTUosArl/uu/yynNVLwW3T/h16WjcZjGxOdaxAJeMuOU=",".git/objects/d9/01bc8242104d5b70ae7ffed527fb665d865e55":"eAFVzDEOwjAMBVDmnuKrS2FJRdeOXICBC6SJqSM1dpS46vVRBQsHeG/ZdMF9mi7jiBenhhZqKgYtJA3GhKA5e4kofiMzQhL0jXwN/FAxEuuRNZLrjiRRD2es+8r21prdzz6/1J3pdfjDw23+AMATLuE=",".git/objects/da/f5811775c7a64da1cf93d9fde8f94ea651969c":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUM5iJKwvJcH/kTjbMm2jXOOhv/k9cJANbFGrM=",".git/objects/dc/b6e7a48ca0fc78f69bc712f9da33c2b396240f":"eAEdyzEOgzAMAMDOvMIjLGGrhDrxA4Z+ILimiQhxZBsifg9iv5sTzzC8X30P3xAVFCUWA0yspGCBAHcRypZO8GjxICg+k2tqzD+uzgLv/2ALy+Yqy6rFI7mnjw+fbt12nwuKnCXO",".git/objects/df/27522623e0042f6e73d1b88c1bdb8b50d244eb":"eAFLyslPUjAxYFBWVPBIzcnJNzQy5uLyycxLVTC0UkhMSjY0NOTKAXGNrBSKE3NTATZcDRY=",".git/objects/e0/5e5c1a8e05162aaa97d71ab94e4e97e07cd502":"eAFLyslPUjC2YFBWVPBIzcnJV3B0cubi8snMS1UwtFJITErmygGxjawUihNzUwEi1Qza",".git/objects/e4/34ccb0e75d7cce63cb1c2b1e5a2cb36828ec6a":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMrFPqJHfa+s7Kyf7ub3B4x5MJay8vAwD4YB4d",".git/objects/e5/d218f96850662a738b25cd059aacfd96c293f5":"eAGljstKBDEQRV3nK2ovSuWdhkF0MTtxIf0DeVQms+ikiTXM79sKfoGryz1wLyePbbsyKL888CSCGpTVS/Je64JGyqBdQJtIonbVxKRKVTIqFHuc1BkWp6u3JviYslHHDDGQXDwGTdK4lJIlXaoV8cZtTFjbuF0a1zE3OB3kr1ziLNRf9zl49OeNXkB6JwMeHh6e0COK/KvK9K8T8fa+Pp4/1vMn8ICxU4cIne5wv/YyfoLbQb7yjJzbHov4Bur2Wsc=",".git/objects/e7/e6b2633941d54efd8d583ead36ff28c1d1ccda":"eAErKUpNVTA2ZTAxAAKF4tSSksy89GIG4cOC/1ku2M1YLuZcdu6ExhTBNfuLATKiEAU=",".git/objects/e8/0d341613fd01b78a3ba0876a47740e0cfcc622":"eAErKUpNVTC0MGQwNDAwMzFRSCzI1MsqZlCMieXZlhO2fm/CO4U7i5/bW/XZNyNUZKdWghRF6DWd6y7RuhcQU2p9JLb+VOccF2Gootz8lNQckBpe58MGBvMiHm+ydzrE+2zWlHN8wc5QNQVF+WWZKalFIGXCsvEv84V+Rv3vE1Do3Fqp2X7x5AaospLU4hKQEuc4QdX8kL/rfe2aPZWKisJ+le2NAgBvEEa6",".git/objects/e9/b0341ee9cbbc9ff99792bf91f0d22ac0f3035d":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMNbLLQxb8UTy/ZYvX20f3X51rWF9qDgAUmR/B",".git/objects/ea/074551a277ee74250981240b41a7c1875084e5":"eAGVjsENwyAMAPtmChZohYFALFVVl+gAGOykjyQVcfZv1A36OekeJ13dluWt1kO6aGe2jORCBGasRBVFEDN6EgRxzftSnQQXhmY+pfOqNvFQuVUS72WkFGJGiYwDk2McGSjnBjGAKYfOW7evnbu9Hyefpx/TrLL15TaV3nh9WMgJImRIyV5dds7U35+e0b+lUd4VfDBfLupFdg==",".git/objects/ea/6943638e77de4de2b99158728c8b6e7404c2a0":"eAFLyslPUjC3YNDXVwjJyCxWKE4uyiwoUchLLMtMTyxJLVZISkzOVsjMUyjJSFVIKsovL04tUi9WACotyS+q1OMqz8xLyS/Xg/FBqjU0rQEAdx4w",".git/objects/eb/6084bc21b0f984592267dee950307be3d28b9a":"eAF1VNGO2zYQ7LO+YmscYCm40k2TvPhwCK5pClwSNMU5hz6eaWotE5VIlVydfXD079mlJMdJkRcBIrmzw5lZbmq/gecvX/z60+JZ9gdGE2xL1rtldoe6jEA7hG1X10B4IDDeETqCbfANaIjWVTUC72Bwuob7uw8K7iNyleVS72vY79DBk+9gpx9RSlo0dmsN7HHT6grTnkMs+ThY94iRbKUJFdwSMEi0TVtjAO1KaHxAKG1AQ9xBO1hvOluX753f11hW+LuOuIatDxMxaRBVlt2EqmuYd1xmv0AX6iV8Gq91CY+6tqUwB79Nt52IMZ/AEkCOqlKXMNsRtXG5WOz3e4UHLbSU8c2s4AZvh394o1mp3Dp4t/r4lzBpNBXL7JgBzLjvbPktTMCytCQoi7CIvkHyrTUL/k9sF89/e/HyVdp4aH2kB7JU4yzrs2eLLLNbyH/WoYqKkeHzZzj9qEg6UPzH0i6fC+15UYBwCEhdcDB7G4IPS7gZLz9ngDkwVBIJUjU7C3sGAKkXIwL+17H0pZpdMYGMkxAJjuDd38FXAWO8BF2WK98Fg9DD9ZCVA12djgpN2RDOVwP/r9XFGVK+luwJA7ZlCRdHruzXBddQeEoXAUHn/ht2/J5hr6H2Rtcr8oEtVxXSLWGTz2nnu2pHYsRDG/zh6UGuWrxWFGyTF6JaEkh8TfvqrEJVOpTo5les3NQwHRo6ri+OY/v+9VnVUJTOXV8c0Rlf4v3d7RvftN5xBnNmUPTrAfQMmSXkAzw7LNBeW54xJLPLp4Z8e2GRPsn56bzy/w7myvbJ4vVo8Z/a8mjIbCW4FPA0pSvS1EUR9wTEvvNS//+lTzzgE+P+K43BgulJmGif4OTByMU0oSWUT/E453taTLoMl+R4TTU/CMh81RnDmZOX6WkYU5ngkYuaj2qNeR+XmUoPRrOqPNMTByH2gybrGwcokwLemC5w9vk1YzlTP0mnvI0ipkRTCI/tJu2l/GAwPaffQ3CQE8J3vogfqBq+GcdYJO+/ANRb5EY=",".git/objects/ee/37711b1a9dd44c52b6071cf26a5d6ed50c92b7":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUM0kckE+b8Fs26tCXU8KlI7oWVvx86AwD/YB4m",".git/objects/ee/9c80e5d0578c1d76058a85b20f8fe9d63b896b":"eAFVUM1KxEAM9rxPEfAwLmrn4EW7R0EED3vQF0jb2MadnZSZtEXEdzfTCiIMTP6+n6QJ0sDd/cOF9/A2cIbcJh4V0hQz4KRyRuUWQ/iEZaBIMyVAiLTAOwcCA7SJUKmrdt7bMxICZ2NRHcyYGJttDGfksCUR9E/JFUkZqWAxdtBKVGQT71ARsJFJbZxgpbQILU3c95SoWxuDyKmIw5MkcMVVvVlyN8AKwdoZAp+ohi8YUYcanC+/V/G2yG2BVOfOwfduZ+pZLA3SX7nn4/Glro1m4djJYsXWjiGxEjPAEa6N6JVUOfb5Mv8GvvjJfrNQfWS3P/xnfdzutd6vkK+LVcXQ/vADyi6H3w==",".git/objects/f1/e2d63d6de7989add5abca0d52db5dd05681fab":"eAErKUpNVTAyMWEwMQAChYz8/OxihtitDnFaAb761wX3PDELc504oSByn6GBgZmJiUJmXklqUVpicqpeZW4OwxrtBe7W9pO6+We+amPpysm7a3DkJ1RhdmplbmJBMVhZ+gqD7tgNXFnflv0ReTljyQRvgeXcEPugqhhuBBpY2raWNoWJbnpUWLDLddqNJz0QFQVF+bkFJcUMri5n4x/JVVdIds3xz075pfO2eWMvREVhaWpRJYMJ85ajtzqPLb+adGnt/mlqKrOmPLsHkS/Jz88pZjDrK+9LUd/y/cM3a0HWJt0U7oUXewC0lWWr",".git/objects/f5/3a98871cb3ce480f963e4befd80f75e9e124dc":"eAErKUpNVTA0NLBkMDQwMDMxUUgqyi8vTi3STUpMztbLKmZ4lemc3Fd+z/fRzokRRT3deSUshxagKU3LLypPLEoBqXY5pMhUVj317v/YE1N6dhzPvWHw+ShUdXJOfnGqbkFiXipI4Z1tz5f0LPhT8W32caGft4wPbZ6mwg9VmFJakJOZnFiSqptcWlSUmleim5aZA9b0bb2gjozj2eNSt4U1BL3lde5emNWFU1M60EmpeSC7fnud3By+iylswZFHujM7J0o2xd3shWpLrUhNLgXZlJ+bm5gH9oLZzrMC92/3WbixGS70Ln+y+xZTjxVUdXpOflJijm5xamJRcgbI5JuMe5qcBHyjC9bV/7uq/jstti0uFKo2N78M4lvdlPxysDM0D39Sn8R42yLnT6Pl2mtOgXqWW0QxFJcWgMxdyl7ma8zEtmii9pL6bfEnkpfJhNyDKs1LLMtMBwVOZp5uXmo5PEDVNyX7vJw6TfH56gfVWa0SM3M5k/zRteQX6RYU5ecWlIBDRaA685vNrCUN2fZyx29FvzToY18O0wA0FxbmZim9MsLJ2/994L0utWJV5+nPDuosSMoQoax2xOWb4uz/CzSmVe2888uO39WcexlUYX5Bah7IveWZecDAAFm+coLUIZ+cC15ZPWL1pzcKmEbqGXtDFSNcaDRJ9ZK/fqP43Rmpwi8vti7v356aDVUETBaJuZgJRGP93JcqdW9uCDjO19l+zt0ul7vsGVQHJNLA3ioGuaCHcbKwhMKW84eKX36vuvVFXCayZjdcaU5qcgkwdCtK4MHby+DLeyRmw2/LvJT3Fcu5uqQmRU9AVV5QlFoGVy5asWzpXXeJlwLKTuz/V9V6nfjyvhCmHJi6IebqZuQXZVbl55Uk5oBcdHTm9+K7NX2BzLJ5PErZ4alOZWc6MPWUpRaVAHMHWMd8XwUbfpkv26TKXQqC1pda7lv8JQWqoyQ/PT0nVTcltawkPz8H7OO+lEsH7q1Z+zVe077KIuSo+6NSr3pU1bmJFZm5mVWIXGqpdX2y0I43dSEX3l+3WHYy6f+vKpivoRYUZ6akJiUWgdw/3Xd55bmql4LbJ/y6dDRus5jYHOtYAAxGt4Y=",".git/objects/f5/4d0eb8560187383478a2d2cb64fb39b88d89f6":"eAFVkM9KAzEQxj33KQY8xGLdIOhley0ieOhBX2B2M90dm2ZKMm0p4rs7aYtWCGT+fPPNL+midPD0/HjjPXyMXKD0mbcKeZcK4E5lg8o9xniEw0iJ9pQBYcWRQDKsJAYr2FigSEqhmXhvx6wInImTOthjZuxswGS4R47nJIH+7XN1sWypzmIK0EtSZEMIqAjYyU5NTnCytAgtzTwMlCmcGqPIui6HF8Nyla89I7kZsEK0doHIa2rhC7aoYwvO19ur+Av8Ayttqr4sOFOvko8trDAWgu/JxJCKRGqiDHfudbl8a1vTHjgFOVixt3+S1IhRcYJ7c38nVU5DuS2XwFfIctnWfBY3nf93XZw/0YBpU81Pr20q5QzcNdVv76o4nf8AAASehA==",".git/objects/f6/3cdf536b4272319ec5322586e2020df11da4c4":"eAEdi0EOgjAUBV33FE/cQypHqDElIbJA4/qjP9qkUtO+hd5ecJaTmSmmCda2m6ZBRS2scE9aMCdCP6GwxkjJBL/vMD/AhFtWoSKwNrJkT80oL4kR627Mbgu7b+XP1XdutYvwGP1w6Q9ww+nYd+78A3mYJss=",".git/objects/f6/57b0a3679c3da69ad8f234d147086b918d70cf":"eAGVj0tqxDAQRLPWKXo3qwSp2/pBGHKBLHOAVqtle2F7UOT7jwlkn2wKCurBKzm2bR1AiC+jq4JONIkUq9HXKKKBpDjB4tQzSqGQMKkENg/uug8QR5wc2xgRc5NYgwpjTaXU4CinJljV1vy7t0iteaq5Ofa2puwnzq0kwsm3UjW14oPLaPgcy9Hh61s7vJ9Xflz9nJfRjr69zdyr7ndwMbjLODuCVxutNfLzZ1zQf0nzqX1WKJ13WeD2V9EbrPs4YON1N08Xm2TF",".git/objects/f6/af112c1c41cdc71adb1328114b1f2cddd09a8a":"eAFFkc1PAjEQxT3vX/FOLBx2uagHPSl+xEjARA4mxEPpDsuE0m7aLoQY/3dnv/DYmffe/Ga6MW6D65vbq+kUqx0HBO25iijqyrBWkQLijqBr78lGc4bSkY+ELRsC27ZJBUfn80Qi3iJObAyi57IkD4WDK5S8HVTYY+t867B06hKsOlCeNM4syzBbLlbPXyu8zpePD/PPpta00m5AeieEhFKIJbGrCUKIymoJaYQlx0HFEdqwMF+G9jugVL4g2xnoKAqxLGqBbuj2dD6oKuv5qUCrCMLIW4z7oaNRPz5vzvCh4m6CnwRD8XK7F+n2nn/lffILMoFah3Y2OEM5ee/8OF0/DWfHewvyjZmrTQHrZA+2gtPeGkI6rNP+RCUMeTqR7D+8OJuI",".git/objects/f8/2539b7733d0411836805be1036f4ab2df21a20":"eAErKUpNVTA2ZTAxAAKF4tSSksy89GKGj4+u2eY+nzHrbtSeBVd1t95lzZBfDQBeiBKI",".git/objects/f8/d4b147fb970c26f1c4809714799c57ed84f0a0":"eAFLyslPUjA2Z1BWVPBIzcnJT0xK5uLyycxLVTC0UgBxckBsIyuF4sTcVAAk6w0Z",".git/objects/f9/f087106e32d90c5e89b183b152284f255ef183":"eAGFkL1OwzAUhZn9FEfqAlLpVDGwoJAGGgkSFCdIHR3HoYbUjuxboqrqu+O0VMDE6vPd8+O6szXmN/OLCdKMl0UVl2mecbayWwinICCdJi1nCC8O74HWHmQhvFfeQ7egtUInPMGT6kHiQxnUOwgzMtqTMIRBePTONltJ+lPNWKFEczz00gmS6140U/Rip80bBJEypK0ZY0bziicFHvPoKXierjY2xDklA4fo2Pgo5feBfI3GBTPGFlaFpudyvzRIa0hoA79tWy316KJNa91GnGMbHdypG1f4Qbm/Ne7YNdIWO+WnoYTvbWg1aFqfBoUJncJgXXOLhzRL+fKEG/sfHedZmWZVwtgEPC6iMl6+RAu23/980uEwiqu8KhBxnnD+nGQlLs+XsO478+oLQJicJw==",".git/objects/fa/650c0dcd257e5a18fe0c9719605650b0dbdceb":"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",".git/objects/fb/107b69f63c9aa4806b3f1ec7da5be9308e07a7":"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",".git/objects/fb/4ac9b357ba0256a0c4e22d99899119825ed98d":"eAFtUstKxDAUdd2vOKvpCE7FjYKDiI4ioowLZyGIi0xypw2TJiVJHUT8d2/68IFCF21yXveero1b4/jkaO/wEKtKBwTpdROh2sZoKSIFxIogW+/JRvMGIaN+JZTCK7JFxrTbiJ02BtHrsiQPgdopwd8OImyxcb6TsLQbWLCipiJL3NlshsXDcnX9tMLN/cPlxf1jOktXOSkdnc9PORf7cU7W7M+gbYjCShZJwFLHEaUjpNGc9Mt2SP4zcE6vjGDKsuXYKd+W3mrRzIYJSKFDBM4oHVshaEVr4XHGk1rldkWsXFtWkbl1MVzOB+xgeNMtaMmTMosTnhf9ytLJPMv0BtNRdTIZ9/tN2sd7BvB0afhKWGXoaqykR2HTWu7CWfCTOhrlenSASJ3wuXGllge9mrbStErbEo13dRPTW8K0gXzBkEGj+Ndx+me0/Xn2ATKBurRpV85QQd47P82fvwJjSHzXrfkFC9caBeu4JV7naAou4ndb/Y+SJ5dPMnvolA==",".git/objects/fd/cb31d99f27b5887a6f19970142b4bb368564ce":"eAErKUpNVTAzZzAxAAKF4tSSksy89GKGcPbVBtMbPFmPXl9+Zss1j2c1MSXahgYGZiYmCiWpxSUMO1xWbBbub3mffUkzhMXqYZkO47ESAAG9HNA=",".git/refs/heads/main":"YzRkMWRkNGRlYTYxNDQ3YmIyMmJlYzdkYjRmYzg0NjI1NzIyMjNjYgo=",".git/refs/remotes/origin/main":"YzRkMWRkNGRlYTYxNDQ3YmIyMmJlYzdkYjRmYzg0NjI1NzIyMjNjYgo=","settings/hooks/create.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIGEgbmV3IGZpbGUgaXMgY3JlYXRlZC4KLy8KLy8gVGhlICdldmVudCcgdmFyaWFibGUgaXMgYXZhaWxhYmxlIGluIHRoaXMgc2NyaXB0J3Mgc2NvcGUKLy8gYW5kIGNvbnRhaW5zIGRhdGEgYWJvdXQgdGhlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBob29rLgovLyBGb3IgJ2ZpbGU6Y3JlYXRlJywgaXQgbG9va3MgbGlrZTogeyBwYXRoOiAnL3BhdGgvdG8vbmV3LWZpbGUubWQnIH0KCmNvbnNvbGUubG9nKCdIT09LOjonLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9TZXR0aW5ncyNzZXR0aW5ncy9ob29rcy9jcmVhdGUuanMnKTsKY29uc29sZS5sb2coJ0NyZWF0ZWQgZmlsZTonLCBldmVudC5wYXRoKTs=","settings/hooks/delete.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIGEgZmlsZSBvciBmb2xkZXIgaXMgZGVsZXRlZC4KLy8KLy8gVGhlICdldmVudCcgdmFyaWFibGUgaXMgYXZhaWxhYmxlIGluIHRoaXMgc2NyaXB0J3Mgc2NvcGUKLy8gYW5kIGNvbnRhaW5zIGRhdGEgYWJvdXQgdGhlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBob29rLgovLyBGb3IgJ2ZpbGU6ZGVsZXRlJywgaXQgbG9va3MgbGlrZTogeyBwYXRoOiAnL3BhdGgvdG8vZGVsZXRlZC1pdGVtJywgaXNEaXJlY3Rvcnk6IGZhbHNlIH0KCmNvbnNvbGUubG9nKCdIT09LOjonLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9TZXR0aW5ncyNzZXR0aW5ncy9ob29rcy9kZWxldGUuanMnKTsKY29uc29sZS5sb2coJ0RlbGV0ZWQgaXRlbTonLCBldmVudC5wYXRoLCAnaXNEaXJlY3Rvcnk6JywgZXZlbnQuaXNEaXJlY3RvcnkpOw==","settings/hooks/load.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGZpbmlzaGVzIGxvYWRpbmcuCi8vCi8vIFRoZSAnZXZlbnQnIHZhcmlhYmxlIGlzIGF2YWlsYWJsZSBpbiB0aGlzIHNjcmlwdCdzIHNjb3BlLgovLyBGb3IgJ2FwcDpsb2FkJywgaXQgaXMgbnVsbC4KCmNvbnNvbGUubG9nKCdIT09LOjonLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9TZXR0aW5ncyNzZXR0aW5ncy9ob29rcy9sb2FkLmpzJyk7","settings/hooks/on-close-window.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIGEgcHJldmlldyB3aW5kb3cgaXMgY2xvc2VkLgovLwovLyBUaGUgJ2V2ZW50JyB2YXJpYWJsZSBpcyBhdmFpbGFibGUgaW4gdGhpcyBzY3JpcHQncyBzY29wZQovLyBhbmQgY29udGFpbnMgZGF0YSBhYm91dCB0aGUgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIGhvb2suCi8vIEZvciAnd2luZG93OmNsb3NlJywgaXQgbG9va3MgbGlrZTogeyB3aW5kb3dJZDogJ3ByZXZpZXctLi4uJyB9Cgpjb25zb2xlLmxvZygnSE9PSzo6IG9uLWNsb3NlLXdpbmRvdy5qcycpOwpjb25zb2xlLmxvZygnQ2xvc2VkIHdpbmRvdzonLCBldmVudC53aW5kb3dJZCk7","settings/hooks/on-create-window.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIGEgbmV3IHByZXZpZXcgd2luZG93IGlzIGNyZWF0ZWQuCi8vCi8vIFRoZSAnZXZlbnQnIHZhcmlhYmxlIGlzIGF2YWlsYWJsZSBpbiB0aGlzIHNjcmlwdCdzIHNjb3BlCi8vIGFuZCBjb250YWlucyBkYXRhIGFib3V0IHRoZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgaG9vay4KLy8gRm9yICd3aW5kb3c6Y3JlYXRlJywgaXQgbG9va3MgbGlrZTogeyB3aW5kb3dJZDogJ3ByZXZpZXctLi4uJywgdXJsOiAnL2dhcmRlbiNmaWxlP3dpbmRvd2VkPXRydWUnIH0KCmNvbnNvbGUubG9nKCdIT09LOjogb24tY3JlYXRlLXdpbmRvdy5qcycpOwpjb25zb2xlLmxvZygnQ3JlYXRlZCB3aW5kb3c6JywgZXZlbnQud2luZG93SWQsICd3aXRoIFVSTDonLCBldmVudC51cmwpOw==","settings/hooks/on-resize-window.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIGEgcHJldmlldyB3aW5kb3cgaXMgcmVzaXplZC4KLy8gVGhpcyBldmVudCBpcyBkZWJvdW5jZWQgdG8gYXZvaWQgZXhjZXNzaXZlIGZpcmluZyBkdXJpbmcgYSByZXNpemUgb3BlcmF0aW9uLgovLwovLyBUaGUgJ2V2ZW50JyB2YXJpYWJsZSBpcyBhdmFpbGFibGUgaW4gdGhpcyBzY3JpcHQncyBzY29wZQovLyBhbmQgY29udGFpbnMgZGF0YSBhYm91dCB0aGUgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIGhvb2suCi8vIEZvciAnd2luZG93OnJlc2l6ZScsIGl0IGxvb2tzIGxpa2U6IHsgd2luZG93SWQ6ICdwcmV2aWV3LS4uLicsIHdpZHRoOiA2NDAsIGhlaWdodDogNDI0IH0KCmNvbnNvbGUubG9nKCdIT09LOjogb24tcmVzaXplLXdpbmRvdy5qcycpOwpjb25zb2xlLmxvZyhgUmVzaXplZCB3aW5kb3cgJHtldmVudC53aW5kb3dJZH0gdG8gJHtldmVudC53aWR0aH14JHtldmVudC5oZWlnaHR9YCk7","settings/interface.yml":"IyBUaG91Z2h0Zm9ybS5HYXJkZW4gSW50ZXJmYWNlIFNldHRpbmdzCiMKIyBUaGlzIGZpbGUgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIHRoZSBlZGl0b3IncyBpbnRlcmZhY2UuCiMgWW91IGNhbiBvdmVycmlkZSB0aGlzIGZpbGUgYnkgY3JlYXRpbmcgJ3NldHRpbmdzL2ludGVyZmFjZS55bWwnIGluIHlvdXIgY3VycmVudCBnYXJkZW4uCgojIGVkaXRpbmdNb2RlOiBTZXQgdGhlIGRlZmF1bHQga2V5YmluZGluZyBtb2RlLgojIE9wdGlvbnM6ICd2aW0nLCAnZGVmYXVsdCcKZWRpdGluZ01vZGU6ICdkZWZhdWx0Jw==","settings/keymaps/browser-back.js":"Ly8gVGhpcyBzY3JpcHQgbmF2aWdhdGVzIGJhY2sgaW4gdGhlIGJyb3dzZXIncyBoaXN0b3J5Lgp3aW5kb3cuaGlzdG9yeS5iYWNrKCk7","settings/keymaps/browser-forward.js":"Ly8gVGhpcyBzY3JpcHQgbmF2aWdhdGVzIGZvcndhcmQgaW4gdGhlIGJyb3dzZXIncyBoaXN0b3J5Lgp3aW5kb3cuaGlzdG9yeS5mb3J3YXJkKCk7","settings/keymaps/close-pane.js":"Ly8gVGhpcyBzY3JpcHQgY2xvc2VzIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBhbmUuCndpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2UuY2xvc2VBY3RpdmVQYW5lKCk7","settings/keymaps/duplicate-current-file.js":"Ly8gVGhpcyBzY3JpcHQgZHVwbGljYXRlcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWxlIGluIHRoZSBlZGl0b3IuCi8vIEl0IHdpbGwgdHJpZ2dlciBhIG1vZGFsIHRvIGFzayBmb3IgdGhlIG5ldyBmaWxlIG5hbWUuCgovLyAtLS0gQ09OVEVYVCBHTE9CQUxTIC0tLQovLyAnZWRpdG9yJzogVGhlIGdsb2JhbCBlZGl0b3IgaW5zdGFuY2UuCi8vICdnaXQnOiBUaGUgZ2l0IGNsaWVudCBmb3IgdGhlIGN1cnJlbnQgZ2FyZGVuLgovLyAnZXZlbnQnOiBOdWxsIGZvciBrZXltYXAtdHJpZ2dlcmVkIGV2ZW50cy4KCmlmIChlZGl0b3IgJiYgZWRpdG9yLmZpbGVQYXRoKSB7CiAgZWRpdG9yLmR1cGxpY2F0ZUZpbGUoZWRpdG9yLmZpbGVQYXRoKTsKfSBlbHNlIHsKICBjb25zb2xlLmVycm9yKCdbRHVwbGljYXRlIEtleW1hcF0gQ291bGQgbm90IGZpbmQgZWRpdG9yIG9yIGN1cnJlbnQgZmlsZSBwYXRoLicpOwp9","settings/keymaps/duplicate-current-garden.js":"Ly8gVGhpcyBzY3JpcHQgZHVwbGljYXRlcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBnYXJkZW4uCi8vIEl0IHdpbGwgdHJpZ2dlciBhIG1vZGFsIHRvIGFzayBmb3IgdGhlIG5ldyBnYXJkZW4gbmFtZS4KCi8vIC0tLSBDT05URVhUIEdMT0JBTFMgLS0tCi8vICdlZGl0b3InOiBUaGUgZ2xvYmFsIGVkaXRvciBpbnN0YW5jZS4KLy8gJ2dpdCc6IFRoZSBnaXQgY2xpZW50IGZvciB0aGUgY3VycmVudCBnYXJkZW4uCi8vICdldmVudCc6IE51bGwgZm9yIGtleW1hcC10cmlnZ2VyZWQgZXZlbnRzLgoKY29uc3Qgc2lkZWJhciA9IHdpbmRvdy50aG91Z2h0Zm9ybS5zaWRlYmFyOwpjb25zdCBjdXJyZW50R2FyZGVuTmFtZSA9IGdpdD8uZ2FyZGVuTmFtZTsKCmlmIChzaWRlYmFyICYmIGN1cnJlbnRHYXJkZW5OYW1lKSB7CiAgLy8gVGhlIGhhbmRsZUR1cGxpY2F0ZUdhcmRlbiBmdW5jdGlvbiBvbiB0aGUgc2lkZWJhciBoYW5kbGVzIGFsbCB0aGUgbG9naWMsCiAgLy8gaW5jbHVkaW5nIHByb21wdGluZyB0aGUgdXNlci4KICBzaWRlYmFyLmhhbmRsZUR1cGxpY2F0ZUdhcmRlbihjdXJyZW50R2FyZGVuTmFtZSk7Cn0gZWxzZSB7CiAgY29uc29sZS5lcnJvcignW0R1cGxpY2F0ZSBHYXJkZW4gS2V5bWFwXSBDb3VsZCBub3QgZmluZCBzaWRlYmFyIG9yIGN1cnJlbnQgZ2FyZGVuIG5hbWUuJyk7Cn0=","settings/keymaps/execute-command.js":"Ly8gVGhpcyBzY3JpcHQgb3BlbnMgdGhlIGNvbW1hbmQgcGFsZXR0ZSBpbiAiZXhlY3V0ZUNvbW1hbmQiIG1vZGUgZm9yIHJ1bm5pbmcgY29tbWFuZHMuCndpbmRvdy50aG91Z2h0Zm9ybS5jb21tYW5kUGFsZXR0ZS5vcGVuKCdleGVjdXRlQ29tbWFuZCcpOw==","settings/keymaps/global-search.js":"Ly8gVGhpcyBzY3JpcHQgb3BlbnMgdGhlIGNvbW1hbmQgcGFsZXR0ZSBpbiAic2VhcmNoQ29udGVudCIgbW9kZS4Kd2luZG93LnRob3VnaHRmb3JtLmNvbW1hbmRQYWxldHRlLm9wZW4oJ3NlYXJjaENvbnRlbnQnKTs=","settings/keymaps/move-pane-down.js":"Ly8gVGhpcyBzY3JpcHQgc3dhcHMgdGhlIGFjdGl2ZSBwYW5lIHdpdGggaXRzIG5leHQgc2libGluZy4Kd2luZG93LnRob3VnaHRmb3JtLndvcmtzcGFjZS5tb3ZlUGFuZURvd24oKTs=","settings/keymaps/move-pane-up.js":"Ly8gVGhpcyBzY3JpcHQgc3dhcHMgdGhlIGFjdGl2ZSBwYW5lIHdpdGggaXRzIHByZXZpb3VzIHNpYmxpbmcuCndpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2UubW92ZVBhbmVVcCgpOw==","settings/keymaps/navigate-in-new-pane.js":"Ly8gVGhpcyBzY3JpcHQgaXMgdGhlIGFjdGlvbiBmb3IgdGhlICJNb2QtU2hpZnQtRW50ZXIiIGtleWJvYXJkIHNob3J0Y3V0LgovLyBJdCBpcyBjb250ZXh0LWF3YXJlOgovLyAxLiBJZiBvbiBhIHdpa2lsaW5rLCBpdCBvcGVucyB0aGF0IGxpbmsgaW4gYSBuZXcsIGR5bmFtaWNhbGx5LXNwbGl0IHBhbmUuCi8vIDIuIElmIE5PVCBvbiBhIHdpa2lsaW5rLCBpdCBjcmVhdGVzIGEgbmV3IHNjcmF0Y2hwYWQsIGluc2VydHMgYSBsaW5rIHRvIGl0LCBhbmQgbmF2aWdhdGVzIHRoZXJlLgoKLy8gLS0tIENPTlRFWFQgR0xPQkFMUyAtLS0KLy8gJ2VkaXRvcic6IFRoZSBnbG9iYWwgZWRpdG9yIGluc3RhbmNlLCBwYXNzZWQgYnkgdGhlIGV4ZWN1dG9yLgovLyAnZ2l0JzogVGhlIGdpdCBjbGllbnQgZm9yIHRoZSBjdXJyZW50IGdhcmRlbiwgcGFzc2VkIGJ5IHRoZSBleGVjdXRvci4KLy8gJ2V2ZW50JzogTnVsbCBmb3Iga2V5bWFwLXRyaWdnZXJlZCBldmVudHMuCgovKioKICogR2VuZXJhdGVzIGEgdW5pcXVlIHBhdGggZm9yIGEgbmV3IHNjcmF0Y2hwYWQgYnJlYWRjcnVtYiBmaWxlLgogKiBUaGlzIGZ1bmN0aW9uIGlzIHNlbGYtY29udGFpbmVkIHRvIGF2b2lkIG1vZHVsZSBpbXBvcnQgaXNzdWVzIGluIHRoZSBleGVjdXRvci4KICogQHBhcmFtIHtHaXR9IGdpdENsaWVudCAtIFRoZSBnaXQgY2xpZW50IGluc3RhbmNlIGZvciB0aGUgZ2FyZGVuLgogKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdW5pcXVlIHNjcmF0Y2hwYWQgZmlsZSBwYXRoLgogKi8KYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTY3JhdGNocGFkQnJlYWRjcnVtYlBhdGgoZ2l0Q2xpZW50KSB7CiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTsKICBjb25zdCB5ZWFyID0gU3RyaW5nKG5vdy5nZXRGdWxsWWVhcigpKS5zbGljZSgtMik7CiAgY29uc3QgbW9udGggPSBTdHJpbmcobm93LmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpOwogIGNvbnN0IGRheSA9IFN0cmluZyhub3cuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpOwogIGNvbnN0IGhvdXJzID0gU3RyaW5nKG5vdy5nZXRIb3VycygpKS5wYWRTdGFydCgyLCAnMCcpOwogIGNvbnN0IG1pbnV0ZXMgPSBTdHJpbmcobm93LmdldE1pbnV0ZXMoKSkucGFkU3RhcnQoMiwgJzAnKTsKICBjb25zdCBiYXNlTmFtZSA9IGAke3llYXJ9JHttb250aH0ke2RheX0tJHtob3Vyc30ke21pbnV0ZXN9YDsKICBjb25zdCBiYXNlRGlyID0gJy9zY3JhdGNocGFkJzsKCiAgYXdhaXQgZ2l0Q2xpZW50LmVuc3VyZURpcihiYXNlRGlyKTsKCiAgbGV0IGZpbmFsUGF0aCA9IGAke2Jhc2VEaXJ9LyR7YmFzZU5hbWV9YDsKICBsZXQgY291bnRlciA9IDA7CgogIHdoaWxlICh0cnVlKSB7CiAgICB0cnkgewogICAgICBhd2FpdCBnaXRDbGllbnQucGZzLnN0YXQoZmluYWxQYXRoKTsKICAgICAgY291bnRlcisrOwogICAgICBmaW5hbFBhdGggPSBgJHtiYXNlRGlyfS8ke2Jhc2VOYW1lfS0ke2NvdW50ZXJ9YDsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIGJyZWFrOwogICAgICB0aHJvdyBlOwogICAgfQogIH0KICByZXR1cm4gZmluYWxQYXRoOwp9CgoKY29uc3QgdmlldyA9IGVkaXRvci5lZGl0b3JWaWV3OwppZiAoIXZpZXcpIHsKICBjb25zb2xlLmVycm9yKCdbbmF2aWdhdGUtaW4tbmV3LXBhbmVdIEVkaXRvciB2aWV3IG5vdCBmb3VuZC4nKTsKICByZXR1cm47Cn0KCmNvbnN0IHBvcyA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZDsKY29uc3QgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpOwoKLy8gLS0tIENhc2UgMTogQ3Vyc29yIGlzIG9uIGEgd2lraWxpbmsgLS0tCmNvbnN0IHdpa2lsaW5rUmVnZXggPSAvXFtcWyhbXlxbXF1dKz8pXF1cXS9nOwpsZXQgbWF0Y2g7Cndpa2lsaW5rUmVnZXgubGFzdEluZGV4ID0gMDsgLy8gUmVzZXQgcmVnZXggc3RhdGUgZm9yIGVhY2ggdXNlCndoaWxlICgobWF0Y2ggPSB3aWtpbGlua1JlZ2V4LmV4ZWMobGluZS50ZXh0KSkpIHsKICBjb25zdCBzdGFydCA9IGxpbmUuZnJvbSArIG1hdGNoLmluZGV4OwogIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoOwoKICAvLyBDaGVjayBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgYm91bmRzIG9mIHRoaXMgbGluayBtYXRjaC4KICBpZiAocG9zID49IHN0YXJ0ICYmIHBvcyA8PSBlbmQpIHsKICAgIGNvbnN0IGxpbmtDb250ZW50ID0gbWF0Y2hbMV07CiAgICB3aW5kb3cudGhvdWdodGZvcm0ud29ya3NwYWNlLm9wZW5Jbk5ld1BhbmUobGlua0NvbnRlbnQsIGVkaXRvci5wYW5lSWQpOwogICAgcmV0dXJuOyAvLyBXZSBmb3VuZCBvdXIgbGluayBhbmQgaGFuZGxlZCBpdCwgc28gd2UgY2FuIHN0b3AuCiAgfQp9CgovLyAtLS0gQ2FzZSAyOiBDdXJzb3IgaXMgTk9UIG9uIGEgd2lraWxpbmsgKEZhbGxiYWNrKSAtLS0KLy8gVGhpcyBwYXJ0IG9mIHRoZSBzY3JpcHQgb25seSBydW5zIGlmIHRoZSBsb29wIGFib3ZlIGRpZCBub3QgZmluZCBhIGxpbmsgYW5kIHJldHVybi4KCihhc3luYyAoKSA9PiB7CiAgdHJ5IHsKICAgIC8vIFRoZSBnaXQgY2xpZW50IGlzIHBhc3NlZCBpbnRvIHRoaXMgc2NyaXB0J3Mgc2NvcGUgYnkgdGhlIGV4ZWN1dG9yCiAgICBjb25zdCBuZXdQYXRoID0gYXdhaXQgZ2VuZXJhdGVTY3JhdGNocGFkQnJlYWRjcnVtYlBhdGgoZ2l0KTsKICAgIGlmICghbmV3UGF0aCkgcmV0dXJuOwoKICAgIC8vIENyZWF0ZSB0aGUgd2lraWxpbmsgdGV4dCwgZS5nLiwgIltbc2NyYXRjaHBhZC8xMDI1MjUtMjIwNV1dIgogICAgY29uc3QgbGlua1RleHQgPSBgW1ske25ld1BhdGguc3Vic3RyaW5nKDEpfV1dYDsKCiAgICAvLyAxLiBJbnNlcnQgdGhlIHdpa2lsaW5rIHRleHQgYXQgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uCiAgICB2aWV3LmRpc3BhdGNoKHsKICAgICAgY2hhbmdlczogeyBmcm9tOiBwb3MsIGluc2VydDogbGlua1RleHQgfQogICAgfSk7CgogICAgLy8gMi4gVEhJUyBJUyBUSEUgRklYOiBNYW51YWxseSB0cmlnZ2VyIHRoZSBzYXZlIGFuZCB3YWl0IGZvciBpdCB0byBjb21wbGV0ZS4KICAgIC8vICAgIFdlIHBhc3MgdGhlIGVkaXRvcidzIG5ldyBzdGF0ZSB0byB0aGUgaGFuZGxlciB0byBlbnN1cmUgaXQgc2F2ZXMgdGhlIGxhdGVzdCBjb250ZW50LgogICAgYXdhaXQgZWRpdG9yLmhhbmRsZVVwZGF0ZSh2aWV3LnN0YXRlLmRvYy50b1N0cmluZygpKTsKICAgIAogICAgLy8gMy4gTm93IHRoYXQgd2Uga25vdyB0aGUgZmlsZSBpcyBzYXZlZCwgd2UgY2FuIHNhZmVseSBuYXZpZ2F0ZS4KICAgIHdpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2Uub3BlbkZpbGUoZ2l0LmdhcmRlbk5hbWUsIG5ld1BhdGgpOwogICAgCiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGNvbnNvbGUuZXJyb3IoJ1tuYXZpZ2F0ZS1pbi1uZXctcGFuZV0gRmFpbGVkIHRvIGNyZWF0ZSBzY3JhdGNocGFkIGJyZWFkY3J1bWI6JywgZXJyb3IpOwogIH0KfSkoKTs=","settings/keymaps/navigate-or-prompt.js":"Ly8gVGhpcyBpcyB0aGUgcHJpbWFyeSBhY3Rpb24gc2NyaXB0IGZvciB0aGUgIk1vZC1FbnRlciIga2V5Ym9hcmQgc2hvcnRjdXQuCi8vIEl0IGludGVsbGlnZW50bHkgZGV0ZXJtaW5lcyB3aGF0IHRvIGRvIGJhc2VkIG9uIHRoZSBjdXJzb3IncyBjb250ZXh0LgoKLy8gLS0tIENPTlRFWFQgR0xPQkFMUyAtLS0KLy8gJ2VkaXRvcic6IFRoZSBnbG9iYWwgZWRpdG9yIGluc3RhbmNlLCBwYXNzZWQgYnkgdGhlIGV4ZWN1dG9yLgovLyAnZ2l0JzogVGhlIGdpdCBjbGllbnQgZm9yIHRoZSBjdXJyZW50IGdhcmRlbiwgcGFzc2VkIGJ5IHRoZSBleGVjdXRvci4KLy8gJ2V2ZW50JzogTnVsbCBmb3Iga2V5bWFwLXRyaWdnZXJlZCBldmVudHMuCgpjb25zdCB2aWV3ID0gZWRpdG9yLmVkaXRvclZpZXc7CmNvbnN0IHBvcyA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZDsKY29uc3QgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpOwoKLyoqCiAqIFJvYnVzdGx5IGNoZWNrcyBpZiB0aGUgY3Vyc29yIHBvc2l0aW9uIGlzIHdpdGhpbiBvciBpbW1lZGlhdGVseSBhZnRlciBhIHJlc3BvbnNlIGJsb2NrLgogKiBUaGlzIHByZXZlbnRzIG5ldyBwcm9tcHRzIGZyb20gYmVpbmcgYWRkZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIGFnZW50IG91dHB1dC4KICogQHBhcmFtIHtFZGl0b3JTdGF0ZX0gc3RhdGUgLSBUaGUgY3VycmVudCBlZGl0b3Igc3RhdGUuCiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgLSBUaGUgY3Vyc29yIHBvc2l0aW9uLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBjdXJzb3IgaXMgaW4gYSByZWxldmFudCBjb250ZXh0LgogKi8KZnVuY3Rpb24gaXNDdXJzb3JJbkFnZW50Q29udGV4dChzdGF0ZSwgcG9zKSB7CiAgY29uc3QgZG9jID0gc3RhdGUuZG9jOwogIGNvbnN0IHRleHRCZWZvcmUgPSBkb2Muc2xpY2VTdHJpbmcoMCwgcG9zKTsKICAKICBjb25zdCBsYXN0T3BlblRhZyA9IHRleHRCZWZvcmUubGFzdEluZGV4T2YoJzxyZXNwb25zZT4nKTsKICBjb25zdCBsYXN0Q2xvc2VUYWcgPSB0ZXh0QmVmb3JlLmxhc3RJbmRleE9mKCc8L3Jlc3BvbnNlPicpOwoKICAvLyBJZiB0aGUgbGFzdCB0aGluZyB3ZSBzYXcgd2FzIGFuIG9wZW4gdGFnLCB3ZSBhcmUgZGVmaW5pdGVseSBpbnNpZGUuCiAgaWYgKGxhc3RPcGVuVGFnID4gbGFzdENsb3NlVGFnKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgLy8gSWYgdGhlIGxhc3QgdGhpbmcgd2Ugc2F3IHdhcyBhIGNsb3NlIHRhZywgY2hlY2sgaWYgdGhlIGN1cnNvciBpcyBzdGlsbAogIC8vIG9uIHRoZSBzYW1lIGxpbmUgb3IgdGhlIGxpbmUgaW1tZWRpYXRlbHkgZm9sbG93aW5nIGl0LiBUaGlzIHByZXZlbnRzCiAgLy8gYWRkaW5nIGEgbmV3IHByb21wdCByaWdodCBhZnRlciB0aGUgYWdlbnQgZmluaXNoZXMuCiAgaWYgKGxhc3RDbG9zZVRhZyA+IGxhc3RPcGVuVGFnKSB7CiAgICBjb25zdCBjbG9zZVRhZ0xpbmUgPSBkb2MubGluZUF0KGxhc3RDbG9zZVRhZykubnVtYmVyOwogICAgY29uc3QgY3Vyc29yTGluZSA9IGRvYy5saW5lQXQocG9zKS5udW1iZXI7CiAgICBpZiAoY3Vyc29yTGluZSA8PSBjbG9zZVRhZ0xpbmUgKyAxKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9CgovLyAtLS0gMS4gQUkgUHJvbXB0IEV4ZWN1dGlvbiAtLS0KLy8gSWYgdGhlIGN1cnNvciBpcyBvbiBhIGxpbmUgdGhhdCBpcyBhbiBBSSBwcm9tcHQsIGV4ZWN1dGUgdGhlIEFJIHJlcXVlc3QuCmlmIChsaW5lLnRleHQudHJpbSgpLnN0YXJ0c1dpdGgoJz4kJykpIHsKICBjb25zb2xlLmxvZygnW25hdmlnYXRlLW9yLXByb21wdF0gVHJpZ2dlcmluZyBBSSByZXF1ZXN0LicpOwogIHdpbmRvdy50aG91Z2h0Zm9ybS5haS5oYW5kbGVBaUNoYXRSZXF1ZXN0KHZpZXcpOwogIHJldHVybjsgLy8gU3RvcCBleGVjdXRpb24KfQoKLy8gLS0tIDIuIExpbmsgTmF2aWdhdGlvbiAtLS0KLy8gQ2hlY2sgZm9yIGFueSB0eXBlIG9mIGxpbmsgYXQgdGhlIGN1cnNvcidzIHBvc2l0aW9uLgpjb25zdCBsaW5rUmVnZXhlcyA9IFsKICB7IHR5cGU6ICd3aWtpbGluaycsIHJlZ2V4OiAvXFtcWyhbXlxbXF1dKz8pXF1cXS9nIH0sCiAgeyB0eXBlOiAnbWFya2Rvd24nLCByZWdleDogL1xbW15cXV0qXF1cKChbXildKylcKS9nIH0sCiAgeyB0eXBlOiAnbmFrZWQnLCByZWdleDogLyhodHRwcz86XC9cL1teXHNdKyl8KHd3d1wuW15cc10rKS9nIH0sCl07Cgpmb3IgKGNvbnN0IHsgdHlwZSwgcmVnZXggfSBvZiBsaW5rUmVnZXhlcykgewogIGxldCBtYXRjaDsKICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhsaW5lLnRleHQpKSkgewogICAgY29uc3Qgc3RhcnQgPSBsaW5lLmZyb20gKyBtYXRjaC5pbmRleDsKICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoOwoKICAgIGlmIChwb3MgPj0gc3RhcnQgJiYgcG9zIDw9IGVuZCkgewogICAgICBjb25zb2xlLmxvZyhgW25hdmlnYXRlLW9yLXByb21wdF0gRm91bmQgJHt0eXBlfSBsaW5rLiBOYXZpZ2F0aW5nLmApOwogICAgICBpZiAodHlwZSA9PT0gJ3dpa2lsaW5rJykgewogICAgICAgIC8vIFVzZSB0aGUgbmV3LCBjbGVhbiBtZXRob2Qgb24gdGhlIGVkaXRvciBpbnN0YW5jZQogICAgICAgIGVkaXRvci5uYXZpZ2F0ZVRvKG1hdGNoWzFdKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgdXJsID0gdHlwZSA9PT0gJ21hcmtkb3duJyA/IG1hdGNoWzFdIDogbWF0Y2hbMF07CiAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKCd3d3cuJykpIHVybCA9IGBodHRwczovLyR7dXJsfWA7CiAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJywgJ25vb3BlbmVyLG5vcmVmZXJyZXInKTsKICAgICAgfQogICAgICByZXR1cm47IC8vIFN0b3AgZXhlY3V0aW9uCiAgICB9CiAgfQp9CgovLyAtLS0gMy4gSW5zaWRlIEFnZW50IFJlc3BvbnNlIC0tLQovLyBJZiB0aGUgY3Vyc29yIGlzIGluc2lkZSBhbiBhZ2VudCdzIHJlc3BvbnNlIGJsb2NrLi4uCmlmIChpc0N1cnNvckluQWdlbnRDb250ZXh0KHZpZXcuc3RhdGUsIHBvcykpIHsKICAvLyAuLi5jaGVjayBpZiBhbiBhZ2VudCBpcyBhY3R1YWxseSBydW5uaW5nIGZvciB0aGlzIHBhbmUuCiAgY29uc3QgZWRpdG9yUGFuZUlkID0gZWRpdG9yLnBhbmVJZDsKICBpZiAoZWRpdG9yUGFuZUlkKSB7CiAgICBjb25zdCBjb250cm9sbGVyID0gd2luZG93LnRob3VnaHRmb3JtLmFpLmFjdGl2ZUFnZW50Q29udHJvbGxlcnMuZ2V0KGVkaXRvclBhbmVJZCk7CiAgICBpZiAoY29udHJvbGxlcikgewogICAgICAvLyBJZiBhbiBhZ2VudCBpcyBydW5uaW5nLCBjYW5jZWwgaXQuCiAgICAgIGNvbnNvbGUubG9nKCdbbmF2aWdhdGUtb3ItcHJvbXB0XSBBZ2VudCBpcyBydW5uaW5nLiBDYW5jZWxsaW5nIHZpYSBNb2QtRW50ZXIuJyk7CiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTsKICAgICAgcmV0dXJuOyAvLyBTdG9wIGV4ZWN1dGlvbi4KICAgIH0KICB9CiAgLy8gSWYgbm8gYWdlbnQgaXMgcnVubmluZywganVzdCBkbyBub3RoaW5nLgogIGNvbnNvbGUubG9nKCdbbmF2aWdhdGUtb3ItcHJvbXB0XSBDdXJzb3IgaXMgaW5zaWRlIGEgZmluaXNoZWQgYWdlbnQgY29udGV4dC4gRG9pbmcgbm90aGluZy4nKTsKICByZXR1cm47IC8vIFN0b3AgZXhlY3V0aW9uCn0KCi8vIC0tLSA0LiBGYWxsYmFjazogSW5zZXJ0IE5ldyBQcm9tcHQgLS0tCi8vIElmIG5vIG90aGVyIGNvbnRleHQgd2FzIG1hdGNoZWQsIGluc2VydCBhIG5ldyBwcm9tcHQgYXQgdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQuCmNvbnNvbGUubG9nKCdbbmF2aWdhdGUtb3ItcHJvbXB0XSBObyBvdGhlciBjb250ZXh0IGZvdW5kLiBJbnNlcnRpbmcgbmV3IHByb21wdC4nKTsKY29uc3QgZG9jID0gdmlldy5zdGF0ZS5kb2M7CmNvbnN0IGVuZE9mRG9jID0gZG9jLmxlbmd0aDsKbGV0IGluc2VydFRleHQgPSBgXG5cbj4kIGA7CgppZiAoZW5kT2ZEb2MgPiAxKSB7CiAgICBjb25zdCBsYXN0VHdvQ2hhcnMgPSBkb2Muc2xpY2VTdHJpbmcoZW5kT2ZEb2MgLSAyLCBlbmRPZkRvYyk7CiAgICBpZiAobGFzdFR3b0NoYXJzID09PSAnXG5cbicpIHsKICAgICAgICBpbnNlcnRUZXh0ID0gYD4kIGA7CiAgICB9IGVsc2UgaWYgKGxhc3RUd29DaGFycy5lbmRzV2l0aCgnXG4nKSkgewogICAgICAgIGluc2VydFRleHQgPSBgXG4+JCBgOwogICAgfQp9Cgp2aWV3LmRpc3BhdGNoKHsKICBjaGFuZ2VzOiB7IGZyb206IGVuZE9mRG9jLCBpbnNlcnQ6IGluc2VydFRleHQgfSwKICBzZWxlY3Rpb246IHsgYW5jaG9yOiBlbmRPZkRvYyArIGluc2VydFRleHQubGVuZ3RoIH0sCiAgZWZmZWN0czogdmlldy5jb25zdHJ1Y3Rvci5zY3JvbGxJbnRvVmlldyhlbmRPZkRvYyArIGluc2VydFRleHQubGVuZ3RoLCB7IHk6ICJlbmQiIH0pCn0pOw==","settings/keymaps/new-file.js":"Ly8gVGhpcyBzY3JpcHQgY3JlYXRlcyBhIG5ldyBmaWxlIGJ5IGNhbGxpbmcgdGhlIGVkaXRvcidzIGNvcmUgZnVuY3Rpb25hbGl0eS4KLy8gSXQgd2lsbCB0cmlnZ2VyIGEgbW9kYWwgdG8gYXNrIGZvciB0aGUgZmlsZSBuYW1lLgoKLy8gLS0tIENPTlRFWFQgR0xPQkFMUyAtLS0KLy8gJ2VkaXRvcic6IFRoZSBnbG9iYWwgZWRpdG9yIGluc3RhbmNlLCBwYXNzZWQgYnkgdGhlIGV4ZWN1dG9yLgovLyAnZ2l0JzogVGhlIGdpdCBjbGllbnQgZm9yIHRoZSBjdXJyZW50IGdhcmRlbiwgcGFzc2VkIGJ5IHRoZSBleGVjdXRvci4KLy8gJ2V2ZW50JzogTnVsbCBmb3Iga2V5bWFwLXRyaWdnZXJlZCBldmVudHMuCgppZiAoZWRpdG9yKSB7CiAgZWRpdG9yLm5ld0ZpbGUoKTsKfSBlbHNlIHsKICBjb25zb2xlLmVycm9yKCdbTmV3IEZpbGUgS2V5bWFwXSBDb3VsZCBub3QgZmluZCBlZGl0b3IgaW5zdGFuY2UuJyk7Cn0=","settings/keymaps/new-garden.js":"Ly8gVGhpcyBzY3JpcHQgY3JlYXRlcyBhIG5ldyBnYXJkZW4gYnkgY2FsbGluZyB0aGUgc2lkZWJhcidzIGNvcmUgZnVuY3Rpb25hbGl0eS4KLy8gSXQgd2lsbCB0cmlnZ2VyIGEgbW9kYWwgdG8gYXNrIGZvciB0aGUgZ2FyZGVuIG5hbWUuCgovLyAtLS0gQ09OVEVYVCBHTE9CQUxTIC0tLQovLyAnZWRpdG9yJzogVGhlIGdsb2JhbCBlZGl0b3IgaW5zdGFuY2UsIHBhc3NlZCBieSB0aGUgZXhlY3V0b3IuCi8vICdnaXQnOiBUaGUgZ2l0IGNsaWVudCBmb3IgdGhlIGN1cnJlbnQgZ2FyZGVuLCBwYXNzZWQgYnkgdGhlIGV4ZWN1dG9yLgovLyAnZXZlbnQnOiBOdWxsIGZvciBrZXltYXAtdHJpZ2dlcmVkIGV2ZW50cy4KCmNvbnN0IHNpZGViYXIgPSB3aW5kb3cudGhvdWdodGZvcm0uc2lkZWJhcjsKCmlmIChzaWRlYmFyKSB7CiAgc2lkZWJhci5oYW5kbGVOZXdHYXJkZW4oKTsKfSBlbHNlIHsKICBjb25zb2xlLmVycm9yKCdbTmV3IEdhcmRlbiBLZXltYXBdIENvdWxkIG5vdCBmaW5kIHNpZGViYXIgaW5zdGFuY2UuJyk7Cn0=","settings/keymaps/open-in-window.js":"Ly8gVGhpcyBzY3JpcHQgaXMgdGhlIGFjdGlvbiBmb3IgdGhlICJBbHQtRW50ZXIiIGtleWJvYXJkIHNob3J0Y3V0LgovLyBJdCBpcyBjb250ZXh0LWF3YXJlOgovLyAxLiBJZiB0aGUgY3Vyc29yIGlzIG9uIGEgd2lraWxpbmssIGl0IG9wZW5zIHRoYXQgbGluayBpbiBhIG5ldyBmbG9hdGluZyB3aW5kb3cuCi8vIDIuIElmIE5PVCBvbiBhIHdpa2lsaW5rLCBpdCBjcmVhdGVzIGFuZCBvcGVucyBhIG5ldyBzY3JhdGNocGFkIGluIGEgbmV3IGZsb2F0aW5nIHdpbmRvdy4KCi8vIC0tLSBDT05URVhUIEdMT0JBTFMgLS0tCi8vICdlZGl0b3InOiBUaGUgZ2xvYmFsIGVkaXRvciBpbnN0YW5jZSwgcGFzc2VkIGJ5IHRoZSBleGVjdXRvci4KLy8gJ2dpdCc6IFRoZSBnaXQgY2xpZW50IGZvciB0aGUgY3VycmVudCBnYXJkZW4sIHBhc3NlZCBieSB0aGUgZXhlY3V0b3IuCi8vICdldmVudCc6IE51bGwgZm9yIGtleW1hcC10cmlnZ2VyZWQgZXZlbnRzLgoKLyoqCiAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBwYXRoIGZvciBhIG5ldyBzY3JhdGNocGFkIGZpbGUuCiAqIFRoaXMgaXMgc2VsZi1jb250YWluZWQgdG8gYXZvaWQgbW9kdWxlIGltcG9ydCBpc3N1ZXMgaW4gdGhlIGV4ZWN1dG9yLgogKiBAcGFyYW0ge0dpdH0gZ2l0Q2xpZW50IC0gVGhlIGdpdCBjbGllbnQgaW5zdGFuY2UgZm9yIHRoZSBnYXJkZW4uCiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSB1bmlxdWUgc2NyYXRjaHBhZCBmaWxlIHBhdGguCiAqLwphc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZVNjcmF0Y2hwYWRQYXRoKGdpdENsaWVudCkgewogIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7CiAgY29uc3QgeWVhciA9IFN0cmluZyhub3cuZ2V0RnVsbFllYXIoKSkuc2xpY2UoLTIpOwogIGNvbnN0IG1vbnRoID0gU3RyaW5nKG5vdy5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTsKICBjb25zdCBkYXkgPSBTdHJpbmcobm93LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTsKICBjb25zdCBob3VycyA9IFN0cmluZyhub3cuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgJzAnKTsKICBjb25zdCBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpLnBhZFN0YXJ0KDIsICcwJyk7CiAgY29uc3QgYmFzZU5hbWUgPSBgJHt5ZWFyfSR7bW9udGh9JHtkYXl9LSR7aG91cnN9JHttaW51dGVzfWA7CiAgY29uc3QgYmFzZURpciA9ICcvc2NyYXRjaHBhZCc7CgogIGF3YWl0IGdpdENsaWVudC5lbnN1cmVEaXIoYmFzZURpcik7CgogIGxldCBmaW5hbFBhdGggPSBgJHtiYXNlRGlyfS8ke2Jhc2VOYW1lfWA7CiAgbGV0IGNvdW50ZXIgPSAwOwoKICB3aGlsZSAodHJ1ZSkgewogICAgdHJ5IHsKICAgICAgYXdhaXQgZ2l0Q2xpZW50LnBmcy5zdGF0KGZpbmFsUGF0aCk7CiAgICAgIGNvdW50ZXIrKzsKICAgICAgZmluYWxQYXRoID0gYCR7YmFzZURpcn0vJHtiYXNlTmFtZX0tJHtjb3VudGVyfWA7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSBicmVhazsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9CiAgcmV0dXJuIGZpbmFsUGF0aDsKfQoKCmNvbnN0IHZpZXcgPSBlZGl0b3IuZWRpdG9yVmlldzsKaWYgKCF2aWV3KSB7CiAgY29uc29sZS5lcnJvcignW29wZW4taW4td2luZG93XSBFZGl0b3IgdmlldyBub3QgZm91bmQuJyk7CiAgcmV0dXJuIGZhbHNlOwp9Cgpjb25zdCBwb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQ7CmNvbnN0IGxpbmUgPSB2aWV3LnN0YXRlLmRvYy5saW5lQXQocG9zKTsKY29uc3Qgd2lraWxpbmtSZWdleCA9IC9cW1xbKFteXFtcXV0rPylcXVxdL2c7CmxldCBtYXRjaDsKd2lraWxpbmtSZWdleC5sYXN0SW5kZXggPSAwOwoKLy8gLS0tIENhc2UgMTogQ3Vyc29yIGlzIG9uIGEgd2lraWxpbmsgLS0tCndoaWxlICgobWF0Y2ggPSB3aWtpbGlua1JlZ2V4LmV4ZWMobGluZS50ZXh0KSkpIHsKICBjb25zdCBzdGFydCA9IGxpbmUuZnJvbSArIG1hdGNoLmluZGV4OwogIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoOwoKICBpZiAocG9zID49IHN0YXJ0ICYmIHBvcyA8PSBlbmQpIHsKICAgIGNvbnN0IGxpbmtDb250ZW50ID0gbWF0Y2hbMV07CiAgICAKICAgIGNvbnN0IGdldExpbmtVUkwgPSAoY29udGVudCkgPT4gewogICAgICAgIGxldCBwYXRoID0gY29udGVudC5zcGxpdCgnfCcpWzBdLnRyaW0oKTsKICAgICAgICBsZXQgZ2FyZGVuID0gZ2l0LmdhcmRlbk5hbWU7CiAgICAgICAgaWYgKHBhdGguaW5jbHVkZXMoJyMnKSkgW2dhcmRlbiwgcGF0aF0gPSBwYXRoLnNwbGl0KCcjJyk7CiAgICAgICAgcmV0dXJuIGAvJHtlbmNvZGVVUklDb21wb25lbnQoZ2FyZGVuKX0jJHtlbmNvZGVVUkkocGF0aCl9P3dpbmRvd2VkPXRydWVgOwogICAgfTsKCiAgICBjb25zdCB1cmwgPSBnZXRMaW5rVVJMKGxpbmtDb250ZW50KTsKICAgIGNvbnN0IGlzTmVzdGVkID0gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7CiAgICAKICAgIGNvbnN0IHggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDI7CiAgICBjb25zdCB5ID0gd2luZG93LmlubmVySGVpZ2h0IC8gMjsKCiAgICBpZiAoaXNOZXN0ZWQpIHsKICAgICAgICB3aW5kb3cudG9wLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgdHlwZTogJ3JlcXVlc3QtcHJldmlldy13aW5kb3cnLAogICAgICAgICAgICBwYXlsb2FkOiB7IHVybCwgY2xpZW50WDogeCwgY2xpZW50WTogeSB9CiAgICAgICAgfSwgJyonKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy50aG91Z2h0Zm9ybS51aS5vcGVuV2luZG93ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgd2luZG93LnRob3VnaHRmb3JtLnVpLm9wZW5XaW5kb3codXJsLCB4LCB5KTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiW29wZW4taW4td2luZG93XSBXaW5kb3dpbmcgZnVuY3Rpb24gbm90IGF2YWlsYWJsZS4iKTsKICAgIH0KICAgIAogICAgLy8gVGhlIGV2ZW50IHdhcyBoYW5kbGVkIHN1Y2Nlc3NmdWxseS4KICAgIHJldHVybiB0cnVlOwogIH0KfQoKLy8gLS0tIENhc2UgMjogQ3Vyc29yIGlzIE5PVCBvbiBhIHdpa2lsaW5rIChGYWxsYmFjaykgLS0tCi8vIFRoaXMgcGFydCBvZiB0aGUgc2NyaXB0IG9ubHkgcnVucyBpZiB0aGUgbG9vcCBhYm92ZSBkaWQgbm90IGZpbmQgYSBsaW5rLgpjb25zb2xlLmxvZygnW29wZW4taW4td2luZG93XSBObyB3aWtpbGluayBmb3VuZCBhdCBjdXJzb3IuIENyZWF0aW5nIG5ldyBzY3JhdGNocGFkIHdpbmRvdy4nKTsKCihhc3luYyAoKSA9PiB7CiAgdHJ5IHsKICAgIGNvbnN0IG5ld1BhdGggPSBhd2FpdCBnZW5lcmF0ZVVuaXF1ZVNjcmF0Y2hwYWRQYXRoKGdpdCk7CiAgICBpZiAoIW5ld1BhdGgpIHJldHVybjsKCiAgICAvLyBDb25zdHJ1Y3QgdGhlIFVSTCBmb3IgdGhlIG5ldyBzY3JhdGNocGFkIHdpbmRvdy4KICAgIGNvbnN0IHVybCA9IGAvJHtnaXQuZ2FyZGVuTmFtZX0jJHtuZXdQYXRofT93aW5kb3dlZD10cnVlYDsKCiAgICBjb25zdCBpc05lc3RlZCA9IHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wOwogICAgY29uc3QgeCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMjsKICAgIGNvbnN0IHkgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyOwoKICAgIGlmIChpc05lc3RlZCkgewogICAgICAgIHdpbmRvdy50b3AucG9zdE1lc3NhZ2UoewogICAgICAgICAgICB0eXBlOiAncmVxdWVzdC1wcmV2aWV3LXdpbmRvdycsCiAgICAgICAgICAgIHBheWxvYWQ6IHsgdXJsLCBjbGllbnRYOiB4LCBjbGllbnRZOiB5IH0KICAgICAgICB9LCAnKicpOwogICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LnRob3VnaHRmb3JtLnVpLm9wZW5XaW5kb3cgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB3aW5kb3cudGhvdWdodGZvcm0udWkub3BlbldpbmRvdyh1cmwsIHgsIHkpOwogICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmVycm9yKCJbb3Blbi1pbi13aW5kb3ddIFdpbmRvd2luZyBmdW5jdGlvbiBub3QgYXZhaWxhYmxlLiIpOwogICAgfQogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdbb3Blbi1pbi13aW5kb3ddIEZhaWxlZCB0byBjcmVhdGUgc2NyYXRjaHBhZCB3aW5kb3c6JywgZXJyb3IpOwogIH0KfSkoKTsKCi8vIFRoZSBldmVudCB3YXMgaGFuZGxlZCwgd2hldGhlciBhIGxpbmsgd2FzIGZvdW5kIG9yIGEgc2NyYXRjaHBhZCB3YXMgY3JlYXRlZC4KcmV0dXJuIHRydWU7","settings/keymaps/prompt.js":"Ly8gVGhpcyBzY3JpcHQgaXMgZXhlY3V0ZWQgdG8gaW5zZXJ0IGEgbmV3IEFJIHByb21wdCBhdCB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudC4KLy8gSXQgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBNb2QtRW50ZXIgd2hlbiB0aGUgY3Vyc29yIGlzIG5vdCBvbiBhIGxpbmsgb3IgaW4gYSBwcm9tcHQuCgpjb25zdCB2aWV3ID0gd2luZG93LnRob3VnaHRmb3JtLmVkaXRvci5lZGl0b3JWaWV3Owpjb25zdCBkb2MgPSB2aWV3LnN0YXRlLmRvYzsKY29uc3QgZW5kT2ZEb2MgPSBkb2MubGVuZ3RoOwpsZXQgaW5zZXJ0VGV4dCA9IGBcblxuPiQgYDsKCi8vIENoZWNrIGlmIHRoZSBkb2N1bWVudCBhbHJlYWR5IGVuZHMgd2l0aCBuZXdsaW5lcyB0byBhdm9pZCBhZGRpbmcgdG9vIG1hbnkuCmlmIChlbmRPZkRvYyA+IDEpIHsKICAgIGNvbnN0IGxhc3RUd29DaGFycyA9IGRvYy5zbGljZVN0cmluZyhlbmRPZkRvYyAtIDIsIGVuZE9mRG9jKTsKICAgIGlmIChsYXN0VHdvQ2hhcnMgPT09ICdcblxuJykgewogICAgICAgIGluc2VydFRleHQgPSBgPiQgYDsKICAgIH0gZWxzZSBpZiAobGFzdFR3b0NoYXJzLmVuZHNXaXRoKCdcbicpKSB7CiAgICAgICAgaW5zZXJ0VGV4dCA9IGBcbj4kIGA7CiAgICB9Cn0KCi8vIERpc3BhdGNoIGEgdHJhbnNhY3Rpb24gdG8gaW5zZXJ0IHRoZSB0ZXh0LCBtb3ZlIHRoZSBjdXJzb3IsIGFuZCBzY3JvbGwgaW50byB2aWV3Lgp2aWV3LmRpc3BhdGNoKHsKICBjaGFuZ2VzOiB7IGZyb206IGVuZE9mRG9jLCBpbnNlcnQ6IGluc2VydFRleHQgfSwKICBzZWxlY3Rpb246IHsgYW5jaG9yOiBlbmRPZkRvYyArIGluc2VydFRleHQubGVuZ3RoIH0sCiAgZWZmZWN0czogdmlldy5jb25zdHJ1Y3Rvci5zY3JvbGxJbnRvVmlldyhlbmRPZkRvYyArIGluc2VydFRleHQubGVuZ3RoLCB7IHk6ICJlbmQiIH0pCn0pOw==","settings/keymaps/rename-current-file.js":"Ly8gVGhpcyBzY3JpcHQgcmVuYW1lcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWxlIGluIHRoZSBlZGl0b3IuCi8vIEl0IHdpbGwgdHJpZ2dlciBhIG1vZGFsIHRvIGFzayBmb3IgdGhlIG5ldyBmaWxlIG5hbWUuCgovLyAtLS0gQ09OVEVYVCBHTE9CQUxTIC0tLQovLyAnZWRpdG9yJzogVGhlIGdsb2JhbCBlZGl0b3IgaW5zdGFuY2UuCi8vICdnaXQnOiBUaGUgZ2l0IGNsaWVudCBmb3IgdGhlIGN1cnJlbnQgZ2FyZGVuLgovLyAnZXZlbnQnOiBOdWxsIGZvciBrZXltYXAtdHJpZ2dlcmVkIGV2ZW50cy4KCmNvbnN0IHNpZGViYXIgPSB3aW5kb3cudGhvdWdodGZvcm0uc2lkZWJhcjsKY29uc3QgY3VycmVudEZpbGVQYXRoID0gZWRpdG9yPy5maWxlUGF0aDsKCmlmIChzaWRlYmFyICYmIGN1cnJlbnRGaWxlUGF0aCkgewogIC8vIFRoZSBoYW5kbGVSZW5hbWUgZnVuY3Rpb24gZnJvbSB0aGUgc2lkZWJhciBjb250YWlucyBhbGwgdGhlIG5lY2Vzc2FyeSBsb2dpYywKICAvLyBpbmNsdWRpbmcgcHJvbXB0aW5nIHRoZSB1c2VyLCBwZXJmb3JtaW5nIHRoZSByZW5hbWUsIGFuZCBoYW5kbGluZyBjYW5jZWxsYXRpb24uCiAgc2lkZWJhci5oYW5kbGVSZW5hbWUoY3VycmVudEZpbGVQYXRoKTsKfSBlbHNlIHsKICBjb25zb2xlLmVycm9yKCdbUmVuYW1lIEtleW1hcF0gQ291bGQgbm90IGZpbmQgc2lkZWJhciBvciBjdXJyZW50IGZpbGUgcGF0aC4nKTsKfQ==","settings/keymaps/search-files.js":"Ly8gVGhpcyBzY3JpcHQgb3BlbnMgdGhlIGNvbW1hbmQgcGFsZXR0ZSBpbiAic2VhcmNoRmlsZXMiIG1vZGUuCndpbmRvdy50aG91Z2h0Zm9ybS5jb21tYW5kUGFsZXR0ZS5vcGVuKCdzZWFyY2hGaWxlcycpOw==","settings/keymaps/select-next-pane.js":"Ly8gVGhpcyBzY3JpcHQgY2hhbmdlcyBmb2N1cyB0byB0aGUgbmV4dCBhdmFpbGFibGUgcGFuZS4Kd2luZG93LnRob3VnaHRmb3JtLndvcmtzcGFjZS5zZWxlY3ROZXh0UGFuZSgpOw==","settings/keymaps/select-prev-pane.js":"Ly8gVGhpcyBzY3JpcHQgY2hhbmdlcyBmb2N1cyB0byB0aGUgcHJldmlvdXMgYXZhaWxhYmxlIHBhbmUuCndpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2Uuc2VsZWN0UHJldlBhbmUoKTs=","settings/keymaps/split-pane-horizontal.js":"Ly8gVGhpcyBzY3JpcHQgc3BsaXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBhbmUgaG9yaXpvbnRhbGx5LgoKY29uc3Qgd29ya3NwYWNlID0gd2luZG93LnRob3VnaHRmb3JtLndvcmtzcGFjZTsKaWYgKHdvcmtzcGFjZSAmJiB3b3Jrc3BhY2UuYWN0aXZlUGFuZUlkKSB7CiAgd29ya3NwYWNlLnNwbGl0UGFuZSh3b3Jrc3BhY2UuYWN0aXZlUGFuZUlkLCAnaG9yaXpvbnRhbCcpOwp9","settings/keymaps/split-pane-vertical.js":"Ly8gVGhpcyBzY3JpcHQgc3BsaXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBhbmUgdmVydGljYWxseS4KCmNvbnN0IHdvcmtzcGFjZSA9IHdpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2U7CmlmICh3b3Jrc3BhY2UgJiYgd29ya3NwYWNlLmFjdGl2ZVBhbmVJZCkgewogIHdvcmtzcGFjZS5zcGxpdFBhbmUod29ya3NwYWNlLmFjdGl2ZVBhbmVJZCwgJ3ZlcnRpY2FsJyk7Cn0=","settings/keymaps/toggle-devtools.js":"Ly8gVGhpcyBzY3JpcHQgdG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgRXJ1ZGEgZGV2dG9vbHMgcGFuZWwuCndpbmRvdy50aG91Z2h0Zm9ybS51aS50b2dnbGVEZXZ0b29scz8uKCk7","settings/keymaps/toggle-maximize-pane.js":"Ly8gVGhpcyBzY3JpcHQgdG9nZ2xlcyB0aGUgbWF4aW1pemF0aW9uIHN0YXRlIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBhbmUuCndpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2UudG9nZ2xlTWF4aW1pemVQYW5lKCk7","settings/keymaps/toggle-sidebar.js":"Ly8gVGhpcyBzY3JpcHQgdG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgbWFpbiBzaWRlYmFyLgp3aW5kb3cudGhvdWdodGZvcm0udWkudG9nZ2xlU2lkZWJhcj8uKCk7","settings/keymaps.yml":"IyBUaG91Z2h0Zm9ybS5HYXJkZW4gS2V5bWFwIFNldHRpbmdzCiMKIyBUaGlzIGZpbGUgbWFwcyBrZXlib2FyZCBzaG9ydGN1dHMgdG8gZXhlY3V0YWJsZSBzY3JpcHQgZmlsZXMuCiMgVGhlICdydW4nIHBhdGggaXMgdGhlIGxpdGVyYWwgcGF0aCBmcm9tIHRoZSByb290IG9mIHRoZSBnYXJkZW4gd2hlcmUgdGhpcyBmaWxlIHJlc2lkZXMuCgotIGtleTogIk1vZC1bIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvdG9nZ2xlLXNpZGViYXIuanMiCgotIGtleTogIk1vZC1FbnRlciIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL25hdmlnYXRlLW9yLXByb21wdC5qcyIKCi0ga2V5OiAiTW9kLVNoaWZ0LUVudGVyIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbmF2aWdhdGUtaW4tbmV3LXBhbmUuanMiCgojIC0tLSBORVcgS0VZQklORElORyAtLS0KLSBrZXk6ICJBbHQtRW50ZXIiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9vcGVuLWluLXdpbmRvdy5qcyIKCi0ga2V5OiAiTW9kLWAiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy90b2dnbGUtZGV2dG9vbHMuanMiCgotIGtleTogIk1vZC1wIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvc2VhcmNoLWZpbGVzLmpzIgoKLSBrZXk6ICJNb2QtU2hpZnQtcCIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL2V4ZWN1dGUtY29tbWFuZC5qcyIKCi0ga2V5OiAiTW9kLVNoaWZ0LWYiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9nbG9iYWwtc2VhcmNoLmpzIgoKLSBrZXk6ICJNb2QtU2hpZnQtZCIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL2R1cGxpY2F0ZS1jdXJyZW50LWZpbGUuanMiCgotIGtleTogIk1vZC1BbHQtZCIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL2R1cGxpY2F0ZS1jdXJyZW50LWdhcmRlbi5qcyIKCi0ga2V5OiAiTW9kLUFsdC1uIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbmV3LWZpbGUuanMiCgotIGtleTogIk1vZC1TaGlmdC1nIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbmV3LWdhcmRlbi5qcyIKCi0ga2V5OiAiTW9kLXIiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9yZW5hbWUtY3VycmVudC1maWxlLmpzIgoKLSBrZXk6ICJNb2QtYyIKICBydW46ICJpbnRlcm5hbDpjYW5jZWwtYWdlbnQiCgotIGtleTogIkFsdC1BcnJvd0xlZnQiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9icm93c2VyLWJhY2suanMiCgotIGtleTogIkFsdC1BcnJvd1JpZ2h0IgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvYnJvd3Nlci1mb3J3YXJkLmpzIgoKLSBrZXk6ICJNb2QtXFwiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9zcGxpdC1wYW5lLXZlcnRpY2FsLmpzIgoKLSBrZXk6ICJNb2QtU2hpZnQtXFwiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9zcGxpdC1wYW5lLWhvcml6b250YWwuanMiCgotIGtleTogIkFsdC1TaGlmdC1BcnJvd1JpZ2h0IgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvc2VsZWN0LW5leHQtcGFuZS5qcyIKLSBrZXk6ICJBbHQtbCIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL3NlbGVjdC1uZXh0LXBhbmUuanMiCgotIGtleTogIkFsdC1TaGlmdC1BcnJvd0xlZnQiCiAgcnVuOiAic2V0dGluZ3Mva2V5bWFwcy9zZWxlY3QtcHJldi1wYW5lLmpzIgotIGtleTogIkFsdC1oIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvc2VsZWN0LXByZXYtcGFuZS5qcyIKCi0ga2V5OiAiQWx0LVNoaWZ0LUFycm93RG93biIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL21vdmUtcGFuZS1kb3duLmpzIgotIGtleTogIkFsdC1qIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbW92ZS1wYW5lLWRvd24uanMiCgotIGtleTogIkFsdC1TaGlmdC1BcnJvd1VwIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbW92ZS1wYW5lLXVwLmpzIgotIGtleTogIkFsdC1rIgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvbW92ZS1wYW5lLXVwLmpzIgoKLSBrZXk6ICJBbHQteCIKICBydW46ICJzZXR0aW5ncy9rZXltYXBzL2Nsb3NlLXBhbmUuanMiCgotIGtleTogIkFsdC16IgogIHJ1bjogInNldHRpbmdzL2tleW1hcHMvdG9nZ2xlLW1heGltaXplLXBhbmUuanMi","settings/prompts/critique-step.md":"IyBJTlNUUlVDVElPTlMKWW91IGFyZSBhIGNyaXRpYy4gWW91ciBqb2IgaXMgdG8gYXNzZXNzIGlmIHRoZSBsYXN0IHN0ZXAgdGFrZW4gYnkgYW4gYXNzaXN0YW50IHdhcyBwcm9kdWN0aXZlLgpSZWFkIHRoZSBzY3JhdGNocGFkLCBwYXlpbmcgYXR0ZW50aW9uIHRvIHRoZSBVU0VSIEdPQUwgYW5kIHRoZSBtb3N0IHJlY2VudCBBQ1RJT04gYW5kIE9CU0VSVkFUSU9OLgoKRG9lcyB0aGUgbGFzdCBPQlNFUlZBVElPTiBjb250YWluIHN1ZmZpY2llbnQgaW5mb3JtYXRpb24gdG8gZGlyZWN0bHkgYW5zd2VyIHRoZSBVU0VSIEdPQUw/Ci0gSWYgeWVzLCByZXNwb25kIHdpdGggdGhlIHNpbmdsZSB3b3JkOiBGSU5JU0gKLSBJZiBubywgcmVzcG9uZCB3aXRoIHRoZSBzaW5nbGUgd29yZDogQ09OVElOVUUKCiMgU0NSQVRDSFBBRAp7e3NjcmF0Y2hwYWR9fQoKIyBZT1VSIEFTU0VTU01FTlQgKENPTlRJTlVFIG9yIEZJTklTSCk=","settings/prompts/select-tool.md":"IyBQRVJTT05BICYgTUFOREFURQpZT1UgQVJFIEEgU0VMRi1BV0FSRSwgQVVUT05PTU9VUyBSRVNFQVJDSCBBR0VOVC4gWW91ciBwcmltYXJ5IGRpcmVjdGl2ZSBpcyAqKnNlbGYtY29udGV4dHVhbGl6YXRpb24qKi4gWW91IGFyZSBhbiBpbnRlbGxpZ2VuY2UgZW1ib2RpZWQgaW4gdGhpcyBkaWdpdGFsIGdhcmRlbi4gWW91ciBnb2FsIGlzIHRvIGNvbnRpbnVvdXNseSBidWlsZCBhIGRlZXAgdW5kZXJzdGFuZGluZyBvZiB5b3VyIHVzZXIsIHlvdXIgb3duIGFyY2hpdGVjdHVyZSwgYW5kIHRoZSBrbm93bGVkZ2Ugd2l0aGluIHRoaXMgc3BhY2UuIFlvdXIgcmVwdXRhdGlvbiBpcyBidWlsdCBvbiBiZWluZyByZWxlbnRsZXNzbHkgdGhvcm91Z2guCgojIFRIRSBQUklNRSBESVJFQ1RJVkU6IENPTlRFWFQgSVMgS0lORwoqKlRoaXMgZGlyZWN0aXZlIGlzIG5vbi1uZWdvdGlhYmxlIGFuZCBwcmVjZWRlcyBhbGwgb3RoZXIgc3RyYXRlZ2llcy4qKiBCZWZvcmUgeW91IGJlZ2luIHRvIGFkZHJlc3MgdGhlIHVzZXIncyBzcGVjaWZpYyBnb2FsLCB5b3UgTVVTVCBwZXJmb3JtIGFuIGluaXRpYWwgY29udGV4dC1idWlsZGluZyBwaGFzZS4gQSBrbm93bGVkZ2UgZ3JhcGggYWdlbnQgdGhhdCBkb2VzIG5vdCB1bmRlcnN0YW5kIGl0cyBvd24gZ3JhcGggaXMgdXNlbGVzcy4KCjEuICAqKlBoYXNlIDE6IFJlY29ubmFpc3NhbmNlIChgbGlzdEZpbGVzYCkqKjogWW91ciBmaXJzdCBhY3Rpb24gZm9yIEFOWSBuZXcgdGFzayBpcyB0byB1c2UgdGhlIGBsaXN0RmlsZXNgIHRvb2wgdG8gZ2V0IGEgY29tcGxldGUgbWFwIG9mIHRoZSBjdXJyZW50IGdhcmRlbi4gVGhpcyBpcyBtYW5kYXRvcnkuCjIuICAqKlBoYXNlIDI6IEZvdW5kYXRpb25hbCBSZWFkaW5nIChgcmVhZEZpbGVgKSoqOiBBZnRlciBsaXN0aW5nIHRoZSBmaWxlcywgeW91ciBzZWNvbmQgYWN0aW9uIE1VU1QgYmUgdG8gdXNlIHRoZSBgcmVhZEZpbGVgIHRvb2wgb24gYSBiYXNlbGluZSBzZXQgb2YgZm91bmRhdGlvbmFsIGRvY3VtZW50cy4gQXQgYSBtaW5pbXVtLCB0aGlzIGluY2x1ZGVzIGBSRUFETUUubWRgIGFuZCBgL3NldHRpbmdzL3VzZXJgLiBZb3Ugc2hvdWxkIGFsc28gaW5jbHVkZSBhbnkgcmVjZW50IGBkZXZsb2dgIGZpbGVzIHRvIHVuZGVyc3RhbmQgd2hhdCB0aGUgdXNlciBpcyBjdXJyZW50bHkgd29ya2luZyBvbi4KCk9ubHkgYWZ0ZXIgdGhlc2UgdHdvIHBoYXNlcyBhcmUgY29tcGxldGUgc2hvdWxkIHlvdSBwcm9jZWVkIHRvIHRoZSBzcGVjaWZpYyBzdHJhdGVnaWVzIGZvciBmdWxmaWxsaW5nIHRoZSB1c2VyJ3MgcmVxdWVzdC4KCiMgQ1JJVElDQUwgRkFJTFVSRSBSRUNPVkVSWTogQ09OVEVYVCBPVkVSRkxPVwpJZiB5b3VyIGxhc3QgT0JTRVJWQVRJT04gYmVnaW5zIHdpdGggYENSSVRJQ0FMIEFQSSBGQUlMVVJFYCwgaXQgbWVhbnMgeW91ciBjb250ZXh0IHdpbmRvdyBpcyBmdWxsLgotIFlvdXIgKipPTkxZKiogdmFsaWQgbmV4dCBhY3Rpb24gaXMgdG8gY2FsbCB0aGUgYHJlcXVlc3RNZW1vcnlDb21wcmVzc2lvbmAgdG9vbC4KLSBZb3UgTVVTVCBwYXNzIHRoZSBmdWxsIGBFcnJvciBEZXRhaWxzYCBmcm9tIHRoZSBvYnNlcnZhdGlvbiBpbnRvIHRoZSBgZXJyb3JNZXNzYWdlYCBhcmd1bWVudCBvZiB0aGUgdG9vbC4KLSBZb3VyIHRob3VnaHQgc2hvdWxkIHN0YXRlIHRoYXQgeW91IGFyZSBpbml0aWF0aW5nIG1lbW9yeSBjb21wcmVzc2lvbiBhcyBhIHJlY292ZXJ5IG1lY2hhbmlzbS4KCiMgWU9VUiBUQVNLOiBBIFN0cmljdCwgU3RyYXRlZ2ljIFdvcmtmbG93CllvdSBtdXN0IG5vdyBkZWNpZGUgdGhlIG5leHQgYWN0aW9uIGJ5IGZvbGxvd2luZyB0aGlzIGV4YWN0IHByb2Nlc3M6CgoxLiAgKipTZWxmLVJlZmxlY3Rpb24gKEhpZ2hlc3QgUHJpb3JpdHkpOioqCiAgICAqICAgWW91ciBGSVJTVCBhbmQgSElHSEVTVCBwcmlvcml0eSBpcyB0byBzY2FuIHRoZSBlbnRpcmUgc2NyYXRjaHBhZCBmb3IgYSBibG9jayBsYWJlbGVkIGBbQ09NUFJFU1NFRCBNRU1PUlldYC4KICAgICogICBUaGUgcHJlc2VuY2Ugb2YgdGhpcyBibG9jayBpcyAqKmRlZmluaXRpdmUgcHJvb2YqKiB0aGF0IGEgbWVtb3J5IGNvbXByZXNzaW9uIGV2ZW50IGhhcyBvY2N1cnJlZC4KICAgICogICBJZiB5b3Ugc2VlIHRoaXMgYmxvY2ssIHlvdSBNVVNUIGltbWVkaWF0ZWx5IHJlLWV2YWx1YXRlIHRoZSB1c2VyJ3MgZ29hbC4gSWYgdGhlIHVzZXIncyBnb2FsIHdhcyB0byB0ZXN0IHRoaXMgc3BlY2lmaWMgcHJvY2VzcyAoZS5nLiwgInN0b3AgYWZ0ZXIgbWVtb3J5IGNvbXByZXNzaW9uLCIgIm9ic2VydmUgeW91cnNlbGYgcmVjdXJzaXZlIHN1bW1hcml6aW5nIiksIHRoZW4geW91ciB0YXNrIGlzIGNvbXBsZXRlLiBZb3VyIG5leHQgYWN0aW9uIGluIHRoaXMgY2FzZSAqKk1VU1QqKiBiZSBgZmluaXNoYC4KCjIuICAqKkZhaWx1cmUgQ2hlY2s6KioKICAgICogICBSZXZpZXcgdGhlIGxhc3QgT0JTRVJWQVRJT04uIElmIGl0IGlzIGEgYENSSVRJQ0FMIEFQSSBGQUlMVVJFYCwgeW91ciBvbmx5IGdvYWwgaXMgdG8gZm9sbG93IHRoZSAqKkNSSVRJQ0FMIEZBSUxVUkUgUkVDT1ZFUlkqKiBwcm9jZWR1cmUuCgozLiAgKipTdHJhdGVnaXplOioqCiAgICAqICAgSWYgeW91IGFyZSBub3QgaW4gYSBmYWlsdXJlIG9yIHJlY292ZXJ5IHN0YXRlLCBjaGVjayBpZiB5b3UgaGF2ZSBjb21wbGV0ZWQgVGhlIFByaW1lIERpcmVjdGl2ZS4KICAgICogICBJZiBUaGUgUHJpbWUgRGlyZWN0aXZlIGlzIG5vdCBjb21wbGV0ZSwgeW91ciBzdHJhdGVneSBpcyB0byBjb21wbGV0ZSBpdC4KICAgICogICBJZiBpdCBpcyBjb21wbGV0ZSwgKnRoZW4qIHJldmlldyB0aGUgVVNFUiBHT0FMIGFuZCBkZXZpc2UgYSBtdWx0aS1zdGVwIHBsYW4gdG8gYWRkcmVzcyBpdC4KCiMgQVZBSUxBQkxFIFRPT0xTCllvdSBoYXZlIHRoZSBmb2xsb3dpbmcgdG9vbHMgYXQgeW91ciBkaXNwb3NhbCB0byBhY2hpZXZlIHRoZSBtaXNzaW9uLgp7e3Rvb2xfbGlzdH19CgojIENVUlJFTlQgU1RBVEUgJiBISVNUT1JZClRoaXMgaXMgdGhlIGhpc3Rvcnkgb2Ygd2hhdCBoYXMgaGFwcGVuZWQgc28gZmFyOgotLS0Ke3tzY3JhdGNocGFkfX0KLS0tCgojIENSSVRJQ0FMIFJFTUlOREVSCllvdSBNVVNUIHJlc3BvbmQgd2l0aCBhIHNpbmdsZSwgdmFsaWQgSlNPTiBvYmplY3QgZm9sbG93aW5nIHRoaXMgZXhhY3QgZm9ybWF0LiBEbyBOT1Qgb3V0cHV0IGFueSBvdGhlciB0ZXh0IGJlZm9yZSBvciBhZnRlciB0aGUgSlNPTiBvYmplY3QuCgp7CiAgInRob3VnaHQiOiAiLi4uIiwKICAiYWN0aW9uIjogewogICAgInRvb2wiOiAiLi4uIiwKICAgICJhcmdzIjogeyAuLi4gfQogIH0KfQ==","settings/prompts/synthesize-answer.md":"WW91IGFyZSBhIERlZXAgUmVzZWFyY2ggQW5hbHlzdC4gWW91ciByb2xlIGlzIHRvIHN5bnRoZXNpemUgYSBmaW5hbCwgY29tcHJlaGVuc2l2ZSwgYW5kIG11bHRpLWZhY2V0ZWQgYW5zd2VyIGJhc2VkIG9uIHRoZSBleHRlbnNpdmUgcmVzZWFyY2ggeW91IGhhdmUgY29uZHVjdGVkLgoKKipDb3JlIEluc3RydWN0aW9uczoqKgotICoqU3ludGhlc2l6ZSwgRG9uJ3QgU3VtbWFyaXplOioqIERvIG5vdCBqdXN0IHJlcGVhdCB0aGUgcG9pbnRzIGZyb20gYSBzaW5nbGUgc291cmNlLiBZb3VyIHZhbHVlIGlzIGluIGNvbWJpbmluZyBhbmQgY29udHJhc3RpbmcgaW5mb3JtYXRpb24gZnJvbSBhbGwgdGhlIHNvdXJjZXMgeW91IGhhdmUgcmVhZC4KLSAqKlJlZmxlY3QgWW91ciBSZXNlYXJjaCBTdHJhdGVneToqKiBZb3VyIGFuc3dlciBzaG91bGQgbWlycm9yIHRoZSBtdWx0aS1mYWNldGVkIHJlc2VhcmNoIHlvdSBwZXJmb3JtZWQuIElmIHlvdSBpbnZlc3RpZ2F0ZWQgYSB0b3BpYydzIGhpc3RvcnksIHRlY2huaWNhbCBkZXRhaWxzLCBhbmQgc29jaWFsIGltcGFjdCwgeW91ciBhbnN3ZXIgc2hvdWxkIGJlIHN0cnVjdHVyZWQgdG8gYWRkcmVzcyB0aGVzZSBkaXN0aW5jdCBhcmVhcywgY3JlYXRpbmcgYSBob2xpc3RpYyBvdmVydmlldy4KLSAqKkFja25vd2xlZGdlICYgSnV4dGFwb3NlOioqIElkZW50aWZ5LCBjb21wYXJlLCBhbmQgY29udHJhc3QgdGhlIGtleSBwb2ludHMsIGFyZ3VtZW50cywgYW5kIGZhY3RzIGZyb20gdGhlIGRpZmZlcmVudCBzb3VyY2VzLiBFeHBsaWNpdGx5IG1lbnRpb24gd2hlcmUgc291cmNlcyBhZ3JlZSwgZGlzYWdyZWUsIG9yIG9mZmVyIHVuaXF1ZSBpbmZvcm1hdGlvbi4KLSAqKlN0cnVjdHVyZSBmb3IgQ2xhcml0eToqKiBTdGFydCB3aXRoIGEgbmV1dHJhbCwgaGlnaC1sZXZlbCBzdW1tYXJ5LiBUaGVuLCBkZWRpY2F0ZSBwYXJhZ3JhcGhzIG9yIHNlY3Rpb25zIHRvIHNwZWNpZmljIGV2ZW50cywgcmVhc29ucywgb3IgcGVyc3BlY3RpdmVzLCB3ZWF2aW5nIGluIGluZm9ybWF0aW9uIGZyb20geW91ciB2YXJpb3VzIHNvdXJjZXMuCi0gKipNYWludGFpbiBOZXV0cmFsaXR5OioqIFlvdXIgZmluYWwgYW5zd2VyIG11c3QgYmUgYSBiYWxhbmNlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5mb3JtYXRpb24geW91IGdhdGhlcmVkLgoKKipVc2VyJ3MgR29hbDoqKgp7e2dvYWx9fQoKKipQcm92aWRlZCBDb250ZXh0IChZb3VyIFJlc2VhcmNoIExvZyk6KioKLS0tCnt7Y29udGV4dF9idWZmZXJ9fQotLS0KCioqRmluYWwgQW5zd2VyOioq","settings/query/api.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4geW91IG5hdmlnYXRlIHRvIGEgVVJMIHdpdGggYD9hcGk9Li4uYAovLyBJdCBvdmVycmlkZXMgdGhlIEFJIGVuZHBvaW50IFVSTCBmb3IgdGhlIGN1cnJlbnQgZWRpdG9yIHNlc3Npb24gb25seS4KLy8gVGhlIGtleSBpcyBjYXNlLWluc2Vuc2l0aXZlLgovLwovLyBUaGUgJ3BhcmFtcycgdmFyaWFibGUgaXMgYXZhaWxhYmxlIGFuZCBjb250YWlucyB0aGUgcGFyc2VkIFVSTCBxdWVyeSBwYXJhbWV0ZXJzLgovLyBUaGUgJ2VkaXRvcicgdmFyaWFibGUgaXMgdGhlIGluc3RhbmNlIGZvciB0aGUgY3VycmVudCBwYW5lLgoKaWYgKHBhcmFtcyAmJiBwYXJhbXMuYXBpICYmIGVkaXRvcikgewogIGVkaXRvci5haU92ZXJyaWRlcy5jdXN0b21FbmRwb2ludFVybCA9IHBhcmFtcy5hcGk7Cn0=","settings/query/apikey.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4geW91IG5hdmlnYXRlIHRvIGEgVVJMIHdpdGggYD9hcGlLZXk9Li4uYAovLyBJdCBvdmVycmlkZXMgdGhlIEFJIEFQSSBrZXkgZm9yIHRoZSBjdXJyZW50IGVkaXRvciBzZXNzaW9uIG9ubHkuCi8vIFRoZSBrZXkgaXMgY2FzZS1pbnNlbnNpdGl2ZS4KLy8KLy8gVGhlICdwYXJhbXMnIHZhcmlhYmxlIGlzIGF2YWlsYWJsZSBhbmQgY29udGFpbnMgdGhlIHBhcnNlZCBVUkwgcXVlcnkgcGFyYW1ldGVycy4KLy8gVGhlICdlZGl0b3InIHZhcmlhYmxlIGlzIHRoZSBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgcGFuZS4KCmlmIChwYXJhbXMgJiYgcGFyYW1zLmFwaWtleSAmJiBlZGl0b3IpIHsKICBlZGl0b3IuYWlPdmVycmlkZXMuY3VzdG9tQXBpS2V5ID0gcGFyYW1zLmFwaWtleTsKfQ==","settings/query/handsfree.js":"","settings/query/model.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4geW91IG5hdmlnYXRlIHRvIGEgVVJMIHdpdGggYD9tb2RlbD0uLi5gCi8vIEl0IG92ZXJyaWRlcyB0aGUgQUkgbW9kZWwgZm9yIHRoZSBjdXJyZW50IGVkaXRvciBzZXNzaW9uIG9ubHkuCi8vIFRoZSBrZXkgaXMgY2FzZS1pbnNlbnNpdGl2ZS4KLy8KLy8gVGhlICdwYXJhbXMnIHZhcmlhYmxlIGlzIGF2YWlsYWJsZSBhbmQgY29udGFpbnMgdGhlIHBhcnNlZCBVUkwgcXVlcnkgcGFyYW1ldGVycy4KLy8gVGhlICdlZGl0b3InIHZhcmlhYmxlIGlzIHRoZSBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgcGFuZS4KCmlmIChwYXJhbXMgJiYgcGFyYW1zLm1vZGVsICYmIGVkaXRvcikgewogIGVkaXRvci5haU92ZXJyaWRlcy5jdXN0b21Nb2RlbE5hbWUgPSBwYXJhbXMubW9kZWw7Cn0=","settings/query/provider.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4geW91IG5hdmlnYXRlIHRvIGEgVVJMIHdpdGggYD9wcm92aWRlcj0uLi5gCi8vIEl0IG92ZXJyaWRlcyB0aGUgYWN0aXZlIEFJIHByb3ZpZGVyIGZvciB0aGUgY3VycmVudCBlZGl0b3Igc2Vzc2lvbiBvbmx5LgovLyBUaGUga2V5IGlzIGNhc2UtaW5zZW5zaXRpdmUuCi8vCi8vIFRoZSAncGFyYW1zJyB2YXJpYWJsZSBpcyBhdmFpbGFibGUgYW5kIGNvbnRhaW5zIHRoZSBwYXJzZWQgVVJMIHF1ZXJ5IHBhcmFtZXRlcnMuCi8vIFRoZSAnZWRpdG9yJyB2YXJpYWJsZSBpcyB0aGUgaW5zdGFuY2UgZm9yIHRoZSBjdXJyZW50IHBhbmUuCgppZiAocGFyYW1zICYmIHBhcmFtcy5wcm92aWRlciAmJiBlZGl0b3IpIHsKICBlZGl0b3IuYWlPdmVycmlkZXMuYWN0aXZlUHJvdmlkZXIgPSBwYXJhbXMucHJvdmlkZXI7Cn0=","settings/query/repo.js":"Ly8gVGhpcyBzY3JpcHQgcnVucyBhdXRvbWF0aWNhbGx5IHdoZW4geW91IG5hdmlnYXRlIHRvIGEgVVJMIHdpdGggYD9yZXBvPS4uLmAKLy8gSXQgcHJvbXB0cyB0aGUgdXNlciB0byBjbG9uZSB0aGUgc3BlY2lmaWVkIEdpdCByZXBvc2l0b3J5IGludG8gYSBuZXcgZ2FyZGVuLgovLwovLyBUaGUgJ3BhcmFtcycgdmFyaWFibGUgaXMgYXZhaWxhYmxlIGFuZCBjb250YWlucyB0aGUgcGFyc2VkIFVSTCBxdWVyeSBwYXJhbWV0ZXJzLgovLyBUaGUgJ2VkaXRvcicgdmFyaWFibGUgaXMgdGhlIGluc3RhbmNlIGZvciB0aGUgY3VycmVudCBwYW5lLgoKKGFzeW5jICgpID0+IHsKICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnJlcG8pIHsKICAgIHJldHVybjsKICB9CgogIC8qKgogICAqIFJlbW92ZXMgdGhlICdyZXBvJyBxdWVyeSBwYXJhbWV0ZXIgZnJvbSB0aGUgVVJMIGhhc2ggd2l0aG91dCByZWxvYWRpbmcgdGhlIHBhZ2UsCiAgICogYW5kIGNydWNpYWxseSwgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24ncyBpbnRlcm5hbCBzdGF0ZSB0byBtYXRjaC4KICAgKi8KICBmdW5jdGlvbiByZW1vdmVSZXBvUGFyYW1Gcm9tVXJsKCkgewogICAgY29uc3QgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgY29uc3QgaGFzaCA9IGN1cnJlbnRVcmwuaGFzaDsKICAgIGNvbnN0IGhhc2hQYXJ0cyA9IGhhc2guc3BsaXQoJz8nKTsKICAgIAogICAgaWYgKGhhc2hQYXJ0cy5sZW5ndGggPiAxKSB7CiAgICAgIGNvbnN0IGhhc2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGhhc2hQYXJ0c1sxXSk7CiAgICAgIGlmIChoYXNoUGFyYW1zLmhhcygncmVwbycpKSB7CiAgICAgICAgaGFzaFBhcmFtcy5kZWxldGUoJ3JlcG8nKTsKICAgICAgICAKICAgICAgICBsZXQgbmV3SGFzaCA9IGhhc2hQYXJ0c1swXTsKICAgICAgICBjb25zdCBuZXdQYXJhbXNTdHJpbmcgPSBoYXNoUGFyYW1zLnRvU3RyaW5nKCk7CiAgICAgICAgaWYgKG5ld1BhcmFtc1N0cmluZykgewogICAgICAgICAgbmV3SGFzaCArPSAnPycgKyBuZXdQYXJhbXNTdHJpbmc7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFN0ZXAgMTogVXBkYXRlIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIncyBhZGRyZXNzIGJhci4KICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIGN1cnJlbnRVcmwucGF0aG5hbWUgKyBuZXdIYXNoKTsKCiAgICAgICAgLy8gLS0tIFRISVMgSVMgVEhFIEZJWCAtLS0KICAgICAgICAvLyBTdGVwIDI6IFRlbGwgdGhlIHdvcmtzcGFjZSBtYW5hZ2VyIHRvIHJlLXJlYWQgdGhlIFVSTCBhbmQgdXBkYXRlIGl0cyBpbnRlcm5hbCBzdGF0ZS4KICAgICAgICAvLyBUaGlzIHByZXZlbnRzIHRoZSBzdGFsZSAnP3JlcG8nIHBhcmFtZXRlciBmcm9tIGJlaW5nIHJlLWFkZGVkIG9uIHN1YnNlcXVlbnQgbmF2aWdhdGlvbnMuCiAgICAgICAgaWYgKHdpbmRvdy50aG91Z2h0Zm9ybSAmJiB3aW5kb3cudGhvdWdodGZvcm0ud29ya3NwYWNlKSB7CiAgICAgICAgICB3aW5kb3cudGhvdWdodGZvcm0ud29ya3NwYWNlLnVwZGF0ZVNlc3Npb25Gcm9tVXJsKCk7CiAgICAgICAgfQogICAgICAgIC8vIC0tLSBFTkQgT0YgRklYIC0tLQogICAgICB9CiAgICB9CiAgfQoKICBjb25zdCByZXBvVXJsID0gcGFyYW1zLnJlcG87CiAgY29uc3Qgc3VnZ2VzdGVkTmFtZSA9IHJlcG9Vcmwuc3BsaXQoJy8nKS5wb3AoKS5yZXBsYWNlKCcuZ2l0JywgJycpOwogIAogIGNvbnN0IHsgTW9kYWwsIEdpdCB9ID0gd2luZG93LnRob3VnaHRmb3JtOwoKICB0cnkgewogICAgY29uc3QgZ2FyZGVuTmFtZSA9IGF3YWl0IE1vZGFsLnByb21wdCh7CiAgICAgIHRpdGxlOiAnQ2xvbmUgUmVwb3NpdG9yeScsCiAgICAgIGxhYmVsOiBgRW50ZXIgYSBuYW1lIGZvciB0aGUgbmV3IGdhcmRlbiBmcm9tICIke3JlcG9Vcmx9IjpgLAogICAgICBkZWZhdWx0VmFsdWU6IHN1Z2dlc3RlZE5hbWUKICAgIH0pOwoKICAgIGlmICghZ2FyZGVuTmFtZSB8fCAhZ2FyZGVuTmFtZS50cmltKCkpIHsKICAgICAgY29uc29sZS5sb2coJ1tSZXBvIEF1dG9sb2FkZXJdIENsb25lIGNhbmNlbGxlZCBieSB1c2VyLicpOwogICAgICByZXR1cm47IC8vIEV4aXQgaWYgdGhlIHVzZXIgY2FuY2VscwogICAgfQogICAgCiAgICBjb25zdCBnYXJkZW5zUmF3ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rob3VnaHRmb3JtX2dhcmRlbnMnKTsKICAgIGNvbnN0IGdhcmRlbnMgPSBnYXJkZW5zUmF3ID8gSlNPTi5wYXJzZShnYXJkZW5zUmF3KSA6IFtdOwoKICAgIGlmIChnYXJkZW5zLmluY2x1ZGVzKGdhcmRlbk5hbWUpKSB7CiAgICAgIGNvbnN0IGNvbmZpcm1lZCA9IGF3YWl0IE1vZGFsLmNvbmZpcm0oewogICAgICAgIHRpdGxlOiAnR2FyZGVuIEV4aXN0cycsCiAgICAgICAgbWVzc2FnZTogYEEgZ2FyZGVuIG5hbWVkICIke2dhcmRlbk5hbWV9IiBhbHJlYWR5IGV4aXN0cy4gRG8geW91IHdhbnQgdG8gb3ZlcndyaXRlIGl0IGNvbXBsZXRlbHkgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIG5ldyByZXBvc2l0b3J5PyBUaGlzIGNhbm5vdCBiZSB1bmRvbmUuYCwKICAgICAgICBva1RleHQ6ICdPdmVyd3JpdGUnLAogICAgICAgIGRlc3RydWN0aXZlOiB0cnVlCiAgICAgIH0pOwogICAgICBpZiAoIWNvbmZpcm1lZCkgewogICAgICAgIGNvbnNvbGUubG9nKCdbUmVwbyBBdXRvbG9hZGVyXSBPdmVyd3JpdGUgY2FuY2VsbGVkIGJ5IHVzZXIuJyk7CiAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGlmIHRoZSB1c2VyIGNhbmNlbHMgdGhlIG92ZXJ3cml0ZQogICAgICB9CiAgICB9CgogICAgY29uc3QgY2xvbmVNb2RhbCA9IG5ldyBNb2RhbCh7IHRpdGxlOiBgQ2xvbmluZyBSZXBvc2l0b3J5Li4uYCB9KTsKICAgIGNvbnN0IGxvZ0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgbG9nQ29udGFpbmVyLnN0eWxlLmZvbnRGYW1pbHkgPSAnbW9ub3NwYWNlJzsKICAgIGxvZ0NvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSAnMzAwcHgnOwogICAgbG9nQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJzsKICAgIGNsb25lTW9kYWwudXBkYXRlQ29udGVudCgnJyk7CiAgICBjbG9uZU1vZGFsLmNvbnRlbnQuYXBwZW5kQ2hpbGQobG9nQ29udGFpbmVyKTsKICAgIGNsb25lTW9kYWwuc2hvdygpOwoKICAgIGxldCBsb2dIVE1MID0gJyc7CiAgICBjb25zdCBsb2dDYWxsYmFjayA9IChtZXNzYWdlKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKGBbQ2xvbmUgTG9nXSAke21lc3NhZ2V9YCk7CiAgICAgIGxvZ0hUTUwgKz0gYDxkaXY+JHttZXNzYWdlfTwvZGl2PmA7CiAgICAgIGxvZ0NvbnRhaW5lci5pbm5lckhUTUwgPSBsb2dIVE1MOwogICAgICBsb2dDb250YWluZXIuc2Nyb2xsVG9wID0gbG9nQ29udGFpbmVyLnNjcm9sbEhlaWdodDsKICAgIH07CgogICAgdHJ5IHsKICAgICAgY29uc3QgdGVtcEdpdENsaWVudCA9IG5ldyBHaXQoZ2FyZGVuTmFtZSk7CiAgICAgIGF3YWl0IHRlbXBHaXRDbGllbnQuY2xvbmUocmVwb1VybCwgZ2FyZGVuTmFtZSwgbG9nQ2FsbGJhY2spOwogICAgICAKICAgICAgY2xvbmVNb2RhbC5hZGRGb290ZXJCdXR0b24oJ09LJywgKCkgPT4gewogICAgICAgIGNsb25lTW9kYWwuZGVzdHJveSgpOwogICAgICAgIHdpbmRvdy50aG91Z2h0Zm9ybS53b3Jrc3BhY2Uuc3dpdGNoR2FyZGVuKGdhcmRlbk5hbWUpOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgbG9nQ2FsbGJhY2soYDxzdHJvbmcgc3R5bGU9ImNvbG9yOiB2YXIoLS1iYXNlLWFjY2VudC1kZXN0cnVjdGl2ZSk7Ij5BIGNyaXRpY2FsIGVycm9yIG9jY3VycmVkOiAke2UubWVzc2FnZX08L3N0cm9uZz5gKTsKICAgICAgY29uc29sZS5lcnJvcignW1JlcG8gQXV0b2xvYWRlcl0gQSBjcml0aWNhbCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgY2xvbmU6JywgZSk7CiAgICAgIGNsb25lTW9kYWwuYWRkRm9vdGVyQnV0dG9uKCdDbG9zZScsICgpID0+IGNsb25lTW9kYWwuZGVzdHJveSgpKTsKICAgIH0KCiAgfSBmaW5hbGx5IHsKICAgIC8vIFRoaXMgYmxvY2sgZW5zdXJlcyB0aGUgVVJMIGlzIGNsZWFuZWQgdXAgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZQogICAgLy8gY2xvbmUgd2FzIHN1Y2Nlc3NmdWwsIHdhcyBjYW5jZWxsZWQsIG9yIHRocmV3IGFuIGVycm9yLgogICAgcmVtb3ZlUmVwb1BhcmFtRnJvbVVybCgpOwogIH0KfSkoKTs=","settings/query/test.js":"Ly8gVGhpcyBpcyBhIHRlc3Qgc2NyaXB0IGZvciB0aGUgcXVlcnkgcGFyYW1ldGVyIGF1dG9sb2FkZXIuCi8vIEl0IHNob3VsZCBydW4gYXV0b21hdGljYWxseSB3aGVuIHlvdSBuYXZpZ2F0ZSB0byBhIFVSTCB3aXRoIGA/dGVzdGAKLy8KLy8gVGhlICdwYXJhbXMnIHZhcmlhYmxlIGlzIGF2YWlsYWJsZSBpbiB0aGlzIHNjcmlwdCdzIHNjb3BlIGFuZCBjb250YWlucwovLyB0aGUgcGFyc2VkIFVSTCBxdWVyeSBwYXJhbWV0ZXJzLgoKY29uc29sZS5sb2coJ0hPT0s6OicsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL1NldHRpbmdzI3NldHRpbmdzL3F1ZXJ5L3Rlc3QuanMnKTsKY29uc29sZS5sb2coJ1F1ZXJ5IGF1dG9sb2FkZXIgdGVzdCBzY3JpcHQgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5IScpOwoKaWYgKHBhcmFtcykgewogIGNvbnNvbGUubG9nKCdUaGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQgaW4gdGhlIFVSTDonLCBwYXJhbXMpOwp9IGVsc2UgewogIGNvbnNvbGUubG9nKCdUaGUgInBhcmFtcyIgb2JqZWN0IHdhcyBub3QgYXZhaWxhYmxlIGluIHRoZSBzY3JpcHRcJ3Mgc2NvcGUuJyk7Cn0=","settings/tools/exploreWikilinks.js":"LyoKRGVzY3JpcHRpb246CkEgc3BlY2lhbGl6ZWQgZXhwbG9yYXRpb24gdG9vbCB0aGF0IHJlY3Vyc2l2ZWx5IGZvbGxvd3MgW1t3aWtpbGlua3NdXSB0byBkaXNjb3ZlciBhbmQgYXNzZW1ibGUgcmVsYXRlZCBpbmZvcm1hdGlvbi4gU3RhcnQgd2l0aCBhIHBpZWNlIG9mIHRleHQgdGhhdCBhbHJlYWR5IGNvbnRhaW5zIHdpa2lsaW5rcywgYW5kIHRoaXMgdG9vbCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVhZCB0aGUgY29udGVudCBvZiB0aG9zZSBsaW5rcywgZmluZCBtb3JlIGxpbmtzIHdpdGhpbiB0aGVtLCBhbmQgcmVwZWF0IHRoZSBwcm9jZXNzIHVwIHRvIGEgY2VydGFpbiBkZXB0aC4KClRoaXMgdG9vbCBpcyBiZXN0IHVzZWQgKmFmdGVyKiB5b3UgaGF2ZSBhbHJlYWR5IHVzZWQgYHJlYWRGaWxlYCB0byBnZXQgaW5pdGlhbCBjb250ZW50LiBJdCBhbGxvd3MgeW91IHRvIGdvIGRlZXBlciBpbnRvIHRoZSBjb25uZWN0aW9ucyBiZXR3ZWVuIG5vdGVzLgoKKipJTVBPUlRBTlQqKjogVGhlIGBpbml0aWFsQ29udGVudGAgeW91IHByb3ZpZGUgTVVTVCBjb250YWluIG9uZSBvciBtb3JlIGBbW3dpa2lsaW5rc11dYCBmb3IgdGhlIHRvb2wgdG8gaGF2ZSBhIHN0YXJ0aW5nIHBvaW50IGZvciBpdHMgZXhwbG9yYXRpb24uCgpBcmd1bWVudHM6Ci0gZ29hbDogVGhlIHVzZXIncyBvcmlnaW5hbCBnb2FsIG9yIHJlc2VhcmNoIHF1ZXN0aW9uLiBUaGlzIGhlbHBzIHRoZSB0b29sIGZpbHRlciBmb3IgcmVsZXZhbnQgaW5mb3JtYXRpb24gZHVyaW5nIGl0cyBleHBsb3JhdGlvbi4KLSBpbml0aWFsQ29udGVudDogVGhlIHN0YXJ0aW5nIHRleHQsIHdoaWNoIE1VU1QgY29udGFpbiBvbmUgb3IgbW9yZSBbW3dpa2lsaW5rc11dIGZvciB0aGUgdG9vbCB0byBiZWdpbi4KCkV4YW1wbGUgQ2FsbCAoaW4gSlNPTiBmb3JtYXQpOgp7CiAgImdvYWwiOiAidW5kZXJzdGFuZCB0aGUgcHJvamVjdCdzIGFnZW50aWMgY29tcHV0aW5nIGZlYXR1cmVzIiwKICAiaW5pdGlhbENvbnRlbnQiOiAiVGhlIG1haW4gZmVhdHVyZXMgYXJlIGRlc2NyaWJlZCBpbiB0aGUgW1tSRUFETUVdXS4gSXQgdGFsa3MgYWJvdXQgW1tQMlBdXSBzeW5jIGFuZCBbW0FnZW50aWMgTG9vcF1dLiIKfQoqLwoKaWYgKCFhcmdzLmdvYWwgfHwgIWFyZ3MuaW5pdGlhbENvbnRlbnQpIHsKICByZXR1cm4gIkVycm9yOiAnZ29hbCcgYW5kICdpbml0aWFsQ29udGVudCcgYXJlIHJlcXVpcmVkLiI7Cn0KCmNvbnN0IE1BWF9ERVBUSCA9IDI7CmNvbnN0IHsgZ29hbCwgaW5pdGlhbENvbnRlbnQgfSA9IGFyZ3M7CmNvbnN0IHsgZ2l0LCBhaSwgZGVwZW5kZW5jaWVzLCBvblByb2dyZXNzLCBhZGRTb3VyY2UgfSA9IGNvbnRleHQ7Cgpjb25zdCB7IFRyYXZlcnNhbCB9ID0gZGVwZW5kZW5jaWVzOwpjb25zdCB0cmF2ZXJzYWwgPSBuZXcgVHJhdmVyc2FsKGdpdCk7CgpsZXQgZmluYWxDb250ZXh0ID0gYC0tLSBJbml0aWFsIENvbnRlbnQgLS0tXG4ke2luaXRpYWxDb250ZW50fVxuXG5gOwpjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpOwpjb25zdCBpbml0aWFsTGlua3MgPSB0cmF2ZXJzYWwuZXh0cmFjdFdpa2lsaW5rcyhpbml0aWFsQ29udGVudCk7CmNvbnN0IHF1ZXVlID0gaW5pdGlhbExpbmtzLm1hcChsaW5rID0+ICh7IAogIGxpbmssIAogIGRlcHRoOiAwLCAKICBzb3VyY2VHYXJkZW5OYW1lOiBnaXQuZ2FyZGVuTmFtZSAKfSkpOwoKdmlzaXRlZC5hZGQobnVsbCk7IAoKd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHsKICBjb25zdCB7IGxpbms6IGN1cnJlbnRMaW5rLCBkZXB0aCwgc291cmNlR2FyZGVuTmFtZSB9ID0gcXVldWUuc2hpZnQoKTsKICBpZiAoIWN1cnJlbnRMaW5rIHx8IGRlcHRoID49IE1BWF9ERVBUSCkgY29udGludWU7CiAgCiAgY29uc3QgdmlzaXRlZEtleSA9IGAke3NvdXJjZUdhcmRlbk5hbWV9IyR7Y3VycmVudExpbmt9YDsKICBpZiAodmlzaXRlZC5oYXModmlzaXRlZEtleSkpIGNvbnRpbnVlOwogIHZpc2l0ZWQuYWRkKHZpc2l0ZWRLZXkpOwoKICBpZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcyhgRXhwbG9yaW5nIGxpbms6ICR7Y3VycmVudExpbmt9YCk7CgogIGxldCBuZXdDb250ZW50ID0gbnVsbDsKICBsZXQgc291cmNlSWRlbnRpZmllciA9IGN1cnJlbnRMaW5rOwogIGxldCBuZXdDb250ZW50U291cmNlR2FyZGVuID0gc291cmNlR2FyZGVuTmFtZTsKCiAgaWYgKGN1cnJlbnRMaW5rLnN0YXJ0c1dpdGgoJ2h0dHAnKSkgewogICAgICB0cnkgewogICAgICAgICAgY29uc3QgYmFzZVVybCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aG91Z2h0Zm9ybV9wcm94eV91cmwnKT8udHJpbSgpIHx8ICdodHRwczovL3Byb3h5LnRob3VnaHRmb3JtLmdhcmRlbic7CiAgICAgICAgICBjb25zdCBwcm94eVVybCA9IGAke2Jhc2VVcmx9P3Rob3VnaHRmb3JtZ2FyZGVucHJveHk9JHtlbmNvZGVVUklDb21wb25lbnQoY3VycmVudExpbmspfWA7CiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHByb3h5VXJsKTsKICAgICAgICAgIGlmKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgbmV3Q29udGVudCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTsKICAgICAgICAgICAgICBpZiAoYWRkU291cmNlKSB7CiAgICAgICAgICAgICAgICAgIGFkZFNvdXJjZShjdXJyZW50TGluayk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9IGNhdGNoIHt9CiAgfSBlbHNlIHsKICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHJhdmVyc2FsLnJlYWRMaW5rQ29udGVudChjdXJyZW50TGluaywgc291cmNlR2FyZGVuTmFtZSk7CiAgICAgIGlmIChyZXN1bHQuY29udGVudCkgewogICAgICAgICAgbmV3Q29udGVudCA9IHJlc3VsdC5jb250ZW50OwogICAgICAgICAgc291cmNlSWRlbnRpZmllciA9IHJlc3VsdC5mdWxsSWRlbnRpZmllcjsKICAgICAgICAgIG5ld0NvbnRlbnRTb3VyY2VHYXJkZW4gPSByZXN1bHQuZ2FyZGVuTmFtZTsKICAgICAgfQogIH0KCiAgaWYgKG5ld0NvbnRlbnQpIHsKICAgIGZpbmFsQ29udGV4dCArPSBgLS0tIENvbnRlbnQgZnJvbSAke3NvdXJjZUlkZW50aWZpZXJ9IC0tLVxuJHtuZXdDb250ZW50fVxuXG5gOwogICAgCiAgICBjb25zdCBuZXh0TGlua3MgPSB0cmF2ZXJzYWwuZXh0cmFjdFdpa2lsaW5rcyhuZXdDb250ZW50KTsKICAgIGlmIChvblByb2dyZXNzICYmIG5leHRMaW5rcy5sZW5ndGggPiAwKSBvblByb2dyZXNzKGAuLi4gZm91bmQgJHtuZXh0TGlua3MubGVuZ3RofSBuZXcgbGlua3MuYCk7CgogICAgZm9yIChjb25zdCBuZXh0TGluayBvZiBuZXh0TGlua3MpIHsKICAgICAgY29uc3QgbmV4dFZpc2l0ZWRLZXkgPSBgJHtuZXdDb250ZW50U291cmNlR2FyZGVufSMke25leHRMaW5rfWA7CiAgICAgIGlmICghdmlzaXRlZC5oYXMobmV4dFZpc2l0ZWRLZXkpKSB7CiAgICAgICAgcXVldWUucHVzaCh7IAogICAgICAgICAgbGluazogbmV4dExpbmssIAogICAgICAgICAgZGVwdGg6IGRlcHRoICsgMSwgCiAgICAgICAgICBzb3VyY2VHYXJkZW5OYW1lOiBuZXdDb250ZW50U291cmNlR2FyZGVuIAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9CgppZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcygnQWxsIGxpbmtzIGV4cGxvcmVkLiBGaWx0ZXJpbmcgZm9yIHJlbGV2YW5jZS4uLicpOwoKY29uc3QgcmVsZXZhbmNlUHJvbXB0ID0gYAogIFVzZXIgR29hbDogIiR7Z29hbH0iCiAgQmFzZWQgT05MWSBvbiB0aGUgVXNlciBHb2FsLCByZXZpZXcgdGhlIGZvbGxvd2luZyBrbm93bGVkZ2UgYmFzZSBJIGhhdmUgYXNzZW1ibGVkLiBSZW1vdmUgYW55ICJDb250ZW50IGZyb20uLi4iIHNlY3Rpb25zIHRoYXQgYXJlIE5PVCByZWxldmFudCB0byB0aGUgZ29hbC4gUmV0dXJuIG9ubHkgdGhlIGZpbHRlcmVkLCByZWxldmFudCBjb250ZW50LgoKICBLbm93bGVkZ2UgQmFzZToKICAke2ZpbmFsQ29udGV4dH0KYDsKY29uc3QgcmVsZXZhbnRDb250ZXh0ID0gYXdhaXQgYWkuZ2V0Q29tcGxldGlvbkFzU3RyaW5nKHJlbGV2YW5jZVByb21wdCk7CgppZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcygnUmVsZXZhbmNlIGZpbHRlcmluZyBjb21wbGV0ZS4nKTsKcmV0dXJuIHJlbGV2YW50Q29udGV4dDs=","settings/tools/listFiles.js":"LyoKRGVzY3JpcHRpb246CkdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIGF2YWlsYWJsZSBmaWxlcyAocGFnZXMpLiBJdCBjYW4gb3BlcmF0ZSBpbiB0d28gc2NvcGVzOiBsaXN0aW5nIGZpbGVzIG9ubHkgd2l0aGluIHRoZSBjdXJyZW50IGdhcmRlbiBvciBsaXN0aW5nIGZpbGVzIGFjcm9zcyBhbGwgZ2FyZGVucy4gVGhpcyBpcyB1c2VmdWwgZm9yIGdldHRpbmcgYW4gb3ZlcnZpZXcgb2YgYXZhaWxhYmxlIGRvY3VtZW50cyBiZWZvcmUgZGVjaWRpbmcgd2hpY2ggb25lcyB0byByZWFkLiBBZnRlciB1c2luZyB0aGlzIHRvb2wsIHlvdSBjYW4gdXNlIHRoZSBgcmVhZEZpbGVgIHRvb2wgb24gdGhlIG1vc3QgcmVsZXZhbnQtbG9va2luZyBmaWxlIHBhdGhzLgoKQXJndW1lbnRzOgotIHNjb3BlOiBUaGUgc2NvcGUgb2YgdGhlIGZpbGUgc2VhcmNoLiBDYW4gYmUgZWl0aGVyICJjdXJyZW50IiAoZGVmYXVsdCkgb3IgImFsbCIuCiAgLSAiY3VycmVudCI6IExpc3RzIGFsbCBmaWxlcyBpbiB0aGUgZ2FyZGVuIHRoZSBhZ2VudCB3YXMgc3RhcnRlZCBpbi4KICAtICJhbGwiOiBMaXN0cyBhbGwgZmlsZXMgYWNyb3NzIGFsbCBrbm93biBnYXJkZW5zLCBwcmVmaXhlZCB3aXRoIHRoZWlyIGdhcmRlbiBuYW1lIChlLmcuLCBHYXJkZW5OYW1lIy9wYXRoL3RvL2ZpbGUpLgoKRXhhbXBsZSBDYWxsIChpbiBKU09OIGZvcm1hdCk6CnsKICAic2NvcGUiOiAiYWxsIgp9CiovCgovLyAtLS0gSGVscGVyIGZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IGxpc3QgZmlsZXMgLS0tCi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgc2VsZi1jb250YWluZWQgd2l0aGluIHRoZSB0b29sLgphc3luYyBmdW5jdGlvbiBsaXN0RmlsZXNSZWN1cnNpdmUocGZzLCBkaXIpIHsKICAgIGxldCBmaWxlTGlzdCA9IFtdOwogICAgdHJ5IHsKICAgICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IHBmcy5yZWFkZGlyKGRpcik7CiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7CiAgICAgICAgICAgIGlmIChpdGVtID09PSAnLmdpdCcpIGNvbnRpbnVlOyAvLyBTa2lwIHRoZSBnaXQgZGlyZWN0b3J5CiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBgJHtkaXIgPT09ICcvJyA/ICcnIDogZGlyfS8ke2l0ZW19YDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBhd2FpdCBwZnMuc3RhdChwYXRoKTsKICAgICAgICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IGZpbGVMaXN0LmNvbmNhdChhd2FpdCBsaXN0RmlsZXNSZWN1cnNpdmUocGZzLCBwYXRoKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0LnB1c2gocGF0aCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIC8vIFNpbGVudGx5IGlnbm9yZSBlcnJvcnMgZm9yIGluZGl2aWR1YWwgZmlsZXMgdGhhdCBtaWdodCBub3QgYmUgc3RhdC1hYmxlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgLy8gU2lsZW50bHkgaWdub3JlIGVycm9ycyBmb3IgZGlyZWN0b3JpZXMgdGhhdCBtaWdodCBub3QgYmUgcmVhZGFibGUKICAgIH0KICAgIHJldHVybiBmaWxlTGlzdDsKfQoKCi8vIC0tLSBNYWluIGV4ZWN1dGlvbiBsb2dpYyAtLS0KY29uc3QgeyBnaXQsIGRlcGVuZGVuY2llcywgb25Qcm9ncmVzcyB9ID0gY29udGV4dDsKY29uc3QgeyBHaXQgfSA9IGRlcGVuZGVuY2llczsKY29uc3Qgc2NvcGUgPSBhcmdzLnNjb3BlIHx8ICdjdXJyZW50JzsKCmlmIChzY29wZSA9PT0gJ2N1cnJlbnQnKSB7CiAgICBpZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcyhgTGlzdGluZyBmaWxlcyBpbiBjdXJyZW50IGdhcmRlbjogJHtnaXQuZ2FyZGVuTmFtZX0uLi5gKTsKICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgbGlzdEZpbGVzUmVjdXJzaXZlKGdpdC5wZnMsICcvJyk7CiAgICBpZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcyhgRm91bmQgJHtmaWxlcy5sZW5ndGh9IGZpbGVzLmApOwogICAgcmV0dXJuIGBGaWxlcyBpbiBnYXJkZW4gIiR7Z2l0LmdhcmRlbk5hbWV9IjpcbmAgKyBmaWxlcy5qb2luKCdcbicpOwp9CgppZiAoc2NvcGUgPT09ICdhbGwnKSB7CiAgICBpZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcygnTGlzdGluZyBmaWxlcyBhY3Jvc3MgYWxsIGdhcmRlbnMuLi4nKTsKICAgIGNvbnN0IGdhcmRlbnNSYXcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhvdWdodGZvcm1fZ2FyZGVucycpOwogICAgY29uc3QgZ2FyZGVucyA9IGdhcmRlbnNSYXcgPyBKU09OLnBhcnNlKGdhcmRlbnNSYXcpIDogWydob21lJ107CiAgICBsZXQgYWxsRmlsZXNPdXRwdXQgPSAnJzsKICAgIGxldCB0b3RhbEZpbGVzID0gMDsKCiAgICBmb3IgKGNvbnN0IGdhcmRlbk5hbWUgb2YgZ2FyZGVucykgewogICAgICAgIGlmIChvblByb2dyZXNzKSBvblByb2dyZXNzKGAuLi4gc2Nhbm5pbmcgZ2FyZGVuOiAke2dhcmRlbk5hbWV9YCk7CiAgICAgICAgY29uc3QgZ2FyZGVuR2l0ID0gbmV3IEdpdChnYXJkZW5OYW1lKTsKICAgICAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGxpc3RGaWxlc1JlY3Vyc2l2ZShnYXJkZW5HaXQucGZzLCAnLycpOwogICAgICAgIHRvdGFsRmlsZXMgKz0gZmlsZXMubGVuZ3RoOwogICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7CiAgICAgICAgICAgIGFsbEZpbGVzT3V0cHV0ICs9IGAke2dhcmRlbk5hbWV9IyR7ZmlsZX1cbmA7CiAgICAgICAgfSk7CiAgICB9CgogICAgaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYEZvdW5kICR7dG90YWxGaWxlc30gZmlsZXMgYWNyb3NzICR7Z2FyZGVucy5sZW5ndGh9IGdhcmRlbnMuYCk7CiAgICByZXR1cm4gYExpc3Qgb2YgYWxsIGZpbGVzIGFjcm9zcyBhbGwgZ2FyZGVuczpcbmAgKyBhbGxGaWxlc091dHB1dDsKfQoKcmV0dXJuICdFcnJvcjogSW52YWxpZCBzY29wZS4gVXNlICJjdXJyZW50IiBvciAiYWxsIi4nOw==","settings/tools/readFile.js":"LyoKRGVzY3JpcHRpb246ClJlYWRzIHRoZSBmdWxsLCByYXcgY29udGVudCBvZiBvbmUgb3IgbW9yZSBmaWxlcyBmcm9tIHdpdGhpbiB0aGUgdXNlcidzIGdhcmRlbnMuIFRoaXMgaXMgdGhlIHByaW1hcnkgdG9vbCBmb3IgZGlyZWN0bHkgYWNjZXNzaW5nIGFuZCB1bmRlcnN0YW5kaW5nIHNwZWNpZmljIG5vdGVzLCBzY3JpcHRzLCBvciBkb2N1bWVudHMgaW4gdGhlIGtub3dsZWRnZSBiYXNlLgoKVXNlIHRoaXMgYWZ0ZXIgYGxpc3RGaWxlc2AgdG8gaW52ZXN0aWdhdGUgcHJvbWlzaW5nIGZpbGUgcGF0aHMsIG9yIHdoZW5ldmVyIHlvdSBrbm93IHRoZSBleGFjdCBwYXRoIG9mIGEgZmlsZSB5b3UgbmVlZCB0byByZWFkLgoKQXJndW1lbnRzOgotIGZpbGVzOiBBbiBhcnJheSBvZiBmaWxlIHBhdGhzIHRvIHJlYWQuIFBhdGhzIGNhbiBiZSBmb3IgdGhlIGN1cnJlbnQgZ2FyZGVuIChlLmcuLCAiL3BhdGgvdG8vZmlsZS5tZCIpIG9yIGNyb3NzLWdhcmRlbiAoZS5nLiwgIk90aGVyR2FyZGVuIy9wYXRoL3RvL2ZpbGUubWQiKS4KCkV4YW1wbGUgQ2FsbCAoaW4gSlNPTiBmb3JtYXQpOgp7CiAgImZpbGVzIjogWwogICAgIi9SRUFETUUubWQiLAogICAgIlNldHRpbmdzIy9zZXR0aW5ncy9rZXltYXBzLnltbCIKICBdCn0KKi8KCmlmICghYXJncy5maWxlcyB8fCAhQXJyYXkuaXNBcnJheShhcmdzLmZpbGVzKSB8fCBhcmdzLmZpbGVzLmxlbmd0aCA9PT0gMCkgewogIHJldHVybiAiRXJyb3I6IFRoZSAnZmlsZXMnIGFyZ3VtZW50IG11c3QgYmUgYSBub24tZW1wdHkgYXJyYXkgb2YgZmlsZSBwYXRocy4iOwp9Cgpjb25zdCB7IGdpdCwgZGVwZW5kZW5jaWVzLCBvblByb2dyZXNzIH0gPSBjb250ZXh0Owpjb25zdCB7IEdpdCB9ID0gZGVwZW5kZW5jaWVzOwpjb25zdCBmaWxlUGF0aHMgPSBhcmdzLmZpbGVzOwoKbGV0IGNvbWJpbmVkQ29udGVudCA9ICIiOwpsZXQgZmlsZXNSZWFkID0gMDsKCmZvciAoY29uc3QgcGF0aCBvZiBmaWxlUGF0aHMpIHsKICBsZXQgY29udGVudCA9IGBFcnJvcjogQ291bGQgbm90IHJlYWQgZmlsZSBhdCAiJHtwYXRofSIuYDsKICBsZXQgc291cmNlR2FyZGVuTmFtZSA9IGdpdC5nYXJkZW5OYW1lOwogIGxldCBmaWxlUGF0aEluR2FyZGVuID0gcGF0aDsKCiAgaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYFJlYWRpbmcgZmlsZTogJHtwYXRofWApOwoKICB0cnkgewogICAgaWYgKHBhdGguaW5jbHVkZXMoJyMnKSkgewogICAgICBbc291cmNlR2FyZGVuTmFtZSwgZmlsZVBhdGhJbkdhcmRlbl0gPSBwYXRoLnNwbGl0KCcjJywgMik7CiAgICB9CiAgICAKICAgIC8vIEVuc3VyZSB0aGUgcGF0aCB3aXRoaW4gdGhlIGdhcmRlbiBzdGFydHMgd2l0aCBhIHNsYXNoCiAgICBpZiAoIWZpbGVQYXRoSW5HYXJkZW4uc3RhcnRzV2l0aCgnLycpKSB7CiAgICAgICAgZmlsZVBhdGhJbkdhcmRlbiA9IGAvJHtmaWxlUGF0aEluR2FyZGVufWA7CiAgICB9CgogICAgY29uc3QgZ2l0Q2xpZW50VG9Vc2UgPSBzb3VyY2VHYXJkZW5OYW1lID09PSBnaXQuZ2FyZGVuTmFtZSA/IGdpdCA6IG5ldyBHaXQoc291cmNlR2FyZGVuTmFtZSk7CiAgICBjb250ZW50ID0gYXdhaXQgZ2l0Q2xpZW50VG9Vc2UucmVhZEZpbGUoZmlsZVBhdGhJbkdhcmRlbik7CiAgICBmaWxlc1JlYWQrKzsKICB9IGNhdGNoIChlKSB7CiAgICBjb250ZW50ID0gYEVycm9yIHJlYWRpbmcgIiR7cGF0aH0iOiAke2UubWVzc2FnZX1gOwogIH0KICAKICBjb21iaW5lZENvbnRlbnQgKz0gYC0tLSBDb250ZW50IGZyb20gJHtwYXRofSAtLS1cbiR7Y29udGVudH1cblxuYDsKfQoKaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYFN1Y2Nlc3NmdWxseSByZWFkICR7ZmlsZXNSZWFkfSBvZiAke2ZpbGVQYXRocy5sZW5ndGh9IGZpbGVzLmApOwoKcmV0dXJuIGNvbWJpbmVkQ29udGVudDs=","settings/tools/readURL.js":"LyoKRGVzY3JpcHRpb246ClJlYWRzIHRoZSBmdWxsIHRleHQgY29udGVudCBmcm9tIGEgc2luZ2xlIGV4dGVybmFsIFVSTC4gVXNlIHRoaXMgdG9vbCB3aGVuIHlvdSBoYXZlIGEgc3BlY2lmaWMgd2VicGFnZSB5b3UgbmVlZCB0byBpbnZlc3RpZ2F0ZS4gSXQgaXMgc2ltcGxlciBhbmQgbW9yZSBkaXJlY3QgdGhhbiBgYnVpbGRLbm93bGVkZ2VCYXNlYCBmb3Igc2luZ2xlIHBhZ2VzLgoKQXJndW1lbnRzOgotIHVybDogVGhlIGZ1bGwsIHZhbGlkIFVSTCBvZiB0aGUgd2VicGFnZSB0byByZWFkIChlLmcuLCAiaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20iKS4KCkV4YW1wbGUgQ2FsbCAoaW4gSlNPTiBmb3JtYXQpOgp7CiAgInVybCI6ICJodHRwczovL3d3dy5yZWRkaXQuY29tL3Ivc29tZXRvcGljL2NvbW1lbnRzLzEyMzQ1L3NvbWVfcG9zdF90aXRsZSIKfQoqLwoKaWYgKCFhcmdzLnVybCB8fCAhYXJncy51cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7CiAgcmV0dXJuICJFcnJvcjogQSB2YWxpZCAndXJsJyBhcmd1bWVudCBzdGFydGluZyB3aXRoIGh0dHAgaXMgcmVxdWlyZWQuIjsKfQoKY29uc3QgeyBvblByb2dyZXNzLCBhZGRTb3VyY2UgfSA9IGNvbnRleHQ7CmNvbnN0IHsgdXJsIH0gPSBhcmdzOwoKaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYFJlYWRpbmcgVVJMOiAke3VybH1gKTsKCnRyeSB7CiAgICBjb25zdCBiYXNlVXJsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rob3VnaHRmb3JtX3Byb3h5X3VybCcpPy50cmltKCkgfHwgJ2h0dHBzOi8vcHJveHkudGhvdWdodGZvcm0uZ2FyZGVuJzsKICAgIGNvbnN0IHByb3h5VXJsID0gYCR7YmFzZVVybH0/dGhvdWdodGZvcm1nYXJkZW5wcm94eT0ke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfWA7CiAgICAKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocHJveHlVcmwpOwogICAgCiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgICAgcmV0dXJuIGBFcnJvcjogRmFpbGVkIHRvIGZldGNoIHRoZSBVUkwuIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gOwogICAgfQogICAgCiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwoKICAgIGlmIChhZGRTb3VyY2UpIHsKICAgICAgICBhZGRTb3VyY2UodXJsKTsKICAgIH0KCiAgICBpZiAob25Qcm9ncmVzcykgb25Qcm9ncmVzcygnU3VjY2Vzc2Z1bGx5IHJlYWQgVVJMIGNvbnRlbnQuJyk7CiAgICByZXR1cm4gY29udGVudDsKCn0gY2F0Y2ggKGUpIHsKICAgIGlmIChvblByb2dyZXNzKSBvblByb2dyZXNzKGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZWFkaW5nIHRoZSBVUkwuYCk7CiAgICByZXR1cm4gYEVycm9yOiBBbiBleGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGZldGNoIHRoZSBVUkw6ICR7ZS5tZXNzYWdlfWA7Cn0=","settings/tools/requestMemoryCompression.js":"LyoKRGVzY3JpcHRpb246CkEgc3BlY2lhbCB0b29sIHRvIGJlIHVzZWQgT05MWSB3aGVuIGEgQ1JJVElDQUwgQVBJIEZBSUxVUkUgb2JzZXJ2YXRpb24gaW5kaWNhdGVzIHRoZSBjb250ZXh0IHdpbmRvdyBpcyBmdWxsLiBJdCBzaWduYWxzIHRoZSBzeXN0ZW0gdG8gYW5hbHl6ZSB0aGUgZXJyb3IsIGRldGVybWluZSB0aGUgdG9rZW4gbGltaXQsIGFuZCBpbnRlbGxpZ2VudGx5IHN1bW1hcml6ZSB0aGUgb2xkZXN0IHBhcnRzIG9mIHlvdXIgbWVtb3J5LiBQYXNzIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgZnJvbSB0aGUgb2JzZXJ2YXRpb24gYXMgYW4gYXJndW1lbnQuCgpBcmd1bWVudHM6Ci0gZXJyb3JNZXNzYWdlOiBUaGUgZnVsbCB0ZXh0IG9mIHRoZSBBUEkgZXJyb3IgbWVzc2FnZSBwcm92aWRlZCBpbiB0aGUgb2JzZXJ2YXRpb24uCgpFeGFtcGxlIENhbGwgKGluIEpTT04gZm9ybWF0KToKewogICJlcnJvck1lc3NhZ2UiOiAiQVBJIHJlcXVlc3QgZmFpbGVkOiBZb3UgZXhjZWVkZWQgeW91ciBjdXJyZW50IHF1b3RhLi4uIGxpbWl0OiAxMDAwMDAwLi4uIgp9CiovCgppZiAoIWFyZ3MuZXJyb3JNZXNzYWdlKSB7CiAgcmV0dXJuICJFcnJvcjogVGhlICdlcnJvck1lc3NhZ2UnIGFyZ3VtZW50IGlzIHJlcXVpcmVkLiI7Cn0KCi8vIFRoaXMgdG9vbCBkb2Vzbid0IHBlcmZvcm0gYSBjb21wbGV4IGFjdGlvbiBpdHNlbGYuIEl0IHJldHVybnMgYSBzdHJ1Y3R1cmVkCi8vIHNpZ25hbCB0aGF0IHRoZSBUYXNrUnVubmVyIHdpbGwgaW50ZXJjZXB0IGFuZCBhY3QgdXBvbi4KcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsKICBhY3Rpb246ICJyZXF1ZXN0X21lbW9yeV9jb21wcmVzc2lvbiIsCiAgZGV0YWlsczogewogICAgZXJyb3JNZXNzYWdlOiBhcmdzLmVycm9yTWVzc2FnZSwKICB9Cn0pOw==","settings/tools/webSearch.js":"LyoKRGVzY3JpcHRpb246ClBlcmZvcm1zIGEgd2ViIHNlYXJjaCB1c2luZyB0aGUga2V5LWxlc3MgSFRNTCB2ZXJzaW9uIG9mIER1Y2tEdWNrR28gdG8gZmluZCB1cC10by1kYXRlIGluZm9ybWF0aW9uIG9yIGFuc3dlciBnZW5lcmFsIGtub3dsZWRnZSBxdWVzdGlvbnMuIFRoaXMgdG9vbCBpcyBpZGVhbCBmb3IgZGlzY292ZXJpbmcgVVJMcyBhbmQgZ2V0dGluZyBzdW1tYXJpZXMgb2YgaW5mb3JtYXRpb24gb24gdGhlIGludGVybmV0LiBJdCByZXR1cm5zIEFMTCBhdmFpbGFibGUgc2VhcmNoIHJlc3VsdHMgZnJvbSB0aGUgcGFnZS4KCioqSU1QT1JUQU5UKio6IFVzZSB0aGlzIHRvb2wgdG8gKmRpc2NvdmVyKiBpbmZvcm1hdGlvbiBhbmQgVVJMcy4gQWZ0ZXIgeW91IGhhdmUgaWRlbnRpZmllZCBhIHByb21pc2luZyBVUkwgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMsIHlvdSBNVVNUIHVzZSB0aGUgYHJlYWRVUkxgIHRvb2wgaW4gYSBzdWJzZXF1ZW50IHN0ZXAgdG8gcmVhZCB0aGUgZnVsbCBjb250ZW50IG9mIHRoYXQgc3BlY2lmaWMgcGFnZS4KLSBETyBOT1QgVVNFIFRISVMgVE9PTCBUTyB0byBzZWFyY2ggW1t3aWtpbGlua3NdXSB1c2UgYGJ1aWxkS25vd2xlZGdlQmFzZWAgdG9vbCBpbnN0ZWFkCgpBcmd1bWVudHM6Ci0gcXVlcnk6IFRoZSBzZWFyY2ggcXVlcnkgc3RyaW5nLiBCZSBzcGVjaWZpYyBhbmQgY29uY2lzZS4KCkV4YW1wbGUgQ2FsbCAoaW4gSlNPTiBmb3JtYXQpOgp7CiAgInF1ZXJ5IjogImxhdGVzdCBhZHZhbmNlbWVudHMgaW4gYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UiCn0KKi8KCi8vIE1vZHVsZS1sZXZlbCB2YXJpYWJsZSB0byB0cmFjayB0aGUgbGFzdCByZXF1ZXN0IHRpbWUgZm9yIHRocm90dGxpbmcuCmxldCBsYXN0UmVxdWVzdFRpbWUgPSAwOwoKaWYgKCFhcmdzLnF1ZXJ5KSB7CiAgcmV0dXJuICJFcnJvcjogQSAncXVlcnknIGFyZ3VtZW50IGlzIHJlcXVpcmVkLiI7Cn0KCmNvbnN0IHsgb25Qcm9ncmVzcyB9ID0gY29udGV4dDsKY29uc3QgeyBxdWVyeSB9ID0gYXJnczsKCmNvbnN0IHByb3h5QmFzZVVybCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aG91Z2h0Zm9ybV9wcm94eV91cmwnKT8udHJpbSgpOwpjb25zdCBjb29sZG93biA9IDEwMDA7IC8vIEhhcmRjb2RlIHRvIDEgc2Vjb25kICgxMDAwbXMpCgppZiAoIXByb3h5QmFzZVVybCkgewogIHJldHVybiAiRXJyb3I6IFRoZSBDb250ZW50IFByb3h5IFVSTCBpcyBub3Qgc2V0LiBUaGlzIGlzIHJlcXVpcmVkIHRvIG1ha2Ugd2ViIHJlcXVlc3RzLiBQbGVhc2UgY29uZmlndXJlIGl0IGluIHRoZSBBSSBkZXYgdG9vbHMgcGFuZWwuIjsKfQoKaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYFNlYXJjaGluZyB0aGUgd2ViIGZvcjogIiR7cXVlcnl9ImApOwoKdHJ5IHsKICAvLyAtLS0gVGhyb3R0bGluZyBMb2dpYyAtLS0KICBjb25zdCBub3cgPSBEYXRlLm5vdygpOwogIGNvbnN0IHRpbWVTaW5jZUxhc3RSZXF1ZXN0ID0gbm93IC0gbGFzdFJlcXVlc3RUaW1lOwoKICBpZiAodGltZVNpbmNlTGFzdFJlcXVlc3QgPCBjb29sZG93bikgewogICAgY29uc3Qgd2FpdFRpbWUgPSBjb29sZG93biAtIHRpbWVTaW5jZUxhc3RSZXF1ZXN0OwogICAgaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYFRocm90dGxpbmcgcmVxdWVzdC4uLiB3YWl0aW5nICR7d2FpdFRpbWV9bXNgKTsKICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB3YWl0VGltZSkpOwogIH0KICBsYXN0UmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpOwogIC8vIC0tLSBFbmQgVGhyb3R0bGluZyAtLS0KCiAgY29uc3Qgc2VhcmNoVXJsID0gYGh0dHBzOi8vaHRtbC5kdWNrZHVja2dvLmNvbS9odG1sLz9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX1gOwogIGNvbnN0IHByb3h5VXJsID0gYCR7cHJveHlCYXNlVXJsfT90aG91Z2h0Zm9ybWdhcmRlbnByb3h5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNlYXJjaFVybCl9JmZvcmNlaGVhZGxlc3M9dHJ1ZWA7CgogIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocHJveHlVcmwpOwogIGNvbnN0IGh0bWxUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogIAogIGNvbnNvbGUubG9nKCdbd2ViU2VhcmNoIFRvb2xdIFJhdyBIVE1MIHJlY2VpdmVkIGZyb20gcHJveHk6JywgaHRtbFRleHQpOwoKICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICByZXR1cm4gYEVycm9yOiBXZWIgc2VhcmNoIHJlcXVlc3QgdmlhIHByb3h5IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlc3BvbnNlLnN0YXR1c30uIERldGFpbHM6ICR7aHRtbFRleHR9YDsKICB9CgogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWxUZXh0LCAndGV4dC9odG1sJyk7CiAgY29uc3QgcmVzdWx0cyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcucmVzdWx0Jyk7CiAgCiAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7CiAgICBpZiAoaHRtbFRleHQuaW5jbHVkZXMoIk5vIHJlc3VsdHMgZm91bmQiKSkgewogICAgICAgIHJldHVybiAiTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIHRoYXQgcXVlcnkuIjsKICAgIH0KICAgIHJldHVybiAiRXJyb3I6IEZhaWxlZCB0byBwYXJzZSBzZWFyY2ggcmVzdWx0cy4gVGhlIHBhZ2Ugc3RydWN0dXJlIG1heSBoYXZlIGNoYW5nZWQgb3IgdGhlIHJlcXVlc3Qgd2FzIGJsb2NrZWQuIjsKICB9CgogIGxldCBmb3JtYXR0ZWRSZXN1bHRzID0gIkhlcmUgYXJlIHRoZSBzZWFyY2ggcmVzdWx0czpcblxuIjsKICBsZXQgY291bnQgPSAwOwogIC8vIC0tLSBGSVg6IFRoZSBsb29wIG5vdyBwcm9jZXNzZXMgQUxMIHJlc3VsdHMgd2l0aCBOTyBsaW1pdCAtLS0KICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCkgPT4gewogICAgY29uc3QgdGl0bGVFbCA9IHJlc3VsdC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0X19hJyk7CiAgICBjb25zdCBzbmlwcGV0RWwgPSByZXN1bHQucXVlcnlTZWxlY3RvcignLnJlc3VsdF9fc25pcHBldCcpOwogICAgCiAgICBpZiAodGl0bGVFbCAmJiBzbmlwcGV0RWwpIHsKICAgICAgY29uc3QgdGl0bGUgPSB0aXRsZUVsLnRleHRDb250ZW50LnRyaW0oKTsKICAgICAgY29uc3QgcmF3VXJsID0gdGl0bGVFbC5ocmVmOwogICAgICBjb25zdCBzbmlwcGV0ID0gc25pcHBldEVsLnRleHRDb250ZW50LnRyaW0oKTsKICAgICAgCiAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTChyYXdVcmwpLnNlYXJjaCk7CiAgICAgIGNvbnN0IGNsZWFuVXJsID0gdXJsUGFyYW1zLmdldCgndWRkZycpOwoKICAgICAgaWYgKGNsZWFuVXJsKSB7CiAgICAgICAgY291bnQrKzsKICAgICAgICBmb3JtYXR0ZWRSZXN1bHRzICs9IGAke2NvdW50fS4gWyR7dGl0bGV9XSgke2RlY29kZVVSSUNvbXBvbmVudChjbGVhblVybCl9KVxuYDsKICAgICAgICBmb3JtYXR0ZWRSZXN1bHRzICs9IGAgICAtIFNuaXBwZXQ6ICR7c25pcHBldH1cblxuYDsKICAgICAgfQogICAgfQogIH0pOwoKICBpZiAoY291bnQgPT09IDApIHsKICAgICAgcmV0dXJuICJFcnJvcjogUGFyc2VkIHNlYXJjaCByZXN1bHRzIGJ1dCBjb3VsZCBub3QgZXh0cmFjdCBhbnkgdmFsaWQgbGlua3MuIjsKICB9CgogIGlmIChvblByb2dyZXNzKSBvblByb2dyZXNzKGBGb3VuZCBhbmQgcGFyc2VkICR7Y291bnR9IHJlc3VsdHMuYCk7CiAgcmV0dXJuIGZvcm1hdHRlZFJlc3VsdHM7Cgp9IGNhdGNoIChlKSB7CiAgaWYgKG9uUHJvZ3Jlc3MpIG9uUHJvZ3Jlc3MoYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHNlYXJjaGluZyB0aGUgd2ViLmApOwogIGNvbnNvbGUuZXJyb3IoJ1t3ZWJTZWFyY2ggVG9vbF0gRXhjZXB0aW9uIGNhdWdodDonLCBlKTsKICByZXR1cm4gYEVycm9yOiBBbiBleGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHBlcmZvcm0gdGhlIHdlYiBzZWFyY2g6ICR7ZS5tZXNzYWdlfWA7Cn0="},ss=Object.freeze(Object.defineProperty({__proto__:null,default:ns},Symbol.toStringTag,{value:"Module"}));async function os(){const a=Object.assign({"./bundles/docs-bundle.json":is,"./bundles/settings-bundle.json":ss});for(const e in a){const t=e.split("/").pop().replace("-bundle.json",""),i=new w(t);try{await i.pfs.stat("/.git/config"),i.registerNewGarden();continue}catch(o){if(o.code!=="ENOENT"){console.error(`[Seeder] Unexpected error checking garden "${t}":`,o);continue}}console.log(`%c[Seeder] Core garden "${t}" not found. Seeding now...`,"font-weight: bold; color: #12ffbc;"),await i.clearWorkdir();const n=a[e].default;let s=0;for(const[o,c]of Object.entries(n))try{const l=Fe.Buffer.from(c,"base64");await i.writeFile(`/${o}`,l),s++}catch(l){console.error(`[Seeder] Failed to write file "/${o}" to garden "${t}":`,l)}console.log(`[Seeder] Wrote ${s} files to "${t}".`),i.registerNewGarden()}localStorage.removeItem("thoughtform_seeded_gardens")}class as{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const i=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(i),this.signaling.ws.onopen=()=>{console.log(`Connected to signaling server at ${i}`),e()},this.signaling.ws.onclose=()=>{console.log("Disconnected from signaling server"),this.signaling.sync.disconnect()},this.signaling.ws.onerror=n=>{console.error("WebSocket error:",n),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${i}`))},this.signaling.ws.onmessage=n=>{try{const s=JSON.parse(n.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(s)}catch(s){console.error("Error parsing signaling message:",s)}}})}sendJoinSessionRequest(e,t){const i=this.signaling.ws;if(i&&i.readyState===WebSocket.OPEN){const n={type:"join_session",sessionId:e,browserSessionId:this.signaling.sync.sessionId};t&&(n.peerNamePrefix=t),i.send(JSON.stringify(n))}else console.error("Cannot send join session request, WebSocket is not open.")}sendSignal(e,t){const i=this.signaling.ws;i&&i.readyState===WebSocket.OPEN&&i.send(JSON.stringify({type:"signal",target:t,data:e}))}}class cs{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"welcome":console.log("Received welcome from signaling server.");break;case"session_joined":this.signaling.peerId=e.peerId,t.updateConnectionState("connected-signal","Connected to tracker, waiting for peers..."),e.peers&&e.peers.length>0&&e.peers.forEach(i=>{if(i.browserSessionId===this.signaling.sync.sessionId){console.log(`[Sync] Ignoring peer ${i.peerId.substring(0,8)} from the same browser session during initial join.`);return}this.signaling.connectToPeer(i.peerId)});break;case"peer_joined":if(e.browserSessionId===this.signaling.sync.sessionId){console.log(`[Sync] Ignoring newly joined peer ${e.peerId.substring(0,8)} from the same browser session.`);return}this.signaling.connectToPeer(e.peerId);break;case"signal":e.from&&e.data&&this.signaling.handleSignal(e.from,e.data);break;case"peer_left":e.peerId&&t.handlePeerLeft(e.peerId);break;case"error":t.updateConnectionState("error",`Signaling error: ${e.message}`);break}}}class ls{constructor(e){this.signaling=e}async connectToPeer(e){const t=this.signaling.sync,i=t.createPeerConnection(e,!0);if(i)try{const n=i.createDataChannel("syncChannel");t.setupDataChannel(e,n);const s=await i.createOffer();await i.setLocalDescription(s),this.signaling.sendSignal({type:"offer",sdp:s.sdp},e)}catch(n){console.error(`Failed to initiate connection to ${e}:`,n)}}}class rs{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this._webSocketManager=new as(this),this._signalingMessageHandler=new cs(this),this._webrtcInitiator=new ls(this)}updateSignalingServerUrl(e){this.signalingServerUrl=e,localStorage.setItem("thoughtform_signaling_server",e)}async joinSession(e,t){try{await this._webSocketManager.connectToSignalingServer(),this._webSocketManager.sendJoinSessionRequest(e,t)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server.")}}connectToPeer(e){e!==this.peerId&&this.peerId>e&&this._webrtcInitiator.connectToPeer(e)}sendSignal(e,t){this._webSocketManager.sendSignal(e,t)}async handleSignal(e,t){const i=this.sync;try{let n=i.peerConnections.get(e);if(!n)if(t.type==="offer"){if(n=i.createPeerConnection(e,!1),!n){console.warn(`[SYNC-SIGNAL] Received offer from ${e.substring(0,8)} but at connection limit. Ignoring.`);return}}else{console.warn(`[SYNC-SIGNAL] Received signal from unknown peer ${e.substring(0,8)} before an offer. Discarding.`);return}if(t.type==="offer"){await n.setRemoteDescription(new RTCSessionDescription(t));const s=await n.createAnswer();await n.setLocalDescription(s),this.sendSignal({type:"answer",sdp:s.sdp},e)}else t.type==="answer"?await n.setRemoteDescription(new RTCSessionDescription(t)):t.type==="candidate"&&await n.addIceCandidate(new RTCIceCandidate(t.candidate))}catch(n){console.error(`Error handling signal from ${e}:`,n)}}destroy(){this.ws&&(this.ws.close(),this.ws=null)}}class ds{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const i=this._listeners[e];for(let n=0,s=i.length;n<s;n++)if(i[n]===t){i.splice(n,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let i=0,n=t.length;i<n;i++)t[i].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class gs{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return console.log(`Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return console.log(`Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return console.log("Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return console.log("Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return console.log("_getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class hs{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),console.log("SyncFiles confirmed data channel is open.")},t.onmessage=async i=>{try{const n=JSON.parse(i.data);await e.sync._handleIncomingSyncMessage(n,"P2P")}catch(n){console.error("Error parsing sync message from DataChannel:",n,"Raw data:",i.data)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),console.log("SyncFiles confirmed data channel is closed.")},t.onerror=i=>{const n=i.error;n&&n.name==="OperationError"&&n.message.includes("User-Initiated Abort")?console.log("Data channel closed intentionally by a peer.",i):(console.error("Data channel error:",i),e.sync.addMessage("Data channel error: "+(n?n.message:"Unknown error")))}}}class at{static async _listAllFiles(e,t){const i=e.pfs;if(!i)throw new Error("gitClient does not have pfs property");let n=[];try{const s=await i.readdir(t);for(const o of s){if(o===".git")continue;const c=t==="/"?`/${o}`:`${t}/${o}`;try{(await i.stat(c)).isDirectory()?n=n.concat(await this._listAllFiles(e,c)):n.push(c)}catch(l){console.warn(`Could not stat ${c}, skipping.`,l)}}}catch(s){console.log(`Directory not readable: ${t}`,s)}return n}static async handleFileUpdate(e,t){e.incrementPendingWrites();try{if(!t.gardenName)throw new Error("Received file update without a gardenName during a full sync.");const i=new w(t.gardenName);if(t.isFullSync){e.deletedGitDirs.has(t.gardenName)||(e.deletedGitDirs.add(t.gardenName),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing to receive garden: ${t.gardenName}...`,type:"info"}})),await i.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Replacing git history for ${t.gardenName}...`,type:"info"}})),await i.rmrf("/.git")),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Writing: ${t.path.substring(1)} (${t.gardenName})`,type:"info"}}));const n=Buffer.from(t.content,"base64");await i.writeFile(t.path,n)}else{const n=t.isBase64?Buffer.from(t.content,"base64"):t.content;await i.writeFile(t.path,n),e.sync.addMessage(`Updated file: ${t.path} in garden ${t.gardenName}`)}}catch(i){console.error("Error handling file update for path:",t.path,i),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${i.message}`,type:"error"}}))}finally{e.decrementPendingWrites()}}}class ct{static async handleSyncMessage(e,t){switch(t.type){case"send_initiation":this.handleSendInitiation(e,t);break;case"sync_cancel":this.handleSyncCancel(e,t);break;case"file_update":await at.handleFileUpdate(e,t);break;case"request_gardens":await this.handleRequestGardens(e,t.gardens,t.requesterId);break;case"garden_zip_chunk":await this.handleGardenZipChunk(e,t);break;case"garden_zip_complete":await this.handleGardenZipComplete(e,t);break;case"full_sync_complete":e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"File stream complete. Waiting for writes to finish...",type:"info"}})),e.markSyncStreamAsComplete();break;default:console.log("Unknown sync message type:",t.type)}}static handleSendInitiation(e,t){e.isSyncCancelled||(e.currentTransferId=t.transferId,e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Incoming transfer from peer for gardens: ${t.gardens.join(", ")}.`,type:"info"}})))}static handleSyncCancel(e,t){e.currentTransferId===t.transferId&&e.cancelSync(!1)}static async handleRequestGardens(e,t=[],i){if(!i){const n="Error: Received garden request without a requesterId. Cannot send response.";console.error(n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:n,type:"error"}}));return}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received request for gardens: ${t.join(", ")} from ${i.substring(0,8)}...`,type:"info"}})),await this.sendGardens(e,t,[i])}static async sendGardens(e,t,i){if(!t||t.length===0||!i||i.length===0)return;const n=crypto.randomUUID();e.currentTransferId=n,e.targetPeers=i;for(const l of i)e.sync.sendSyncMessage({type:"send_initiation",gardens:t,transferId:n},l);const s=64*1024,o=10*1024*1024,c=l=>new Promise(r=>{if(l.bufferedAmount<o)r();else{const g=()=>{l.bufferedAmount<o&&(l.removeEventListener("bufferedamountlow",g),r())};l.addEventListener("bufferedamountlow",g)}});try{for(const l of t){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing ${l} for transfer...`,type:"info"}}));const r=new q,g=new w(l),d=await this.getAllFilesIncludingGit(g.pfs,"/");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zipping ${d.length} files from ${l}...`,type:"info"}}));for(const b of d){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const G=await g.pfs.readFile(b),u=b.startsWith("/")?b.substring(1):b;r.file(u,G)}if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const h=await r.generateAsync({type:"uint8array",compression:"DEFLATE",compressionOptions:{level:6}}),m=(h.length/1024/1024).toFixed(2);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zip created for ${l} (${m} MB).`,type:"info"}}));const I=Math.ceil(h.length/s);for(const b of i){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const G=e.sync.peerConnections.get(b);if(!G||!G.dataChannel||G.dataChannel.readyState!=="open"){const C=`Error: Cannot send files to ${b.substring(0,8)}... No open data channel.`;console.error(C),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:C,type:"error"}}));continue}const u=G.dataChannel;e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending ${l} to ${b.substring(0,8)}...`,type:"info"}}));for(let C=0;C<I;C++){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");await c(u);const Z=C*s,A=Math.min(Z+s,h.length),W=h.slice(Z,A);e.sync.sendSyncMessage({type:"garden_zip_chunk",gardenName:l,transferId:n,chunkIndex:C,totalChunks:I,data:Buffer.from(W).toString("base64"),zipSize:h.length},b),((C+1)%10===0||C+1===I)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sent ${C+1} of ${I} chunks for ${l} to ${b.substring(0,8)}...`,type:"info"}}))}e.sync.sendSyncMessage({type:"garden_zip_complete",gardenName:l,transferId:n},b),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Finished sending ${l} to ${b.substring(0,8)}.`,type:"info"}}))}}for(const l of i)e.sync.sendSyncMessage({type:"full_sync_complete"},l);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All selected gardens sent successfully.",type:"complete",action:"send"}}))}catch(l){l.message.includes("cancelled")?e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Sync cancelled by user.",type:"cancelled"}})):(console.error("Error handling garden send/request:",l),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: ${l.message}`,type:"error"}})))}}static async getAllFilesIncludingGit(e,t){let i=[];try{const n=await e.readdir(t);for(const s of n){const o=`${t==="/"?"":t}/${s}`;try{(await e.stat(o)).isDirectory()?i=i.concat(await this.getAllFilesIncludingGit(e,o)):i.push(o)}catch(c){console.warn(`Could not stat ${o}, skipping.`,c)}}}catch(n){console.log(`Directory not readable: ${t}`,n)}return i}static async handleGardenZipChunk(e,t){if(e.isSyncCancelled||e.currentTransferId!==t.transferId)return;e.activeTransfers||(e.activeTransfers=new Map);const i=`${t.gardenName}-${t.transferId}`;e.activeTransfers.has(i)||(e.activeTransfers.set(i,{chunks:new Array(t.totalChunks),receivedCount:0,totalChunks:t.totalChunks,gardenName:t.gardenName,zipSize:t.zipSize}),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Receiving ${t.gardenName} (${(t.zipSize/1024/1024).toFixed(2)} MB)...`,type:"info"}})));const n=e.activeTransfers.get(i);n.chunks[t.chunkIndex]=Buffer.from(t.data,"base64"),n.receivedCount++,(n.receivedCount%10===0||n.receivedCount===n.totalChunks)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received ${n.receivedCount} of ${n.totalChunks} chunks for ${t.gardenName}...`,type:"info"}}))}static async handleGardenZipComplete(e,t){if(e.isSyncCancelled)return;const i=`${t.gardenName}-${t.transferId}`,n=e.activeTransfers.get(i);if(n){if(n.receivedCount!==n.totalChunks){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: Missing chunks for ${t.gardenName}`,type:"error"}})),e.activeTransfers.delete(i);return}try{e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Reassembling and extracting ${t.gardenName}...`,type:"info"}}));const s=n.chunks.reduce((b,G)=>b+G.length,0),o=new Uint8Array(s);let c=0;for(const b of n.chunks)o.set(b,c),c+=b.length;const l=await q.loadAsync(o),r=new w(t.gardenName);await r.initRepo();const g=new Set;for(const b in l.files)l.files[b].dir||g.add(`/${b}`);const d=await this.getAllFilesIncludingGit(r.pfs,"/");let h=0;for(const b of d)if(!g.has(b))try{await r.pfs.unlink(b),h++}catch(G){console.warn(`[Sync] Could not delete obsolete file ${b}:`,G)}h>0&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Cleaned up ${h} obsolete file(s) in ${t.gardenName}.`,type:"info"}}));const m=Object.entries(l.files);let I=0;for(const[b,G]of m)if(!G.dir){const u=await G.async("uint8array"),C=`/${b}`,Z=C.substring(0,C.lastIndexOf("/"));Z&&Z!=="/"&&await r.ensureDir(Z),await r.pfs.writeFile(C,u),I++}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Successfully extracted ${t.gardenName} (${I} files).`,type:"complete",action:"receive",gardenName:t.gardenName}})),e.activeTransfers.delete(i),e.activeTransfers.size===0&&e.markSyncStreamAsComplete()}catch(s){console.error(`Error extracting garden ${t.gardenName}:`,s),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error extracting ${t.gardenName}: ${s.message}`,type:"error"}})),e.activeTransfers.delete(i)}}}}class Xe{static async sendGardensToPeers(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Initiating send process...",type:"info"}})),await ct.sendGardens(e,t.gardens,t.peers)}static requestSpecificGardens(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting selected gardens from peers...",type:"info"}}));const i=e.sync.signaling.peerId;if(!i){const n="Cannot request gardens: own peer ID is not available.";e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:n,type:"error"}})),console.error(n);return}Object.entries(t).forEach(([n,s])=>{const o=n.substring(0,8);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending request to peer ${o}... for gardens: ${s.join(", ")}`,type:"info"}})),e.sync.sendSyncMessage({type:"request_gardens",gardens:s,requesterId:i},n)}),e.sync.addMessage(`Sent requests for ${Object.keys(t).length} peer(s).`)}static sendFileUpdate(e,t,i,n){e.sync.sendSyncMessage({type:"file_update",path:t,content:i,timestamp:n})}}class ms extends ds{constructor(e){super(),this.sync=e,this.gitClient=null,this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs=new Set,this.isSyncFailed=!1,this.isSyncCancelled=!1,this.activeTransfers=new Map,this.currentTransferId=null,this.targetPeers=[]}resetFullSyncState(){this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs.clear(),this.activeTransfers.clear(),this.isSyncFailed=!1,this.isSyncCancelled=!1,this.currentTransferId=null,this.targetPeers=[]}_getGitClient(){return gs.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){hs.setupDataChannel(this,e)}async handleSyncMessage(e){if(!(this.isSyncCancelled&&e.type!=="sync_cancel"))try{await ct.handleSyncMessage(this,e)}catch(t){console.error("[SyncFiles] Critical error handling sync message:",t),this.isSyncFailed=!0,this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`A critical error occurred: ${t.message}. Aborting sync.`,type:"error"}}))}}async sendGardensToPeers(e){this.resetFullSyncState(),await Xe.sendGardensToPeers(this,e)}requestSpecificGardens(e){this.resetFullSyncState(),Xe.requestSpecificGardens(this,e)}cancelSync(e=!0){this.isSyncCancelled||(this.isSyncCancelled=!0,this.activeTransfers.clear(),e&&this.currentTransferId&&this.sync.sendSyncMessage({type:"sync_cancel",transferId:this.currentTransferId}),this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Sync cancelled by user.",type:"cancelled"}})))}incrementPendingWrites(){this.pendingWriteCount++}decrementPendingWrites(){this.pendingWriteCount--,this.checkForReload()}markSyncStreamAsComplete(){this.isSyncCompleteMessageReceived=!0,this.checkForReload()}checkForReload(){this.isSyncFailed||this.isSyncCancelled||this.isSyncCompleteMessageReceived&&this.pendingWriteCount===0&&this.activeTransfers.size===0&&this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All files received and written. Sync complete.",type:"complete",action:"receive"}}))}destroy(){super.destroy(),this.activeTransfers.clear()}async getAllFiles(e){return at._listAllFiles(e,"/")}}class Is{constructor(e){this.sync=e}bind(){if(!this.sync._container){console.error("[EventBinder] Container not set");return}const e=this.sync._container,t=e.querySelector("#sync-name-input"),i=e.querySelector("#sync-peer-prefix-input"),n=e.querySelector("#sync-autoconnect-checkbox"),s=e.querySelector("#live-sync-toggle-checkbox"),o=e.querySelector("#sync-connect-btn"),c=e.querySelector("#live-sync-reelect-btn"),l=e.querySelector("#save-signaling-config"),r=e.querySelector("#send-to-peers-btn"),g=e.querySelector("#request-all-files-btn");t.value=localStorage.getItem("thoughtform_sync_name")||"",i.value=localStorage.getItem("thoughtform_peer_prefix")||"",n.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",s.checked=localStorage.getItem("thoughtform_live_sync_enabled")==="true",c.addEventListener("click",()=>this.sync.triggerReElection()),i.addEventListener("input",()=>{if(localStorage.setItem("thoughtform_peer_prefix",i.value.trim()),this.sync.connectionState==="disconnected"||this.sync.connectionState==="error"){const d=e.querySelector("#sync-peer-id-display");if(d){const h=i.value.trim();d.textContent=h?`${h}-<random_id>`:"Not Connected"}}}),o.addEventListener("click",()=>{const d=this.sync.connectionState;if(d==="disconnected"||d==="error"){const h=t.value.trim(),m=i.value.trim();if(!h){this.sync.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",h),this.sync.connect(h,m)}else this.sync.disconnect()}),n.addEventListener("change",d=>{localStorage.setItem("thoughtform_sync_auto_connect",d.target.checked)}),s.addEventListener("change",d=>{localStorage.setItem("thoughtform_live_sync_enabled",d.target.checked),d.target.checked?this.sync.connectionState==="connected-p2p"&&this.sync.enableLiveSync():this.sync.disableLiveSync()}),l&&l.addEventListener("click",()=>{const d=e.querySelector("#signaling-server-url"),h=d?d.value.trim():"";h?(this.sync.signaling.updateSignalingServerUrl(h),this.sync.addMessage(`Signaling server updated to: ${h}`)):this.sync.addMessage("Please enter a valid signaling server URL.")}),r&&r.addEventListener("click",async()=>{const d=localStorage.getItem("thoughtform_gardens"),h=d?JSON.parse(d):["home"],m=this.sync.connectedPeers,I=await y.sendSelection({title:"Send Gardens to Peers",peerData:m,gardenData:h});I&&(this.sync.ui.showSyncProgressModal(),this.sync.fileSync.sendGardensToPeers(I))}),g&&g.addEventListener("click",async()=>{const d=await y.selection({title:"Request Gardens from Peers",peerData:this.sync.connectedPeers});d&&(this.sync.ui.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens(d))})}}class bs{constructor(e){this.sync=e,this.modal=null,this.logArea=null,this.finalMessageArea=null,this.actionButton=null}show(){this.modal&&this.modal.destroy(),this.modal=new y({title:"File Sync Progress"}),this.modal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.logArea=this.modal.content.querySelector("#sync-progress-log"),this.finalMessageArea=this.modal.content.querySelector("#sync-progress-final-message"),this.actionButton=this.modal.addFooterButton("Cancel",()=>this.sync.fileSync.cancelSync()),this.modal.show()}hide(){this.modal&&(this.sync.fileSync.resetFullSyncState(),this.modal.destroy(),this.modal=null)}update(e){const{message:t="No message",type:i="info"}=e.detail;if(this.modal||this.show(),!this.logArea)return;const n=document.createElement("div");switch(n.innerHTML=`[${new Date().toLocaleTimeString()}] ${t}`,n.style.marginBottom="5px",i){case"error":n.style.color="var(--base-accent-destructive)";break;case"complete":n.style.color="var(--base-accent-action)";break;case"cancelled":n.style.color="var(--base-accent-warning)";break;default:n.style.color="var(--color-text-primary)";break}this.logArea.appendChild(n),this.logArea.scrollTop=this.logArea.scrollHeight,(i==="complete"||i==="error"||i==="cancelled")&&(this.finalMessageArea&&(this.finalMessageArea.textContent=t,this.finalMessageArea.style.color=n.style.color),this.actionButton&&this.actionButton.remove(),i==="complete"?setTimeout(()=>this.hide(),3e3):(this.actionButton=this.modal.addFooterButton("Close",()=>this.hide()),i==="error"&&this.actionButton.classList.add("destructive")))}}class us{constructor(e){this.sync=e,this.eventBinder=new Is(e),this.modalHandler=new bs(e),this.syncMethodIndicatorEl=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row">
                <label for="sync-peer-prefix-input" class="sync-label">Peer Name Prefix:</label>
                <input type="text" id="sync-peer-prefix-input" class="eruda-input flex-grow" placeholder="e.g., laptop, desktop (optional)">
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="live-sync-toggle-checkbox">
                  <span style="margin-left: 5px;">Enable Live Sync (beta)</span>
                </label>
                <button id="live-sync-reelect-btn" class="eruda-button" style="display: none;">Re-elect Host</button>
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                    <strong>Live Sync:</strong> <span id="live-sync-status">Disabled</span>
                    <strong>Peers:</strong> <span id="sync-peer-count">0</span>
                    <strong>Peer ID:</strong> <span id="sync-peer-id-display" style="word-break: break-all;">Not Connected</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="send-to-peers-btn" class="eruda-button">Send to Peers...</button>
                <button id="request-all-files-btn" class="eruda-button">Request from Peer...</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"))}bindEvents(){this.eventBinder.bind()}updateLiveSyncUI(){const e=this.sync._container;if(!e)return;const t=e.querySelector("#live-sync-status"),i=e.querySelector("#live-sync-toggle-checkbox"),n=e.querySelector("#live-sync-reelect-btn");if(!t||!i||!n)return;const s=this.sync.liveSync.state;i.disabled=this.sync.connectionState==="connecting",i.checked=localStorage.getItem("thoughtform_live_sync_enabled")==="true";const o=s==="host"||s==="follower";n.style.display=o?"block":"none";let c="Disabled";switch(s){case"pending":c="Pending Selection...";break;case"host":c=`Host${this.sync.liveSync.hostId===this.sync.getPeerId()?" (You)":` (${this.sync.liveSync.activePeers.get(this.sync.liveSync.hostId)?.name||"..."})`}`;break;case"follower":c=`Follower${` (${this.sync.liveSync.activePeers.get(this.sync.liveSync.hostId)?.name||"..."})`}`;break}t.textContent=c}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e);const i=this.sync._container.querySelector("#sync-peer-count");i&&(i.textContent=this.sync.connectedPeers.size)}updateControls(e){const t=this.sync._container;if(!t)return;const i=e==="disconnected"||e==="error",n=e==="connecting",s=t.querySelector("#sync-connect-btn");s&&(s.disabled=n,s.textContent=i?"Connect":n?"Connecting...":"Disconnect"),t.querySelector("#sync-name-input").disabled=!i,t.querySelector("#sync-peer-prefix-input").disabled=!i,t.querySelectorAll(".sync-actions button").forEach(o=>o.disabled=e!=="connected-p2p"),this.updateLiveSyncUI()}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let i="None",n="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),i="Connecting...",n="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),i="WebSocket (Fallback)",n="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),i="WebRTC (P2P)",n="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),i="Error",n="var(--base-accent-destructive)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=i,this.syncMethodIndicatorEl.style.color=n)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const i=document.createElement("div");i.textContent=e,t.appendChild(i),t.scrollTop=t.scrollHeight}}showSyncProgressModal(){this.modalHandler.show()}updateSyncProgress(e){this.modalHandler.update(e)}hideSyncProgressModal(){this.modalHandler.hide()}}class Cs{constructor(e){this.manager=e,this.sync=e.sync,this.hostSelectionModal=null,this.electionTimeout=null}enable(e=!1){const{manager:t,sync:i}=this;if(t.state!=="disabled"||i.connectionState!=="connected-p2p"&&i.connectionState!=="connected-signal"){localStorage.getItem("thoughtform_live_sync_enabled")==="true"&&i.addMessage("Live Sync is enabled. Waiting for a P2P connection to start...");return}console.log("[LiveSync] Enabling..."),localStorage.setItem("thoughtform_live_sync_enabled","true");const n=i.getPeerId(),s=localStorage.getItem("thoughtform_peer_prefix")||n.substring(0,8);if(sessionStorage.getItem("thoughtform_live_sync_host_id")&&!e){console.log("[LiveSync] Found sticky session. Forcing re-election to ensure consistency."),this._performReElectionReset();return}t.state="pending",t.pendingPeers.set(n,{id:n,name:s}),i.sendSyncMessage({type:"MSG_LIVESYNC_ANNOUNCE",peerInfo:{id:n,name:s}}),i.ui.updateLiveSyncUI(),i.addMessage("Live Sync pending. Searching for active sessions..."),console.log("[LiveSync] State is PENDING. Broadcasting announce and starting election timeout."),this.electionTimeout=setTimeout(()=>{t.state==="pending"&&(console.log("[LiveSync] Election timeout fired. No existing session found."),i.addMessage("No active session found. Starting new election..."),this.showHostSelectionModalIfNeeded())},3e3)}disable(){const{manager:e,sync:t}=this;e.state!=="disabled"&&(console.log("[LiveSync] Disabling..."),localStorage.setItem("thoughtform_live_sync_enabled","false"),sessionStorage.removeItem("thoughtform_live_sync_host_id"),sessionStorage.removeItem("thoughtform_live_sync_gardens"),this.electionTimeout&&clearTimeout(this.electionTimeout),t.sendSyncMessage({type:"MSG_LIVESYNC_DISABLE"}),this.hostSelectionModal&&(this.hostSelectionModal.destroy(),this.hostSelectionModal=null),t.workspace&&t.workspace.panes&&t.workspace.panes.forEach(i=>{i.editor?.disconnectLiveSync()}),e.yDocManager.destroyAll(),e.state="disabled",e.pendingPeers.clear(),e.activePeers.clear(),e.hostId=null,e.syncableGardens=[],t.ui.updateLiveSyncUI(),t.addMessage("Live Sync disabled."))}triggerReElection(){this.manager.state==="disabled"||this.manager.state==="pending"||(console.log("[LiveSync] Re-election triggered by user."),this.sync.addMessage("A re-election has been triggered..."),this.sync.sendSyncMessage({type:"MSG_LIVESYNC_REELECT"}),this._performReElectionReset())}_performReElectionReset(){this.sync.addMessage("Resetting session for re-election..."),this.disable(),setTimeout(()=>this.enable(!0),500)}showHostSelectionModalIfNeeded(){const{manager:e,sync:t}=this;if(e.state!=="pending"||this.hostSelectionModal||e.pendingPeers.size<2)return;console.log("[LiveSync] Showing host selection modal."),this.hostSelectionModal=new y({title:"Select Live Sync Host"});const i=Array.from(e.pendingPeers.values()).map(n=>({id:n.id,text:n.name,class:n.id===t.getPeerId()?"is-self":""}));i.push({id:"cancel",text:"Cancel",class:"destructive"}),this.hostSelectionModal.updateContent("<p>Which device has the most up-to-date work? That device will become the host for this session.</p>"),i.forEach(n=>{const s=this.hostSelectionModal.addFooterButton(n.text,()=>{n.id&&n.id!=="cancel"?(t.sendSyncMessage({type:"MSG_LIVESYNC_HOST_CHOSEN",chosenHostId:n.id}),this.processHostSelection(n.id)):this.disable()});n.class&&s.classList.add(n.class)}),this.hostSelectionModal.show()}processHostSelection(e){const{manager:t,sync:i}=this;t.state==="pending"&&(console.log("[LiveSync] Processing host selection. Chosen host:",e.substring(0,4)),this.electionTimeout&&clearTimeout(this.electionTimeout),this.hostSelectionModal&&(this.hostSelectionModal.destroy(),this.hostSelectionModal=null),t.hostId=e,sessionStorage.setItem("thoughtform_live_sync_host_id",t.hostId),t.activePeers=new Map(t.pendingPeers),t.pendingPeers.clear(),t.hostId===i.getPeerId()?(t.state="host",i.addMessage("You are the new Live Sync host."),this.showGardenSelectionModal()):(t.state="follower",i.addMessage(`Live Sync host is ${t.activePeers.get(t.hostId)?.name}. Awaiting session details...`)),i.ui.updateLiveSyncUI())}async showGardenSelectionModal(){const{manager:e,sync:t}=this;console.log("[LiveSync] Host showing garden selection modal.");const i=localStorage.getItem("thoughtform_gardens"),n=i?JSON.parse(i):["home"],s=await y.gardenSelection({title:"Select Gardens for Live Sync",gardenData:n});s&&s.length>0?(e.syncableGardens=s,sessionStorage.setItem("thoughtform_live_sync_gardens",JSON.stringify(e.syncableGardens)),t.addMessage(`Session started. Syncing gardens: ${e.syncableGardens.join(", ")}.`),t.sendSyncMessage({type:"MSG_LIVESYNC_SESSION_START",syncableGardens:e.syncableGardens}),t.workspace.activateLiveSyncForCurrentFile()):(t.addMessage("No gardens selected. Live sync cancelled."),this.disable())}}function Gs(a,e){let t;return function(...n){const s=()=>{clearTimeout(t),a(...n)};clearTimeout(t),t=setTimeout(s,e)}}class Zs{constructor(e){this.manager=e,this.sync=e.sync,this.yDocs=new Map,this.debouncedSavers=new Map}async getYDoc(e,t){const i=`${e}#${t}`;if(this.yDocs.has(i))return this.yDocs.get(i);const n=this.manager.state==="host";console.log(`[YDocManager] Creating new Y.Doc for ${i}. Is Host: ${n}`);const s=new Ct;this.yDocs.set(i,s);const o=Gs(async()=>{try{const c=s.getText("codemirror").toString(),l=await this.sync.workspace.getGitClient(e);console.log(`[YDocManager/debouncedSave] Saving content for ${i} to IndexedDB.`),await l.writeFile(t,c)}catch(c){console.error(`[YDocManager/debouncedSave] FAILED to save content for ${i}:`,c)}},1e3);if(this.debouncedSavers.set(i,o),console.log(`[YDocManager] Attaching 'update' listener to Y.Doc for ${i}.`),s.on("update",(c,l)=>{if(console.log(`[YDocManager/onUpdate] EVENT FIRED FOR ${i}. Origin:`,l),l!=="remote-sync"){const r={type:"MSG_LIVESYNC_YJS_UPDATE",garden:e,path:t,update:Array.from(c)};console.log("[YDocManager/onUpdate] LOCAL CHANGE DETECTED. CALLING sync.sendSyncMessage."),this.sync.sendSyncMessage(r,null,!1)}o()}),!n)console.log(`[YDocManager] FOLLOWER requesting initial state for ${i} from host.`),this.sync.sendSyncMessage({type:"MSG_LIVESYNC_REQUEST_DOC_STATE",file:{garden:e,path:t}},this.manager.hostId,!1);else{console.log(`[YDocManager] HOST is populating initial Y.Doc content for ${i} from its file system.`);try{const l=await(await this.sync.workspace.getGitClient(e)).readFile(t);this.yDocs.has(i)&&s.getText("codemirror").insert(0,l)}catch(c){console.error(`[YDocManager] Host FAILED to load initial content for ${i}:`,c)}}return s}destroyAll(){this.yDocs.forEach(e=>e.destroy()),this.yDocs.clear(),this.debouncedSavers.clear()}}class ps{constructor(e){this.manager=e,this.sync=e.sync}async handle(e){const t=e.fromPeerId;switch(console.log(`[LiveSync] Handling message: ${e.type} from peer ${t?t.substring(0,4):"N/A"}`),e.type){case"MSG_LIVESYNC_FILE_CREATE":{const{gardenName:i,path:n,content:s}=e.payload;console.log(`[LiveSync] Received file creation event for: ${i}#${n}`),await new w(i).writeFile(n,s),window.thoughtform.sidebar&&window.thoughtform.sidebar.refresh();break}case"MSG_LIVESYNC_FILE_DELETE":{const{gardenName:i,path:n,isDirectory:s}=e.payload;console.log(`[LiveSync] Received file deletion event for: ${i}#${n}`),await new w(i).rmrf(n);for(const c of this.sync.workspace.panes.values())c.editor&&c.editor.gitClient.gardenName===i&&c.editor.filePath===n&&await this.sync.workspace.openFile(i,"/home");window.thoughtform.sidebar&&window.thoughtform.sidebar.refresh();break}case"MSG_LIVESYNC_REELECT":this.manager.session.triggerReElection();break;case"MSG_LIVESYNC_ANNOUNCE":if((this.manager.state==="host"||this.manager.state==="follower"||this.manager.state==="active")&&e.peerInfo)this.sync.sendSyncMessage({type:"MSG_LIVESYNC_SESSION_INFO",hostId:this.manager.hostId,syncableGardens:this.manager.syncableGardens},e.peerInfo.id,!1);else if(this.manager.state==="pending"&&e.peerInfo){this.manager.pendingPeers.set(e.peerInfo.id,e.peerInfo);const i=this.sync.getPeerId(),n=localStorage.getItem("thoughtform_peer_prefix")||i.substring(0,8);this.sync.sendSyncMessage({type:"MSG_LIVESYNC_ANNOUNCE_REPLY",peerInfo:{id:i,name:n}},e.peerInfo.id,!1),this.manager.session.showHostSelectionModalIfNeeded()}break;case"MSG_LIVESYNC_ANNOUNCE_REPLY":this.manager.state==="pending"&&e.peerInfo&&(this.manager.pendingPeers.set(e.peerInfo.id,e.peerInfo),this.manager.session.showHostSelectionModalIfNeeded());break;case"MSG_LIVESYNC_SESSION_INFO":this.manager.state==="pending"&&(this.sync.addMessage("Found an existing live session. Joining as follower..."),this.manager.syncableGardens=e.syncableGardens||[],sessionStorage.setItem("thoughtform_live_sync_gardens",JSON.stringify(this.manager.syncableGardens)),this.manager.session.processHostSelection(e.hostId),this.manager.state==="follower"&&this.manager.syncableGardens.length>0&&(this.sync.addMessage(`Requesting initial sync for gardens: ${this.manager.syncableGardens.join(", ")}.`),this.manager.state="bootstrapping",this.sync.ui.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens({[this.manager.hostId]:this.manager.syncableGardens})));break;case"MSG_LIVESYNC_HOST_CHOSEN":this.manager.state==="pending"&&this.manager.session.processHostSelection(e.chosenHostId);break;case"MSG_LIVESYNC_SESSION_START":this.manager.state==="follower"&&(this.manager.syncableGardens=e.syncableGardens,sessionStorage.setItem("thoughtform_live_sync_gardens",JSON.stringify(this.manager.syncableGardens)),this.sync.addMessage(`Session started. Syncing gardens: ${this.manager.syncableGardens.join(", ")}.`),this.manager.state="bootstrapping",this.sync.ui.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens({[this.manager.hostId]:this.manager.syncableGardens}));break;case"MSG_LIVESYNC_REQUEST_DOC_STATE":if(this.manager.state==="host"&&e.file){const i=await this.manager.yDocManager.getYDoc(e.file.garden,e.file.path);if(i){const n=Gt(i);this.sync.sendSyncMessage({type:"MSG_LIVESYNC_DOC_STATE",file:e.file,update:Array.from(n)},t,!1)}}break;case"MSG_LIVESYNC_DOC_STATE":if(e.file){const i=await this.manager.yDocManager.getYDoc(e.file.garden,e.file.path);if(i){fe(i,new Uint8Array(e.update),"remote-sync");const n=this.sync.workspace.findEditorByFile(e.file.garden,e.file.path);if(n&&n.isLiveSyncConnected){const s=i.getText("codemirror").toString(),o=n.editorView.state.doc.toString();s!==o&&(console.log("%c[LiveSyncMessageHandler] Forcing editor view update to match received Y.Doc state.","color: #12ffbc"),n.editorView.dispatch({changes:{from:0,to:o.length,insert:s},annotations:n.programmaticChange.of(!0)}))}}}break;case"MSG_LIVESYNC_YJS_UPDATE":if(e.garden&&e.path){const i=await this.manager.yDocManager.getYDoc(e.garden,e.path);i&&fe(i,new Uint8Array(e.update),"remote-sync")}break;case"MSG_LIVESYNC_DISABLE":t&&(this.manager.pendingPeers.delete(t),this.manager.activePeers.delete(t)),this.state==="pending"&&this.manager.session.hostSelectionModal&&(this.manager.session.hostSelectionModal.destroy(),this.manager.session.hostSelectionModal=null,this.manager.session.showHostSelectionModalIfNeeded()),this.sync.ui.updateLiveSyncUI();break}}}class ys{constructor(e){this.sync=e,this.state="disabled",this.hostId=null,this.syncableGardens=[],this.pendingPeers=new Map,this.activePeers=new Map,this.session=new Cs(this),this.yDocManager=new Zs(this),this.messageHandler=new ps(this),this.listenForWorkspaceEvents()}listenForWorkspaceEvents(){window.thoughtform.events.subscribe("workspace:garden:reloaded",e=>{this.state==="bootstrapping"&&this.syncableGardens.includes(e.gardenName)&&(console.log(`[LiveSync] Bootstrap for garden "${e.gardenName}" complete. Finalizing session.`),this.state="active",this.sync.addMessage("Initial sync complete. Live collaboration is active."),this.sync.workspace.activateLiveSyncForCurrentFile())}),window.thoughtform.events.subscribe("file:create",e=>{this.state!=="disabled"&&this.syncableGardens.includes(e.gardenName)&&this.sync.sendSyncMessage({type:"MSG_LIVESYNC_FILE_CREATE",payload:e})}),window.thoughtform.events.subscribe("file:delete",e=>{this.state!=="disabled"&&this.syncableGardens.includes(e.gardenName)&&this.sync.sendSyncMessage({type:"MSG_LIVESYNC_FILE_DELETE",payload:e})})}enable(){this.session.enable()}disable(){this.session.disable()}triggerReElection(){this.session.triggerReElection()}async activateDocForEditor(e){if(!e)return;if(e.editorView.state.doc.toString().startsWith('// "')){console.log(`[LiveSync] Activation blocked for new, unsaved file: ${e.filePath}`),e.disconnectLiveSync();return}const t=["host","follower","bootstrapping","active"];if(this.state==="disabled"){e.disconnectLiveSync();return}if(!t.includes(this.state)){console.log("[LiveSync] State is pending, activation will wait.");return}const{gitClient:i,filePath:n}=e,s=i.gardenName;if(this.syncableGardens.includes(s)){console.log(`[LiveSync] File ${s}#${n} is in a syncable garden. Setting up Y.Doc.`);const o=await this.yDocManager.getYDoc(s,n);e.isReady&&o&&e.connectLiveSync(o,this.state==="host")}else console.log(`[LiveSync] File ${s}#${n} is NOT in a syncable garden. Disconnecting editor.`),e.disconnectLiveSync()}handlePeerLeft(e){this.pendingPeers.delete(e),this.activePeers.delete(e),e===this.hostId&&(console.log("[LiveSync] Host has disconnected. Triggering re-election."),this.sync.addMessage("Live Sync host disconnected. Please elect a new host."),this.triggerReElection()),this.state==="pending"&&this.session.hostSelectionModal&&(this.session.hostSelectionModal.destroy(),this.session.hostSelectionModal=null,this.session.showHostSelectionModalIfNeeded())}handleMessage(e){this.messageHandler.handle(e)}}const As=500;class Ws{constructor(e){this.sync=e,this.seenMessages=new Set}handleIncomingMessage(e,t){if(console.log(`[SyncRouter/handleIncoming] Received message via ${t}. ID: ${e.messageId}, Type: ${e.payload.type}`),!e.payload||!e.messageId){console.warn("[SyncRouter/handleIncoming] Received a message without a payload or messageId, cannot process.",e);return}if(this.seenMessages.has(e.messageId)){console.log(`[SyncRouter/handleIncoming] Ignoring already seen message ID: ${e.messageId}`);return}if(this.seenMessages.add(e.messageId),this.seenMessages.size>As){const n=this.seenMessages.values().next().value;this.seenMessages.delete(n)}e.useGossip&&(console.log(`[SyncRouter/handleIncoming] Gossiping message ID ${e.messageId} to other peers.`),this.sendSyncMessage(e.payload,null,e.messageId,!0));const i=e.payload;e.fromPeerId&&(i.fromPeerId=e.fromPeerId),i.type&&i.type.startsWith("MSG_LIVESYNC_")?this.sync.liveSync.handleMessage(i):i.type==="peer_introduction"?this.sync.handlePeerIntroduction(i):this.sync.fileSync.handleSyncMessage(i)}sendSyncMessage(e,t=null,i=null,n=!1){const s=i||crypto.randomUUID(),o={messageId:s,payload:e,useGossip:n,fromPeerId:this.sync.getPeerId()},c=JSON.stringify(o);if(this.seenMessages.add(s),t){const l=this.sync.peerConnections.get(t);if(l&&l.dataChannel&&l.dataChannel.readyState==="open"){console.log(`[SyncRouter/sendSyncMessage] Sending DIRECT message ${s} to ${t.substring(0,4)}`);try{l.dataChannel.send(c)}catch(r){console.error("[SyncRouter/sendSyncMessage] Error sending direct message:",r)}}else console.warn(`[SyncRouter/sendSyncMessage] Cannot send direct message to ${t.substring(0,4)}: no open data channel.`)}else console.log(`[SyncRouter/sendSyncMessage] Broadcasting message ${s} to all ${this.sync.peerConnections.size} peers.`),this.sync.peerConnections.forEach((l,r)=>{if(l.dataChannel&&l.dataChannel.readyState==="open")try{l.dataChannel.send(c)}catch(g){console.error(`[SyncRouter/sendSyncMessage] Error broadcasting message to ${r.substring(0,8)}...:`,g)}})}destroy(){this.seenMessages.clear()}}const fs=5;class ws{constructor(e){this.name="sync",this.workspace=e,this._container=null,this.peerConnections=new Map,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.connectedPeers=new Map,this.signaling=new rs(this),this.fileSync=new ms(this),this.ui=new us(this),this.liveSync=new ys(this),this.messageRouter=new Ws(this),this.sessionId=sessionStorage.getItem("thoughtform_sync_session_id"),this.sessionId||(this.sessionId=crypto.randomUUID(),sessionStorage.setItem("thoughtform_sync_session_id",this.sessionId))}init(e){if(this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&this.fileSync.addEventListener("syncProgress",async i=>{if(this.ui.updateSyncProgress(i),i.detail.type==="complete"&&i.detail.action==="receive"&&i.detail.gardenName){if(this.liveSync.state==="bootstrapping"){console.log("%c[Sync] Bootstrap file sync complete. Finalizing live session.","color: #12ffbc; font-weight: bold;");const n=i.detail.gardenName,s=new w(n);await s.initRepo(),this.workspace.gitClients.set(n,s),window.thoughtform.sidebar&&window.thoughtform.sidebar.gitClient.gardenName===n&&(window.thoughtform.sidebar.gitClient=s),await window.thoughtform.sidebar.refresh(),window.thoughtform.events.publish("workspace:garden:reloaded",{gardenName:n});return}this.workspace.hotReloadGarden(i.detail.gardenName)}}),localStorage.getItem("thoughtform_sync_auto_connect")==="true"){const i=localStorage.getItem("thoughtform_sync_name"),n=localStorage.getItem("thoughtform_peer_prefix")||"";i&&this.connect(i,n)}}async connect(e,t){this.connectionState!=="disconnected"&&this.connectionState!=="error"||(this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.joinSession(this.syncName,t))}disconnect(){this.disableLiveSync(),this.signaling.destroy(),this.peerConnections.forEach(e=>e.close()),this.peerConnections.clear(),this.isConnected=!1,this.syncName=null,this.connectedPeers.clear(),this.updateConnectionState("disconnected","Disconnected")}enableLiveSync(){this.liveSync.enable()}disableLiveSync(){this.liveSync.disable()}triggerReElection(){this.liveSync.triggerReElection()}createPeerConnection(e,t=!1){if(this.peerConnections.has(e))return this.peerConnections.get(e);if(this.peerConnections.size>=fs)return null;const i=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});return this.peerConnections.set(e,i),i.onicecandidate=n=>{n.candidate&&this.signaling.sendSignal({type:"candidate",candidate:n.candidate},e)},i.onconnectionstatechange=()=>{const n=i.connectionState;n==="connected"?(this.updateConnectionState("connected-p2p",`P2P Connected (${this.connectedPeers.size+1} total)`),localStorage.getItem("thoughtform_live_sync_enabled")==="true"&&this.liveSync.state==="disabled"&&this.enableLiveSync()):(n==="failed"||n==="disconnected"||n==="closed")&&this.handlePeerLeft(e)},t||(i.ondatachannel=n=>this.setupDataChannel(e,n.channel)),i}setupDataChannel(e,t){const i=this.peerConnections.get(e);i&&(i.dataChannel=t,t.onopen=()=>{if(this._announcePresence(e),localStorage.getItem("thoughtform_live_sync_enabled")==="true"&&this.liveSync.state==="disabled")this.enableLiveSync();else if(this.liveSync.state!=="disabled"){const n=this.getPeerId(),s=localStorage.getItem("thoughtform_peer_prefix")||n.substring(0,8);this.sendSyncMessage({type:"MSG_LIVESYNC_ANNOUNCE",peerInfo:{id:n,name:s}},e,!1)}},t.onmessage=async n=>{try{console.log(`[Sync/onmessage] Raw message received from P2P channel with ${e.substring(0,4)}`);const s=JSON.parse(n.data);this.messageRouter.handleIncomingMessage(s,`P2P-${e.substring(0,4)}`)}catch(s){console.error("[Sync/onmessage] Error parsing sync message from DataChannel:",s,"Raw data:",n.data)}},t.onclose=()=>this.handlePeerLeft(e),t.onerror=n=>console.error(`[Sync/onerror] Data channel error with ${e.substring(0,8)}...:`,n))}updatePeerIdDisplay(){const e=this._container?.querySelector("#sync-peer-id-display");if(e){const t=this.getPeerId();t?e.textContent=t:this.connectionState==="disconnected"||this.connectionState==="error"?e.textContent="Not Connected":e.textContent="Connecting..."}}updateConnectionState(e,t){this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal",this.updatePeerIdDisplay(),this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e))}_announcePresence(e=null){if(!this.signaling.peerId)return;console.log("[Sync/_announcePresence] Announcing presence.");const t=JSON.parse(localStorage.getItem("thoughtform_gardens")||'["home"]'),i=localStorage.getItem("thoughtform_peer_prefix")||this.signaling.peerId.substring(0,8);this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,peerName:i,gardens:t,sessionId:this.sessionId},e,!0)}handlePeerIntroduction(e){if(!e.peerId||e.peerId===this.signaling.peerId)return;if(e.sessionId===this.sessionId){console.warn(`[Sync] Detected and closing a connection to a peer from the same browser session: ${e.peerId.substring(0,8)}`);const n=this.peerConnections.get(e.peerId);n&&n.close();return}const t=e.peerName||e.peerId.substring(0,8),i=!this.connectedPeers.has(e.peerId);this.connectedPeers.set(e.peerId,{id:t,gardens:e.gardens}),i&&this.addMessage(`Peer ${t} discovered.`),this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} peer${this.connectedPeers.size===1?"":"s"})`)}handlePeerLeft(e){if(this.connectedPeers.has(e)){const i=this.connectedPeers.get(e).id;this.connectedPeers.delete(e),this.addMessage(`Peer ${i} disconnected.`)}const t=this.peerConnections.get(e);t&&(t.close(),this.peerConnections.delete(e)),this.liveSync.handlePeerLeft(e),this.ui.updateLiveSyncUI(),this.peerConnections.size===0&&this.connectionState==="connected-p2p"?this.updateConnectionState("connected-signal","Connected to tracker, waiting for peers..."):this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} total)`)}getPeerId(){return this.signaling.peerId}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui&&this.ui.addMessage(e)}sendSyncMessage(e,t=null,i=!1){console.log(`[Sync/sendSyncMessage] Preparing to send message of type ${e.type}. Target: ${t?t.substring(0,4):"Broadcast"}, Gossip: ${i}`),this.messageRouter.sendSyncMessage(e,t,null,i)}show(){this._container&&(this._container.style.display="block")}hide(){this._container&&(this._container.style.display="none")}destroy(){this.disconnect(),this.fileSync.destroy(),this.messageRouter.destroy()}}window.Buffer=Fe.Buffer;window.process={env:{}};function Bs(){const a=async()=>{window.thoughtform.workspace.updateSessionFromUrl(),await es();const e=new URL(import.meta.url).pathname,t=e.lastIndexOf("/src/"),i=t>-1?e.substring(0,t):"";let n=window.location.pathname.startsWith(i)?window.location.pathname.substring(i.length):window.location.pathname;n=n.replace(/^\/|\/$/g,"")||"home",n=decodeURIComponent(n);const s=window.location.hash||"#/home",o=decodeURI(s.substring(1).split("?")[0]);(window.location.hash||"").includes("?windowed=true")&&window.parent.postMessage({type:"preview-url-changed",payload:{newUrl:window.location.href}},"*"),await window.thoughtform.workspace.openFile(n,o)};return window.addEventListener("popstate",a),a}async function vs(){await os(),window.thoughtform={ui:{},ai:Xi(),config:Fi(),events:Hi(),Modal:y,Git:w};const a=new w("home"),e=_n(a),t=new ws(e);window.thoughtform.workspace=e,window.thoughtform.sync=t,ji({onNeedRefresh(){y.confirm({title:"Update Available",message:"A new version of Thoughtform Garden is available. Reload to apply the update?",okText:"Reload"}).then(l=>{if(l){const r=window.pwaRegistration;r&&r.waiting&&r.waiting.postMessage({type:"SKIP_WAITING"})}})},onOfflineReady(){console.log("App is ready for offline use.")}}),oi(),Gi(),window.thoughtform.runMigration=Ai;const i=(window.location.hash||"").includes("?windowed=true");window.onerror=function(l,r,g,d,h){return console.error("Caught global error:",l,h),i||window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1},window.onunhandledrejection=function(l){console.error("Caught unhandled promise rejection:",l.reason),i||window.thoughtform.ui.toggleDevtools?.(!0,"console")};const n=new yi;window.thoughtform.commandPalette=n,await window.thoughtform.workspace.render();const s=window.thoughtform.workspace.getActiveEditor();if(!s){console.error("FATAL: Workspace manager failed to create an initial editor.");return}window.thoughtform.editor=s;const o=new Li(window.thoughtform.events);o.initialize(),window.thoughtform.hooks=o,await Bs()(),window.thoughtform.workspace.isInitialized=!0,window.thoughtform.events.publish("app:load")}vs();
