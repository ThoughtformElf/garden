import{Q as ye,e as f,R,U as ne,V as W,W as we}from"./chunk-vendor.js";import{E as M,H as be,s as Ce,D as x,V as $,R as T,S as se,k as ie,a as q,W as ve,b as Se,c as Ee,m as ke,L as A,j as oe,h as ae,d as re,y as xe,x as Pe,e as Le,f as $e,C as G,A as Te,g as Ie,v as Fe,i as Me,l as Ne,n as De}from"./chunk-codemirror.js";import{F as Re,g as v,i as z}from"./chunk-git.js";import{c as Ae}from"./chunk-gpt-tokenizer.js";import{e as I}from"./chunk-eruda.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();var ce=!1;try{var O={};Object.defineProperty(O,"passive",{get(){return ce=!0,!1}}),window.addEventListener("testpassive",null,O),window.removeEventListener("testpassive",null,O)}catch{}if(ce){var Oe=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(i,e,t){var n=t&&typeof t=="object",s=n?t.capture:t,o=n?Object.assign({},t):{};return o.passive===void 0&&(i==="touchstart"||i==="touchmove"||i==="wheel")&&(o.passive=!0),o.capture===void 0&&(o.capture=!!s),Oe.call(this,i,e,o)}}class J{constructor({targetSelector:e,items:t,containerItems:n=[],itemSelector:s,dataAttribute:o}){if(this.targetSelector=e,this.items=t,this.containerItems=n,this.itemSelector=s,o){const a=o.replace("data-","");this.dataAttributeKey=a.replace(/-([a-z])/g,r=>r[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null;n?this.showMenu(e.clientX,e.clientY,this.items,n):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null,s=n?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,s,n||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,n,s){this.menuElement.innerHTML="",this.menuElement.style.display="block";const o=this.dataAttributeKey&&s.dataset[this.dataAttributeKey]?s.dataset[this.dataAttributeKey]:null;n.forEach(u=>{if(u.type==="separator"){const m=document.createElement("div");m.className="context-menu-separator",this.menuElement.appendChild(m);return}const g=document.createElement("button");g.className="context-menu-item",g.textContent=u.label,g.addEventListener("click",()=>{u.action(o),this.hideMenu()}),this.menuElement.appendChild(g)});const a=this.menuElement.offsetWidth,r=this.menuElement.offsetHeight,{innerWidth:c,innerHeight:l}=window;let d=e,h=t;e+a>c&&(d=c-a-5),t+r>l&&(h=l-r-5),this.menuElement.style.top=`${h}px`,this.menuElement.style.left=`${d}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class b{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const n=document.createElement("button");return n.textContent=e,n.addEventListener("click",t),this.footer.appendChild(n),n}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:n=""}){return new Promise(s=>{const o=new b({title:e}),a=`modal-input-${Date.now()}`,r=`
        <div class="modal-prompt">
          <label for="${a}">${t}</label>
          <input type="text" id="${a}" value="${n}">
        </div>
      `;o.updateContent(r);const c=o.content.querySelector(`#${a}`),l=()=>{s(c.value),o.destroy()},d=()=>{s(null),o.destroy()};c.addEventListener("keydown",h=>{h.key==="Enter"?(h.preventDefault(),l()):h.key==="Escape"&&d()}),o.addFooterButton("OK",l),o.addFooterButton("Cancel",d),o.show(),c.focus(),c.select()})}static confirm({title:e,message:t,okText:n="OK",cancelText:s="Cancel",destructive:o=!1}){return new Promise(a=>{const r=new b({title:e});r.updateContent(`<p>${t}</p>`);const c=()=>{a(!0),r.destroy()},l=()=>{a(!1),r.destroy()},d=r.addFooterButton(n,c);o&&d.classList.add("destructive"),r.addFooterButton(s,l),r.show()})}static choice({title:e,message:t,choices:n}){return new Promise(s=>{const o=new b({title:e});o.updateContent(t),n.forEach(r=>{const c=o.addFooterButton(r.text,()=>{s(r.id),o.destroy()});r.class&&c.classList.add(r.class)});const a=r=>{r.key==="Escape"&&(s(null),o.destroy(),document.removeEventListener("keydown",a))};document.addEventListener("keydown",a),o.show()})}static selection({title:e,peerData:t,okText:n="Request"}){return new Promise(s=>{if(t.size===0){const l=new b({title:"No Peers Found"});l.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),l.addFooterButton("OK",()=>{l.destroy(),s(null)}),l.show();return}const o=new b({title:e});let a='<div class="peer-selection-container">';t.forEach((l,d)=>{const h=d.substring(0,8);a+=`
          <div class="peer-group" data-peer-id="${d}">
            <strong class="peer-title">Peer: ${h}...</strong>
            <div class="garden-checkbox-list">
              ${l.gardens.map(u=>`
                <label>
                  <input type="checkbox" class="garden-select-checkbox" value="${u}">
                  <span>${u}</span>
                </label>
              `).join("")}
            </div>
          </div>
        `}),a+="</div>",o.updateContent(a);const r=()=>{const l={};o.content.querySelectorAll(".peer-group").forEach(d=>{const h=d.dataset.peerId,u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);u.length>0&&(l[h]=u)}),s(Object.keys(l).length>0?l:null),o.destroy()},c=()=>{s(null),o.destroy()};o.addFooterButton(n,r),o.addFooterButton("Cancel",c),o.show()})}}const _e={async renderFiles(i){try{const e=await this.listFiles(this.gitClient,"/"),t=new Map;for(const[o,a,r]of i)a!==r&&t.set(`/${o}`,"modified");const n=decodeURIComponent(window.location.hash.substring(1)),s=e.sort().map(o=>{const a=`#${o}`,r=t.get(o)||"unmodified",c=o.startsWith("/")?o.substring(1):o,l=[`status-${r}`];return o===n&&l.push("active"),`<li><a href="${a}" class="${l.join(" ")}" data-filepath="${o}">${c}</a></li>`}).join("");this.contentContainer.innerHTML=`<ul>${s}</ul>`}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleNewFile(){const i=await b.prompt({title:"New File",label:"Enter new file name:"});if(!i)return;const e=`/${i}`;try{await this.gitClient.pfs.stat(e),await this.showAlert({title:"File Exists",message:`File "${i}" already exists.`})}catch(t){t.code==="ENOENT"?(await this.gitClient.writeFile(e,""),window.location.hash=`#${e}`):(console.error("Error checking for file:",t),await this.showAlert({title:"Error",message:"An error occurred while creating the file."}))}},async handleRename(i){const e=await b.prompt({title:"Rename File",label:`Enter new name for ${i.substring(1)}:`,defaultValue:i.substring(1)});if(!e||e===i.substring(1))return;const t=`/${e}`;try{const n=t.substring(0,t.lastIndexOf("/"));n&&await this.ensureDir(n),await this.gitClient.pfs.rename(i,t),decodeURIComponent(window.location.hash)===`#${i}`?window.location.hash=`#${t}`:await this.refresh()}catch(n){console.error("Error renaming file:",n),await this.showAlert({title:"Error",message:"Failed to rename file. Check console for details."})}},async handleDuplicate(i){const e=i.substring(0,i.lastIndexOf("/")),t=i.substring(i.lastIndexOf("/")+1),n=t.lastIndexOf("."),s=n>0;let o;if(s){const c=t.substring(0,n),l=t.substring(n);o=`${c} (copy)${l}`}else o=`${t} (copy)`;const a=await b.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:o});if(!a)return;const r=`${e}/${a}`;try{const c=await this.gitClient.readFile(i);await this.gitClient.writeFile(r,c),await this.refresh()}catch(c){console.error("Error duplicating file:",c),await this.showAlert({title:"Error",message:"Failed to duplicate file."})}},async handleDelete(i){if(await this.showConfirm({title:"Delete File",message:`Are you sure you want to permanently delete "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=decodeURIComponent(window.location.hash)===`#${i}`;await this.gitClient.pfs.unlink(i),t?window.location.hash="#/home":await this.refresh()}catch(t){console.error("Error deleting file:",t),await this.showAlert({title:"Error",message:"Failed to delete file."})}}};class P{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new Re(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),this.registerNewGarden();return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await v.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/home",e,"utf8"),this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async rmrf(e){try{if((await this.pfs.stat(e)).isDirectory()){const n=await this.pfs.readdir(e);for(const s of n)await this.rmrf(`${e}/${s}`);await this.pfs.rmdir(e)}else await this.pfs.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async clearWorkdir(){const e=await this.pfs.readdir("/");for(const t of e)t!==".git"&&await this.rmrf(`/${t}`)}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{await this.pfs.stat(n)}catch(o){if(o.code==="ENOENT")try{await this.pfs.mkdir(n)}catch(a){if(a.code!=="EEXIST")throw a}else throw o}}}async listAllFilesForClone(e="/"){let t=[];const n=await this.pfs.readdir(e);for(const s of n){const o=`${e==="/"?"":e}/${s}`;(await this.pfs.stat(o)).isDirectory()?t=t.concat(await this.listAllFilesForClone(o)):t.push(o)}return t}async stage(e){const t=e.startsWith("/")?e.substring(1):e,s=(await this.getStatuses()).find(a=>a[0]===t);if(!s){console.error(`Could not find status for "${t}". Cannot stage.`);return}s[2]===0?await v.remove({fs:this.fs,dir:"/",filepath:t}):await v.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await v.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){const t=e.startsWith("/")?e.substring(1):e;try{const s=(await this.getStatuses()).find(a=>a[0]===t);if(!s)return;s[1]===0?await this.pfs.unlink(e):await v.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0})}catch(n){console.error(`[discard] An error occurred for ${e}:`,n)}}async commit(e){const t=await v.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async push(e,t,n){return await v.push({fs:this.fs,http:z,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t})})}async pull(e,t,n){return await v.pull({fs:this.fs,http:z,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t}),author:{name:"User",email:"user@thoughtform.garden"},singleBranch:!0,fastForward:!0})}async log(){try{return await v.log({fs:this.fs,dir:"/",depth:20})}catch{return[]}}async getChangedFiles(e){try{const{commit:t}=await v.readCommit({fs:this.fs,dir:"/",oid:e}),n=t.parent[0];if(!n)return(await v.listFiles({fs:this.fs,dir:"/",ref:e})).map(o=>`/${o}`);const s=[];return await v.walk({fs:this.fs,dir:"/",trees:[v.TREE({ref:n}),v.TREE({ref:e})],map:async(o,[a,r])=>{if(o===".")return;const c=a&&await a.oid(),l=r&&await r.oid();if(c===l)return;(r?await r.type():await a.type())==="blob"&&s.push(`/${o}`)}}),s}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const n=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const s=e==="HEAD"?await v.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:o}=await v.readBlob({fs:this.fs,dir:"/",oid:s,filepath:n});return new TextDecoder().decode(o)}catch(s){return s.name==="NotFoundError"?"":null}}async readFile(e){try{return await this.pfs.readFile(e,"utf8")}catch{return`// "${e}" does not exist yet, type anywhere to create it.`}}async readFileAsBuffer(e){try{return await this.pfs.readFile(e)}catch{return null}}async writeFile(e,t){const n=typeof t=="string"?"utf8":void 0;try{await this.pfs.writeFile(e,t,n),this.markGardenAsDirty(!0)}catch(s){if(s.code==="ENOENT"){const o=e.substring(0,e.lastIndexOf("/"));if(o&&o!=="/")try{await this.ensureDir(o),await this.pfs.writeFile(e,t,n),this.markGardenAsDirty(!0)}catch(a){throw a}else throw s}else throw s}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),n=t?JSON.parse(t):[],s=n.indexOf(this.gardenName);e&&s===-1?n.push(this.gardenName):!e&&s!==-1&&n.splice(s,1),localStorage.setItem("dirty_gardens",JSON.stringify(n))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return v.statusMatrix({fs:this.fs,dir:"/"})}}const Ue={async renderGardens(){try{const i=localStorage.getItem("thoughtform_gardens"),e=i?JSON.parse(i):[],t=localStorage.getItem("dirty_gardens"),n=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let s="";for(const o of e.sort()){const a=decodeURIComponent(o),r=n.has(a),c=`/${encodeURIComponent(o)}`,l=this.gitClient.gardenName===a,d=[];l&&d.push("active"),r&&d.push("status-modified"),s+=`<li><a href="${c}" class="${d.join(" ")}" data-garden-name="${o}">${a}</a></li>`}this.contentContainer.innerHTML=`<ul>${s}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(o=>{o.addEventListener("click",a=>{this.gitClient.gardenName!==a.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(i){console.error("Error rendering garden list:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const i=await b.prompt({title:"New Garden",label:"Enter new garden name:"});if(!i||!i.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(i)){await this.showAlert({title:"Garden Exists",message:`Garden "${i}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(i)}`},async handleDuplicateGarden(i){if(!i)return;const t=`${decodeURIComponent(i)} (copy)`,n=await b.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!n||!n.trim()||n===i)return;const s=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const o=new P(i),a=new P(n);await a.initRepo();const r=await this.listFiles(o,"/");let c=0;for(const l of r){c++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${c} of ${r.length}:<br>${l.substring(1)}</p>`;const d=await o.readFile(l);await a.writeFile(l,d)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(n)}`)},500)}catch(o){console.error("Error duplicating garden:",o),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=s}},100)},async handleDeleteGarden(i){if(!i)return;if(i==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];n=n.filter(o=>o!==i),localStorage.setItem("thoughtform_gardens",JSON.stringify(n));const s=`garden-fs-${i}`;await new Promise((o,a)=>{const r=indexedDB.deleteDatabase(s);r.onsuccess=()=>o(),r.onerror=c=>a(c.target.error),r.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),a(new Error("Deletion blocked"))}}),this.gitClient.gardenName===i?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},Be={async renderGitView(){try{const[i,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],n=[];for(const[h,u,g,m]of i){const w=`/${h}`;(u!==g||u!==m)&&(g===m?t.push({filepath:w,status:"staged"}):n.push({filepath:w,status:"unstaged"}))}const s=this.renderRemoteSection(),o=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,a=this.renderFileSection("Changes",n,!1),r=this.renderFileSection("Staged Changes",t,!0),c=this.renderHistorySection(e),l=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${s}
          ${o}
          ${r}
          ${a}
          ${c}
        </div>
      `;const d=this.contentContainer.querySelector("#git-commit-message");d&&(d.value=l),this.addGitViewListeners(),this.updateCommitButtonState()}catch(i){console.error("Error rendering Git view:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderRemoteSection(){const i=this.getRemoteConfig();return`
      <div class="git-remote-section">
        <h3>Remote</h3>
        <input type="text" id="git-remote-url" placeholder="Remote URL" value="${i.url}">
        <input type="password" id="git-remote-auth" placeholder="Username or Token" value="${i.auth}">
        <div class="git-remote-actions">
          <button id="git-pull-button">Pull</button>
          <button id="git-push-button">Push</button>
        </div>
        <div class="git-remote-log" id="git-remote-log">Ready</div>
      </div>
    `},renderFileSection(i,e,t){const n=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let s="";return e.length>0?s=e.map(a=>{const r=a.filepath.startsWith("/")?a.filepath.substring(1):a.filepath;return`
          <li class="git-file-item ${this.editor.filePath===a.filepath?"active":""}" data-filepath="${a.filepath}">
            <span class="git-file-path">${r}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${n}
            </span>
          </li>
        `}).join(""):s=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${i} (${e.length})</h3>
        <ul class="git-file-list">
          ${s}
        </ul>
      </div>
    `},renderHistorySection(i){let e="";return i.length>0?e=i.map(t=>{const n=t.commit.message.split(`
`)[0],s=t.oid.substring(0,7),o=t.commit.author.name,a=new Date(t.commit.author.timestamp*1e3).toLocaleString(),r=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${r}" data-author="${o}" data-date="${a}">
                <div class="git-history-header">
                  <span class="git-history-message">${n}</span>
                  <span class="git-history-oid">${s}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const i=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!i||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,n=i.value.trim().length>0;e.disabled=!(t&&n)},getRemoteConfig(){const i=`thoughtform_remote_config_${this.gitClient.gardenName}`;try{const e=localStorage.getItem(i);if(e)return JSON.parse(e)}catch(e){console.error("Could not parse remote config from localStorage",e)}return{url:"",auth:""}},saveRemoteConfig(i,e){const t=`thoughtform_remote_config_${this.gitClient.gardenName}`,n={url:i,auth:e};localStorage.setItem(t,JSON.stringify(n))},addGitViewListeners(){const i=this.contentContainer.querySelector("#git-remote-url"),e=this.contentContainer.querySelector("#git-remote-auth"),t=this.contentContainer.querySelector("#git-push-button"),n=this.contentContainer.querySelector("#git-pull-button"),s=this.contentContainer.querySelector("#git-remote-log"),o=()=>{this.saveRemoteConfig(i.value,e.value)};i.addEventListener("input",o),e.addEventListener("input",o);const a=async d=>{const h=i.value.trim(),u=e.value.trim();if(!h){s.textContent="Error: Remote URL is required.";return}t.disabled=!0,n.disabled=!0;const g=d==="push"?"Pushing":"Pulling";s.textContent=`${g} to ${h}...`;try{const m=await this.gitClient[d](h,u,w=>{s.textContent=w});m.ok?s.textContent=`${g} complete.`:s.textContent=`Error: ${m.error||"Unknown error"}`,d==="pull"&&(await this.refresh(),await this.editor.forceReloadFile(this.editor.filePath))}catch(m){console.error(`${g} failed:`,m),s.textContent=`Error: ${m.message||"Check console for details."}`}finally{t.disabled=!1,n.disabled=!1}};t.addEventListener("click",()=>a("push")),n.addEventListener("click",()=>a("pull"));const r=this.contentContainer.querySelector("#git-commit-message");r&&!r.dataset.listenerAttached&&(r.dataset.listenerAttached="true",r.addEventListener("input",()=>this.updateCommitButtonState()));const c=this.contentContainer.querySelector(".git-view-container");c&&!c.dataset.listenerAttached&&(c.dataset.listenerAttached="true",c.addEventListener("click",async d=>{const h=d.target,u=h.closest(".git-file-item"),g=h.closest(".git-history-item");if(u){const m=u.dataset.filepath;h.matches(".git-file-path")?(this.editor.filePath!==m&&await this.editor.loadFile(m),this.editor.showDiff(await this.gitClient.readBlob(m))):h.matches(".git-action-button")&&(d.stopPropagation(),h.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${m}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(m),this.editor.filePath===m&&await this.editor.forceReloadFile(m),await this.refresh()):h.classList.contains("stage")?(await this.gitClient.stage(m),await this.renderGitView()):h.classList.contains("unstage")&&(await this.gitClient.unstage(m),await this.renderGitView()))}else if(g&&h.closest(".git-history-header")){const m=g.querySelector(".git-history-details");if(m.style.display!=="none")m.style.display="none";else if(m.style.display="block",!m.dataset.loaded){m.innerHTML='<span class="no-changes">Loading...</span>';const S=g.dataset.oid,y=await this.gitClient.getChangedFiles(S),E=g.dataset.author,C=g.dataset.date,L=y.map(k=>{const j=typeof k=="string"?k:k.path;return`<div class="history-file-path" data-path="${j}">${j.substring(1)}</div>`}).join("");m.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${E}</div>
                      <div><strong>Date:</strong> ${C}</div>
                    </div>
                    <div class="history-file-list">${L||'<span class="no-changes">No files changed.</span>'}</div>
                  `,m.dataset.loaded="true"}}else if(h.closest(".history-file-path")){c.querySelectorAll(".history-file-path.active").forEach(E=>E.classList.remove("active")),h.classList.add("active");const m=h.closest(".git-history-item"),w=h.dataset.path,S=m.dataset.oid,y=m.dataset.parentOid;await this.editor.previewHistoricalFile(w,S,y)}}));const l=this.contentContainer.querySelector("#git-commit-button");l&&!l.dataset.listenerAttached&&(l.dataset.listenerAttached="true",l.addEventListener("click",async()=>{const d=this.contentContainer.querySelector("#git-commit-message"),h=d.value.trim();if(h)try{l.disabled=!0,l.textContent="Committing...",await this.gitClient.commit(h),this.editor.hideDiff(),d.value="",await this.refresh()}catch(u){console.error("Commit failed:",u),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),l.textContent="Commit"}}))}};class qe{constructor({target:e,gitClient:t,editor:n}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!n)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=n,this.targetSelector=e;const s=document.querySelector(this.targetSelector);if(!s){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=s,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,_e),Object.assign(this,Ue),Object.assign(this,Be)}async init(){this.renderTabs(),this.setupContextMenus(),await this.refresh()}async showAlert({title:e="Notice",message:t}){return new Promise(n=>{const s=new b({title:e});s.updateContent(`<p>${t}</p>`),s.addFooterButton("OK",()=>{s.destroy(),n()}),s.show()})}async showConfirm({title:e,message:t,okText:n="OK",destructive:s=!1}){return b.confirm({title:e,message:t,okText:n,destructive:s,cancelText:"Cancel"})}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{await this.gitClient.pfs.stat(n)}catch(o){if(o.code==="ENOENT")try{await this.gitClient.pfs.mkdir(n)}catch(a){if(a.code!=="EEXIST")throw a}else throw o}}}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new J({targetSelector:".sidebar-content.files-view",itemSelector:"[data-filepath]",dataAttribute:"data-filepath",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},...e]}),new J({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const n=t.target.dataset.tab,s=this.activeTab;if(this.activeTab=n,sessionStorage.setItem("sidebarActiveTab",this.activeTab),s==="Git"&&n!=="Git"){const o=this.editor.getFilePath(window.location.hash);this.editor.loadFile(o)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(n=>{n.classList.toggle("active",n.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,n,s])=>n!==s);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listFiles(e,t){const n=e.pfs;let s=[];try{const o=await n.readdir(t);for(const a of o){if(a===".git")continue;const r=`${t==="/"?"":t}/${a}`;try{(await n.stat(r)).isDirectory()?s=s.concat(await this.listFiles(e,r)):s.push(r)}catch{console.warn(`Could not stat ${r}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No files to list.`)}return s}}const Ge=ye.define(),He=M.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"},".cm-embed-container":{display:"block",padding:"10px 0"},".cm-embedded-image":{maxWidth:"100%",maxHeight:"500px",display:"block",margin:"0 auto",borderRadius:"4px",border:"1px solid var(--color-border)"},".cm-embed-placeholder, .cm-embed-error":{display:"block",padding:"10px",backgroundColor:"var(--color-background-secondary)",borderRadius:"4px",fontStyle:"italic",color:"var(--color-text-secondary)"},".cm-embed-error":{color:"var(--color-text-destructive)"}},{dark:!0}),We=be.define([{tag:f.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[f.name,f.deleted,f.character,f.propertyName,f.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[f.processingInstruction,f.string,f.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[f.function(f.variableName),f.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[f.color,f.constant(f.name),f.standard(f.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[f.definition(f.name),f.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[f.typeName,f.className,f.number,f.changed,f.annotation,f.modifier,f.self,f.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[f.operator,f.operatorKeyword,f.url,f.escape,f.regexp,f.link,f.special(f.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[f.meta,f.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:Ge,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:f.strong,fontWeight:"bold",class:"cm-strong"},{tag:f.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:f.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:f.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:f.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[f.atom,f.bool,f.special(f.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:f.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),je=[He,Ce(We)];function ze(i,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const n=a=>{t.innerHTML=`<p>${a}</p>`,t.classList.add("visible")},s=()=>{t.classList.remove("visible")},o=async(a,r)=>{let c=a;if(a.some(y=>y.isDirectory&&y.name===".git")){const y=await b.choice({title:".git Directory Detected",message:"<p>The content you dropped contains a .git repository. This could unintentionally overwrite your garden's history.</p><p>How would you like to proceed?</p>",choices:[{id:"import_safe",text:"Import Files (Ignore .git folder)"},{id:"cancel",text:"Cancel Import",class:"destructive"}]});if(!y||y==="cancel"){r("Import cancelled by user.","Import cancelled by user.");return}c=a.filter(E=>!(E.isDirectory&&E.name===".git")),r("Ignoring .git directory and proceeding with import.","Ignoring .git directory.")}const d=[],h=[],u=["png","jpg","jpeg","gif","svg","webp","avif"],g=async(y,E)=>{if(y.isFile){const C=await new Promise(k=>y.file(k)),L=`${E}/${C.name}`;C.name.toLowerCase().endsWith(".zip")?h.push(C):d.push({file:C,path:L})}else if(y.isDirectory){const C=y.createReader(),L=await new Promise(k=>C.readEntries(k));for(const k of L)await g(k,`${E}/${y.name}`)}};r("Scanning dropped items...","Scanning dropped items...");for(const y of c)await g(y,"");const m=`Found ${d.length} file(s) and ${h.length} zip archive(s) to process.`;r(m,m);const w=d.map(async({file:y,path:E})=>{let C;const L=y.name.split(".").pop()?.toLowerCase();return u.includes(L)?C=await y.arrayBuffer():C=await y.text(),i.writeFile(E,C)});if((await Promise.allSettled(w)).forEach((y,E)=>{const C=d[E].path;if(y.status==="rejected"){const L=`<span style="color: var(--color-text-destructive);">ERROR:</span> Failed to write "${C}": ${y.reason}`,k=`ERROR: Failed to write "${C}": ${y.reason}`;r(L,k)}else{const L=`<span style="color: var(--color-text-success);">OK:</span> Imported "${C}"`,k=`OK: Imported "${C}"`;r(L,k)}}),h.length>0){const y="Note: Zip archives must be imported via the DevTools > Data panel.";r(y,y)}};window.addEventListener("dragenter",a=>{a.preventDefault(),a.dataTransfer.types.includes("Files")&&n("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",a=>{a.preventDefault()}),window.addEventListener("dragleave",a=>{a.clientX===0&&a.clientY===0&&s()}),window.addEventListener("drop",async a=>{a.preventDefault(),s();const r=a.dataTransfer.items;if(!r||r.length===0)return;const c=Array.from(r).map(l=>l.webkitGetAsEntry()).filter(Boolean);if(c.length>0){const l=new b({title:"Importing Files..."}),d=document.createElement("div");d.style.fontFamily="monospace",d.style.maxHeight="300px",d.style.overflowY="auto",d.style.fontSize="12px",l.updateContent(""),l.content.appendChild(d),l.show();let h="";const u=(g,m)=>{console.log(`[Import Log] ${m}`),h+=`<div>${g}</div>`,d.innerHTML=h,d.scrollTop=d.scrollHeight};try{await o(c,u),u("<strong>Import process complete.</strong>","Import process complete.")}catch(g){const m=`<strong style="color: var(--color-text-destructive);">A critical error occurred: ${g.message}</strong>`,w=`A critical error occurred: ${g.message}`;u(m,w),console.error("[DragDrop] A critical error occurred during import:",g)}finally{l.addFooterButton("Close",()=>l.destroy()),await e.refresh()}}})}const Je=x.mark({class:"cm-hashtag"}),Ve=$.fromClass(class{decorations;constructor(i){this.decorations=this.findHashtags(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findHashtags(i.view))}findHashtags(i){const e=new T,t=/#[\w-]+/g;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let a;for(;a=t.exec(o);){const r=n+a.index,c=r+a[0].length,l=i.state.doc.lineAt(r);if(r>l.from){const g=i.state.doc.sliceString(r-1,r);if(/\s/.test(g)===!1)continue}const d=/https?:\/\/[^\s]+/g;let h,u=!1;for(;h=d.exec(l.text);){const g=l.from+h.index,m=g+h[0].length;if(r>=g&&c<=m){u=!0;break}}u||e.add(r,c,Je)}}return e.finish()}},{decorations:i=>i.decorations}),N=se.define({create:()=>({gitClient:null,sidebar:null}),update:(i,e)=>i});async function Ke(i,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listFiles(e.gitClient,"/"),n=i.toLowerCase();for(const s of t)if((s.startsWith("/")?s.substring(1):s).toLowerCase()===n)return s;return null}async function le(i,e){if(!i)return;let t=i.split("|")[0].trim(),n=null;if(t.includes("#")&&([n,t]=t.split("#")),n){t.startsWith("/")||(t=`/${t}`);const s=new URL(import.meta.url).pathname,o=s.lastIndexOf("/src/"),a=o>-1?s.substring(0,o):"";window.location.href=`${window.location.origin}${a}/${encodeURIComponent(n)}#${encodeURIComponent(t)}`}else{const s=await Ke(t,e);let o;s?o=s:o=t.startsWith("/")?t:`/${t}`,window.location.hash=`#${encodeURIComponent(o)}`}}const Ye=ie.of([{key:"Mod-Enter",run:i=>{const e=i.state.field(N);if(!e.gitClient)return!1;const t=i.state.selection.main.head,n=i.state.doc.lineAt(t),s=[{type:"wikilink",regex:/\[\[([^\[\]]+?)\]\]/g},{type:"markdown",regex:/\[[^\]]*\]\(([^)]+)\)/g},{type:"naked",regex:/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g}];for(const{type:o,regex:a}of s){let r;for(;r=a.exec(n.text);){const c=n.from+r.index,l=c+r[0].length;if(t>=c&&t<=l){if(o==="wikilink")le(r[1],e);else{let d=o==="markdown"?r[1]:r[0];d.startsWith("www.")&&(d=`https://${d}`),window.open(d,"_blank","noopener,noreferrer")}return!0}}}return!1}}]),Xe=x.mark({class:"cm-wikilink"});class Ze{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=this.view.state.field(N);t.gitClient&&le(e.textContent.slice(2,-2),t)}onMouseDown(e){const t=e.target.closest(".cm-wikilink");t&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleNavigation(t))}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new T,n=/\[\[([^\[\]]+?)\]\]/g;for(const{from:s,to:o}of e.visibleRanges){const a=e.state.doc.sliceString(s,o);let r;for(;r=n.exec(a);){const c=s+r.index,l=c+r[0].length;t.add(c,l,Xe)}}return t.finish()}}const Qe=$.fromClass(Ze,{decorations:i=>i.decorations}),et=x.mark({class:"cm-checkbox-todo"}),tt=x.mark({class:"cm-checkbox-done"}),nt=x.mark({class:"cm-checkbox-doing"}),st=$.fromClass(class{decorations;constructor(i){this.decorations=this.findCheckboxes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findCheckboxes(i.view))}findCheckboxes(i){const e=new T,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let a;for(;a=t.exec(o);){const r=a[2],c=n+a.index+a[0].indexOf("["),l=c+3;r===" "?e.add(c,l,et):r==="x"?e.add(c,l,tt):r==="-"&&e.add(c,l,nt)}}return e.finish()}},{decorations:i=>i.decorations}),it=x.mark({class:"cm-timestamp"}),ot=$.fromClass(class{decorations;constructor(i){this.decorations=this.findTimestamps(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findTimestamps(i.view))}findTimestamps(i){const e=new T,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let a;for(;a=t.exec(o);){const r=a[0],c=a[1],l=n+a.index+r.indexOf(c),d=l+c.length;e.add(l,d,it)}}return e.finish()}},{decorations:i=>i.decorations}),at=x.mark({class:"cm-naked-link"});function rt(i){return i?i.startsWith("www.")?"https://"+i:i:null}class ct{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;const n=rt(t.textContent);return n&&window.open(n,"_blank","noopener,noreferrer"),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new T,n=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:s,to:o}of e.visibleRanges){const a=e.state.doc.sliceString(s,o);let r;for(;r=n.exec(a);){const c=e.state.doc.lineAt(s+r.index);if(/\[.*\]\(.*\)/.test(c.text)&&c.text.includes(`](${r[0]})`))continue;const l=s+r.index,d=l+r[0].length;t.add(l,d,at)}}return t.finish()}}const lt=$.fromClass(ct,{decorations:i=>i.decorations}),dt=x.line({class:"cm-blockquote"}),ht=$.fromClass(class{decorations;constructor(i){this.decorations=this.findBlockquotes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findBlockquotes(i.view))}findBlockquotes(i){const e=new T,t=/^\s*>\s/;for(const{from:n,to:s}of i.visibleRanges){let o=n;for(;o<=s;){const a=i.state.doc.lineAt(o);t.test(a.text)&&e.add(a.from,a.from,dt),o=a.to+1}}return e.finish()}},{decorations:i=>i.decorations}),ut=x.line({class:"cm-hr"}),gt=$.fromClass(class{decorations;constructor(i){this.decorations=this.findRulers(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findRulers(i.view))}findRulers(i){const e=new T,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:n,to:s}of i.visibleRanges){let o=n;for(;o<=s;){const a=i.state.doc.lineAt(o);t.test(a.text)&&e.add(a.from,a.from,ut),o=a.to+1}}return e.finish()}},{decorations:i=>i.decorations}),de=["png","jpg","jpeg","gif","svg","webp","avif"];function mt(i){switch(i.toLowerCase()){case"png":return"image/png";case"jpg":case"jpeg":return"image/jpeg";case"gif":return"image/gif";case"svg":return"image/svg+xml";case"webp":return"image/webp";case"avif":return"image/avif";default:return"application/octet-stream"}}class V extends ve{constructor(e,t,n,s){super(),this.linkTarget=e,this.altText=t,this.type=n,this.view=s,this.objectURL=null}eq(e){return this.linkTarget===e.linkTarget&&this.type===e.type}toDOM(){const e=document.createElement("span");if(e.className="cm-embed-container",this.type==="external"){const t=document.createElement("img");t.src=this.linkTarget,t.alt=this.altText,t.className="cm-embedded-image",e.appendChild(t)}else{const t=document.createElement("span");t.className="cm-embed-placeholder",t.textContent=`Loading: ${this.linkTarget}`,e.appendChild(t),this.loadInternalContent(e).catch(n=>{console.error(`Failed to load internal embed for ${this.linkTarget}:`,n),t.textContent=`Error: ${this.linkTarget} not found.`,e.classList.add("cm-embed-error")})}return e}async loadInternalContent(e){let n=decodeURIComponent(this.linkTarget),s=null;n.includes("#")&&([s,n]=n.split("#"));const o=n.split(".").pop()?.toLowerCase();if(!de.includes(o)){e.textContent="",e.style.display="none";return}const a=this.view.state.field(N);let r;s&&s!==a.gitClient.gardenName?r=new P(s):r=a.gitClient;const c=n.startsWith("/")?n:`/${n}`,l=await r.readFileAsBuffer(c);if(!l)throw new Error("File could not be read as a buffer.");const d=mt(o),h=new Blob([l],{type:d});this.objectURL=URL.createObjectURL(h);const u=document.createElement("img");u.src=this.objectURL,u.alt=this.linkTarget,u.className="cm-embedded-image",e.innerHTML="",e.appendChild(u)}destroy(){this.objectURL&&URL.revokeObjectURL(this.objectURL)}}function K(i){const e=new T,t=q(i.state),n=s=>{let o=t.resolve(s,1);for(;o;){if(o.name.includes("Code"))return!0;o=o.parent}return!1};for(const{from:s,to:o}of i.visibleRanges){const a=i.state.doc.sliceString(s,o),r=/!\[\[([^\[\]]+?)\]\]/g;let c;for(;c=r.exec(a);){const d=s+c.index;if(n(d))continue;const h=d+c[0].length,u=c[1];e.add(d,h,x.replace({widget:new V(u,u,"internal",i)}))}const l=/!\[(.*?)\]\((.*?)\)/g;for(;c=l.exec(a);){const d=s+c.index;if(n(d))continue;const h=d+c[0].length,u=c[1],g=c[2],m=g.split(".").pop()?.toLowerCase()?.split("?")[0];g.startsWith("http")&&de.includes(m)&&e.add(d,h,x.replace({widget:new V(g,u,"external",i)}))}}return e.finish()}const ft=$.fromClass(class{constructor(i){this.decorations=K(i)}update(i){(i.docChanged||i.viewportChanged||q(i.startState)!==q(i.state))&&(this.decorations=K(i.view))}},{decorations:i=>i.decorations}),pt=[Ve,Qe,st,ot,lt,ht,gt,ft],Y=Se.define(Ee),yt=ke({base:$e,codeLanguages:[A.of({name:"javascript",load:()=>Promise.resolve(oe())}),A.of({name:"html",load:()=>Promise.resolve(ae())}),A.of({name:"css",load:()=>Promise.resolve(re())})]});function X(i){const e=i.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return Y}switch(t){case"js":return oe();case"css":return re();case"html":return ae();case"json":return Le();case"xml":return Pe();case"yaml":case"yml":return xe();case"sh":case"bash":case"zsh":return Y;default:return yt}}const wt=x.mark({class:"cm-diff-inserted"});function Z(i,e){const t=[],n=e.doc.toString(),s=R(i,n);let o=0;for(const[a,r]of s)a===R.INSERT&&t.push(wt.range(o,o+r.length)),a!==R.DELETE&&(o+=r.length);return x.set(t)}const _=new G;function bt(i){return se.define({create(e){return Z(i,e)},update(e,t){return t.docChanged?Z(i,t.state):e.map(t.changes)},provide:e=>M.decorations.from(e)})}const Ct=$.fromClass(class{constructor(i){this.view=i,this.statusBar=document.createElement("div"),this.statusBar.className="token-status-bar",this.countElement=document.createElement("span"),this.countElement.className="token-count",this.statusBar.appendChild(this.countElement);const e=i.dom.closest("main");e?e.appendChild(this.statusBar):i.dom.parentNode.insertBefore(this.statusBar,i.dom.nextSibling),this.debouncedUpdate=ne(this.updateTokenCount.bind(this),250),this.updateTokenCount()}update(i){i.docChanged&&this.debouncedUpdate()}updateTokenCount(){try{const i=this.view.state.doc.toString(),e=Ae(i);this.countElement.textContent=`Tokens: ${e.toLocaleString()}`}catch(i){console.warn("Token counting error:",i),this.countElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function vt(){return Ct}const U=Te.define();class D{static editors=[];constructor({url:e,target:t="body main",editorConfig:n={},gitClient:s}){if(!s)throw new Error("Editor requires a gitClient instance.");window.location.hash||(window.location.hash="#home"),this.targetSelector=t,this.url=e||window.location.hash,this.editorConfig=n,this.gitClient=s,this.editorView=null,this.sidebar=null,this.filePath=this.getFilePath(this.url),this.isReady=!1,this.mainContainer=null,this.languageCompartment=new G,this.tokenCounterCompartment=new G,this.imageViewerElement=null,this.currentObjectUrl=null,this.debouncedHandleUpdate=ne(this.handleUpdate.bind(this),500),this.init()}async init(){if(this.mainContainer=document.querySelector(this.targetSelector),!this.mainContainer){console.error(`Target container not found: ${this.targetSelector}`);return}await this.gitClient.initRepo(),this.sidebar=new qe({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),ze(this.gitClient,this.sidebar);const e=await this.loadFileContent(this.filePath),t=document.getElementById("loading-indicator");t&&t.remove(),this.mainContainer.style.display="flex",this.imageViewerElement=document.createElement("div"),this.imageViewerElement.className="image-viewer-container",this.mainContainer.appendChild(this.imageViewerElement);const n=M.updateListener.of(s=>{s.docChanged&&!s.transactions.some(o=>o.annotation(U))&&this.debouncedHandleUpdate(s.state.doc.toString())});Ie.map("jj","<Esc>","insert"),this.editorView=new M({doc:e,extensions:[N.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar})),Ye,ie.of([De]),Fe(),Me,M.lineWrapping,Ne,je,this.languageCompartment.of(X(this.filePath)),n,...pt,_.of([]),this.tokenCounterCompartment.of(vt()),...this.editorConfig.extensions||[]],parent:this.mainContainer}),D.editors.push(this),this.isReady=!0,this.listenForNavigation(),this.loadFile(this.filePath),this.editorView.focus()}async loadFileContent(e){try{return await this.gitClient.readFile(e)}catch(t){return console.warn(`Could not read file ${e}, starting with empty content.`,t),""}}async showDiff(e){if(e===null){console.error("Cannot show diff, original content is null."),this.hideDiff();return}const t=bt(e);this.editorView.dispatch({effects:_.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:_.reconfigure([])})}listenForNavigation(){window.addEventListener("hashchange",async()=>{this.hideDiff();const e=this.getFilePath(window.location.hash);e&&this.filePath!==e&&await this.loadFile(e)})}async previewHistoricalFile(e,t,n){const[s,o]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(n,e)]);if(s===null||o===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:s},annotations:U.of(!0)}),this.showDiff(o)}async loadFile(e){const t=["png","jpg","jpeg","gif","svg","webp","avif"],n=e.split(".").pop()?.toLowerCase();if(t.includes(n)){console.log(`Displaying image: ${e}`),this.hideDiff(),this.mainContainer.classList.remove("is-editor"),this.mainContainer.classList.add("is-image-preview"),this.imageViewerElement.innerHTML="<p>Loading image...</p>";const r=await this.gitClient.readFileAsBuffer(e);if(r){const c=`image/${n==="svg"?"svg+xml":n}`,l=new Blob([r],{type:c});this.currentObjectUrl&&URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=URL.createObjectURL(l),this.imageViewerElement.innerHTML=`<img src="${this.currentObjectUrl}" alt="${e}" />`}else this.imageViewerElement.innerHTML=`<p class="error">Could not load image: ${e}</p>`;this.filePath=e,this.sidebar&&await this.sidebar.refresh();return}this.mainContainer.classList.remove("is-image-preview"),this.mainContainer.classList.add("is-editor"),this.currentObjectUrl&&(URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=null),this.hideDiff();const s=await this.loadFileContent(e);this.filePath=e;const o=X(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(o)});const a=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:a.length,insert:s},annotations:U.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){console.log(`forceReloadFile: Forcibly reloading ${e} from disk.`),await this.loadFile(e)}async handleUpdate(e){if(this.isReady){if(this.filePath!==this.getFilePath(window.location.hash)){console.log("In preview mode, not saving changes.");return}await this.gitClient.writeFile(this.filePath,e),this.sidebar&&await this.sidebar.refresh()}}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="home"),t}}window.Editor=D;function St(){Et(),kt()}function Et(){const i=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!i||!e||!t)return;const n=document.createElement("button");n.id="sidebar-toggle-icon",n.title="Toggle Sidebar (Ctrl + [)",e.appendChild(n);let s=0,o=!1;const a=()=>{if(i.classList.contains("sidebar-collapsed")){const g=localStorage.getItem("sidebarWidth")||"250px";i.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",g),localStorage.setItem("sidebarCollapsed","false"),n.textContent="‹"}else{const g=document.documentElement.style.getPropertyValue("--sidebar-width");g!=="0px"&&localStorage.setItem("sidebarWidth",g),i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),n.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=a);const r=u=>{u.type==="touchmove"&&u.preventDefault();const g=u.clientX||u.touches&&u.touches[0].clientX;if(Math.abs(g-s)>5&&(o=!0),o){const m=Math.max(24,Math.min(g,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${m}px`),i.classList.remove("sidebar-collapsed"),n.textContent="‹"}},c=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",r),document.removeEventListener("touchmove",r),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o){const u=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",u),localStorage.setItem("sidebarCollapsed","false")}else a()},l=u=>{s=u.clientX||u.touches&&u.touches[0].clientX,o=!1,u.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",r,{passive:!1}),document.addEventListener("touchmove",r,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c)};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),n.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",d||"250px"),n.textContent="‹")}function kt(){const i=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!i||!e)return;const n=document.createElement("button");n.id="eruda-toggle",n.title="Toggle DevTools (Ctrl + `)",e.appendChild(n);let s=0,o=!1;const a=(h=null,u=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const g=t.style.height==="0px"||t.offsetHeight<10;if(h===null?g:h){const w=localStorage.getItem("erudaHeight")||"250px";t.style.height=w,n.textContent="▼",localStorage.setItem("erudaCollapsed","false"),u&&setTimeout(()=>window.thoughtform.eruda?.show(u),50)}else{if(g)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",n.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=a);const r=h=>{h.type==="touchmove"&&h.preventDefault();const u=h.clientY||h.touches&&h.touches[0].clientY;if(Math.abs(u-s)>5&&(o=!0),!o)return;const g=window.innerHeight-u,m=42,w=window.innerHeight-100;t.style.height=`${Math.max(m,Math.min(g,w))}px`,n.textContent="▼"},c=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",r),document.removeEventListener("touchmove",r),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):a(null,null)},l=h=>{s=h.clientY||h.touches&&h.touches[0].clientY,o=!1,h.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",r),document.addEventListener("touchmove",r,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c))};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",n.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",n.textContent="▼"),d.disconnect())});d.observe(i,{childList:!0})}async function he(i,e){const t=i.pfs;let n=[];try{const s=await t.readdir(e);for(const o of s){const a=`${e==="/"?"":e}/${o}`;try{(await t.stat(a)).isDirectory()?n=n.concat(await he(i,a)):n.push(a)}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return n}async function ue(i,e){try{if((await i.stat(e)).isDirectory()){const n=await i.readdir(e);for(const s of n)await ue(i,`${e}/${s}`);await i.rmdir(e)}else await i.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async function xt(i,e){e("Starting export...");const t=new W;if(!i||i.length===0)throw new Error("No gardens were selected for export.");for(const r of i){e(`Processing garden: "${r}"...`);const c=t.folder(r),l=new P(r),d=await he(l,"/");for(const h of d){const u=await l.pfs.readFile(h),g=h.startsWith("/")?h.substring(1):h;c.file(g,u)}}e("Generating zip file...");const n=await t.generateAsync({type:"blob"}),o=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,a=document.createElement("a");a.href=URL.createObjectURL(n),a.download=o,document.body.appendChild(a),a.click(),document.body.removeChild(a),e(`Export process initiated: ${o}`)}async function Pt(i){const e=await W.loadAsync(i),t=new Set;return e.forEach(n=>{if(n.includes("/")){const s=n.split("/")[0];t.add(s)}}),Array.from(t).sort()}async function Lt(i,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${i.name}...`);const n=await W.loadAsync(i);t("Zip file loaded. Analyzing backup contents...");let s="merge";const o=[];for(const d of e){const h=new P(d);let u=!1;try{await h.pfs.stat("/.git"),u=!0}catch{}const g=Object.keys(n.files).some(m=>m.startsWith(`${d}/.git/`));u&&g&&o.push(d)}if(o.length>0){const d=`<ul>${o.map(u=>`<li><strong>${u}</strong></li>`).join("")}</ul>`,h=await b.choice({title:"Replace Garden History?",message:`<p>The backup contains a git history for the following existing garden(s):</p>
                ${d}
                <p>Replacing history is a destructive action. How should we proceed?</p>`,choices:[{id:"replace",text:"Replace History",class:"destructive"},{id:"merge",text:"Merge Files, Keep Local History"},{id:"cancel",text:"Cancel Import"}]});if(!h||h==="cancel"){t("Import cancelled by user.");return}s=h}if(s==="replace"){t("Strategy: Replacing history for conflicting gardens.");for(const d of o){t(`  Deleting existing .git directory for "${d}"...`);const h=new P(d);await ue(h.pfs,"/.git"),t(`  Done deleting for "${d}".`)}}else t("Strategy: Merging files and keeping local history where conflicts exist.");const a=new Map;t("Initializing target gardens...");for(const d of e){const h=new P(d);await h.initRepo(),a.set(d,h)}t("Initialization complete. Starting file writes...");const r=[];n.forEach((d,h)=>{if(h.dir)return;const u=d.split("/")[0];if(!e.includes(u)||d.substring(u.length+1).startsWith(".git/")&&s==="merge"&&o.includes(u))return;const m=`/${d.substring(u.length+1)}`,w=h.async("uint8array").then(async S=>{await a.get(u).writeFile(m,S)});r.push(w)});const c=r.length;let l=0;r.forEach(d=>d.then(()=>{l++,(l%100===0||l===c)&&t(`Writing files... (${l}/${c})`)})),await Promise.all(r),t("Import complete! Reloading page..."),setTimeout(()=>window.location.reload(),1500)}async function $t(i,e){if(!i||i.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];for(const s of i){e(`Deleting garden: "${s}"...`),n=n.filter(a=>a!==s);const o=`garden-fs-${s}`;await new Promise((a,r)=>{const c=indexedDB.deleteDatabase(o);c.onsuccess=()=>{e(`  Successfully deleted database: ${o}`),a()},c.onerror=l=>{e(`  Error deleting database: ${o}`),r(l.target.error)},c.onblocked=()=>{e(`  Deletion blocked for ${o}. Please refresh and try again.`),r(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(n)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const s=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(i.includes(s)||n.length===0){const o=new URL(import.meta.url).pathname,a=o.lastIndexOf("/src/"),r=a>-1?o.substring(0,a):"";window.location.href=`${window.location.origin}${r}/home`}else window.location.reload()},2e3)}class Tt{constructor(){const e=new URLSearchParams(window.location.search);this.isEnabled=e.has("debug"),console.log(`[DEBUG] Debug mode is ${this.isEnabled?"ENABLED":"DISABLED"}`)}log(...e){this.isEnabled&&console.log("[DEBUG]",...e)}error(...e){this.isEnabled&&console.error("[DEBUG]",...e)}warn(...e){this.isEnabled&&console.warn("[DEBUG]",...e)}}const p=new Tt;class It{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const n=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(n),this.signaling.ws.onopen=()=>{p.log(`Connected to signaling server at ${n}`),e()},this.signaling.ws.onclose=()=>{p.log("Disconnected from signaling server"),this.signaling.sync.connectionState!=="connected-p2p"&&this.signaling.sync.updateConnectionState("disconnected","Signaling server disconnected.")},this.signaling.ws.onerror=s=>{p.error("WebSocket error:",s),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${n}`))},this.signaling.ws.onmessage=s=>{try{const o=JSON.parse(s.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(o)}catch(o){p.error("Error parsing signaling message:",o)}}})}sendCreateSessionRequest(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN?t.send(JSON.stringify({type:"create_session",sessionId:e})):(p.error("Cannot send create session request, WebSocket is not open."),this.signaling.sync.updateConnectionState("error","Cannot create session, not connected."))}sendSignal(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN&&t.send(JSON.stringify({type:"signal",data:e}))}}class Ft{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"welcome":this.signaling.peerId=e.peerId,console.log(`[SYNC-COMMON] Received welcome. My Peer ID is: ${e.peerId}`);break;case"session_created":this.signaling.isNegotiating&&this.signaling.startSession(e.sessionId);break;case"host_changed":t.handleHostChange(e.newInitiatorPeerId);break;case"peer_joined":console.log(`[SYNC-COMMON] Server reports a peer joined: ${e.peerId}.`),t.updateConnectionState("connected-signal","Peer joined. Establishing P2P connection..."),t.isInitiator&&this.signaling._webrtcInitiator.createOfferAfterPeerJoined();break;case"signal":this.signaling.handleSignal(e.data);break;case"peer_left":e.peerId&&t.handlePeerLeft(e.peerId);break;case"error":this.signaling.isNegotiating&&e.message.includes("already exists")?this.signaling.attemptToJoinSession():t.updateConnectionState("error",`Signaling error: ${e.message}`);break;case"direct_sync_message":e.payload&&t&&t._handleIncomingSyncMessage(e.payload,"WS");break}}}class Mt{constructor(e){this.signaling=e}setupPeerConnection(){const e=this.signaling.sync;e.peerConnection&&(e.peerConnection.close(),e.peerConnection=null);try{e.peerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}]}),e.peerConnection.onconnectionstatechange=()=>{p.log("P2P Connection state:",e.peerConnection.connectionState),e.peerConnection.connectionState==="failed"&&e.updateConnectionState("connected-signal","P2P connection failed. Using fallback.")},e.dataChannel=e.peerConnection.createDataChannel("syncChannel"),e.dataChannel.onopen=()=>{e.updateConnectionState("connected-p2p","P2P connection established."),e.fileSync&&e.fileSync.setupDataChannel(e.dataChannel)},e.dataChannel.onclose=()=>{e.connectionState==="connected-p2p"&&e.updateConnectionState("connected-signal","P2P channel closed. Using fallback.")},e.dataChannel.onerror=t=>{p.error("Data channel error:",t),e.addMessage(`Data channel error: ${t.message}`),e.updateConnectionState("connected-signal","P2P channel error. Using fallback.")},e.peerConnection.onicecandidate=t=>{t.candidate&&this.signaling.sendSignal({type:"candidate",candidate:t.candidate})}}catch(t){p.error("Error setting up peer connection:",t),e.updateConnectionState("error",`Error: ${t.message}`)}}async startSession(e){const t=this.signaling.sync;t.isInitiator=!0,t.syncName=e,this.setupPeerConnection(),t.updateConnectionState("connected-signal","Waiting for peer to join...")}async createOfferAfterPeerJoined(){const e=this.signaling.sync;try{if(!e.peerConnection){p.error("Cannot create offer, peerConnection is not initialized.");return}const t=await e.peerConnection.createOffer();await e.peerConnection.setLocalDescription(t),this.signaling.sendSignal({type:"offer",sdp:t.sdp})}catch(t){p.error("Error creating offer:",t),e.updateConnectionState("error",`Error creating P2P offer: ${t.message}`)}}}class Nt{constructor(e){this.signaling=e}async joinSession(e){const t=this.signaling.sync;try{if(t.isInitiator=!1,t.syncName=e,this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN)console.log(`[SYNC-JOINER] Step 4: Sending 'join_session' message to server for session '${e}'.`),this.signaling.ws.send(JSON.stringify({type:"join_session",sessionId:e}));else{console.error("[SYNC-JOINER-ERROR] Cannot join session, WebSocket is not connected."),t.updateConnectionState("error","Error: WebSocket not connected.");return}t.peerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}]}),t.peerConnection.onconnectionstatechange=()=>{p.log("P2P Connection state:",t.peerConnection.connectionState),t.peerConnection.connectionState==="failed"&&t.updateConnectionState("connected-signal","P2P connection failed. Using fallback.")},t.peerConnection.ondatachannel=n=>{p.log("Data channel received"),t.dataChannel=n.channel,t.dataChannel.onopen=()=>{t.updateConnectionState("connected-p2p","P2P connection established."),t.fileSync&&t.fileSync.setupDataChannel(t.dataChannel)},t.dataChannel.onclose=()=>{t.connectionState==="connected-p2p"&&t.updateConnectionState("connected-signal","P2P channel closed. Using fallback.")},t.dataChannel.onerror=s=>{p.error("Data channel error:",s),t.addMessage(`Data channel error: ${s.message}`),t.updateConnectionState("connected-signal","P2P channel error. Using fallback.")}},t.peerConnection.onicecandidate=n=>{n.candidate&&this.signaling.sendSignal({type:"candidate",candidate:n.candidate})},t.updateConnectionState("connected-signal","Joining session, waiting for offer...")}catch(n){p.error("Error joining session:",n),t.updateConnectionState("error",`Error joining session: ${n.message}`)}}}class Dt{constructor(e){this.signaling=e}sendSyncMessage(e,t=null){const s=this.signaling.sync.dataChannel;if(s&&s.readyState==="open"){const o=JSON.stringify(e);console.log(`[SYNC-SEND ► P2P] Type: ${e.type}`,e),s.send(o)}else this.sendSyncMessageViaSignaling(e,t)}sendSyncMessageViaSignaling(e,t){const n=this.signaling.ws;if(n&&n.readyState===WebSocket.OPEN){const s={type:"direct_sync_message",payload:e};t?(s.targetPeerId=t,console.log(`[SYNC-SEND ► WS-TARGET] To: ${t.substring(0,8)}... Type: ${e.type}`,e)):console.log(`[SYNC-SEND ► WS-BROADCAST] Type: ${e.type}`,e),n.send(JSON.stringify(s))}else p.warn("Signaling WebSocket not open, could not send sync message.")}}class Rt{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this.targetPeerId=null,this.isNegotiating=!1,this.negotiationSyncName=null,this._webSocketManager=new It(this),this._signalingMessageHandler=new Ft(this),this._webrtcInitiator=new Mt(this),this._webrtcJoiner=new Nt(this),this._syncMessageRouter=new Dt(this)}updateSignalingServerUrl(e){this.signalingServerUrl=e,localStorage.setItem("thoughtform_signaling_server",e)}async negotiateSession(e){if(!this.isNegotiating){this.isNegotiating=!0,this.negotiationSyncName=e,this.sync.isInitiator=!1;try{await this.connectToSignalingServer(),console.log(`[SYNC-NEGOTIATE] Attempting to create session with persistent name: ${e}`),this._webSocketManager.sendCreateSessionRequest(e)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server."),this.isNegotiating=!1}}}attemptToJoinSession(){console.log(`[SYNC-JOINER] Step 2: Create failed, now attempting to join session: ${this.negotiationSyncName}`),this.joinSession(this.negotiationSyncName)}async startSession(e){return console.log("[SYNC-INITIATOR] Step 2: Session created on server. Initializing as initiator."),this.isNegotiating=!1,this._webrtcInitiator.startSession(e)}async joinSession(e){return console.log("[SYNC-JOINER] Step 3: Proceeding to join session as non-initiator."),this.isNegotiating=!1,this._webrtcJoiner.joinSession(e)}connectToSignalingServer(){return this._webSocketManager.connectToSignalingServer()}sendSignal(e){return this._webSocketManager.sendSignal(e)}sendSyncMessage(e,t=null){return this._syncMessageRouter.sendSyncMessage(e,t)}async handleSignal(e){const t=this.sync;try{if(!t.peerConnection){p.error("Received signal but peerConnection is not initialized.");return}if(e.type==="offer"){await t.peerConnection.setRemoteDescription(new RTCSessionDescription(e));const n=await t.peerConnection.createAnswer();await t.peerConnection.setLocalDescription(n),this.sendSignal({type:"answer",sdp:n.sdp})}else e.type==="answer"?await t.peerConnection.setRemoteDescription(new RTCSessionDescription(e)):e.type==="candidate"&&await t.peerConnection.addIceCandidate(new RTCIceCandidate(e.candidate))}catch(n){p.error("Error handling signal:",n),t.addMessage(`WebRTC error: ${n.message}`),this.sync.updateConnectionState("error",`WebRTC Error: ${n.message}`)}}destroy(){this.isNegotiating=!1,this.negotiationSyncName=null,this.ws&&(this.ws.close(),this.ws=null)}}class At{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const n=this._listeners[e];for(let s=0,o=n.length;s<o;s++)if(n[s]===t){n.splice(s,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class Ot{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return p.log(`DEBUG: Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return p.log(`DEBUG: Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return p.log("DEBUG: Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return p.log("DEBUG: Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return p.log("DEBUG: _getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class _t{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),p.log("DEBUG: SyncFiles confirmed data channel is open.")},t.onmessage=async n=>{try{const s=JSON.parse(n.data);await e.sync._handleIncomingSyncMessage(s,"P2P")}catch(s){console.error("Error parsing sync message from DataChannel:",s,"Raw data:",n.data)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),p.log("DEBUG: SyncFiles confirmed data channel is closed.")},t.onerror=n=>{const s=n.error;s&&s.name==="OperationError"&&s.message.includes("User-Initiated Abort")?p.log("Data channel closed intentionally by a peer.",n):(console.error("Data channel error:",n),e.sync.addMessage("Data channel error: "+(s?s.message:"Unknown error")))}}}class ge{static async _listAllFiles(e,t){const n=e.pfs;if(!n)throw new Error("gitClient does not have pfs property");let s=[];try{const o=await n.readdir(t);for(const a of o){if(a===".git")continue;const r=t==="/"?`/${a}`:`${t}/${a}`;try{(await n.stat(r)).isDirectory()?s=s.concat(await this._listAllFiles(e,r)):s.push(r)}catch(c){p.warn(`Could not stat ${r}, skipping.`,c)}}}catch(o){p.log(`Directory not readable: ${t}`,o)}return s}static async handleFileUpdate(e,t){e.incrementPendingWrites();try{if(!t.gardenName)throw new Error("Received file update without a gardenName during a full sync.");const n=new P(t.gardenName);if(t.isFullSync){e.deletedGitDirs.has(t.gardenName)||(e.deletedGitDirs.add(t.gardenName),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing to receive garden: ${t.gardenName}...`,type:"info"}})),await n.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Replacing git history for ${t.gardenName}...`,type:"info"}})),await n.rmrf("/.git")),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Writing: ${t.path.substring(1)} (${t.gardenName})`,type:"info"}}));const s=Buffer.from(t.content,"base64");await n.writeFile(t.path,s)}else{const s=t.isBase64?Buffer.from(t.content,"base64"):t.content;await n.writeFile(t.path,s),e.sync.addMessage(`Updated file: ${t.path} in garden ${t.gardenName}`)}}catch(n){console.error("Error handling file update for path:",t.path,n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${n.message}`,type:"error"}}))}finally{e.decrementPendingWrites()}}}class Ut{static async handleSyncMessage(e,t){switch(t.type){case"file_update":await ge.handleFileUpdate(e,t);break;case"request_gardens":await this.handleRequestGardens(e,t.gardens);break;case"full_sync_complete":e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"File stream complete. Waiting for writes to finish...",type:"info"}})),e.markSyncStreamAsComplete();break;default:p.log("Unknown sync message type:",t.type)}}static async handleRequestGardens(e,t=[]){if(!(!t||t.length===0)){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received request for gardens: ${t.join(", ")}.`,type:"info"}}));try{for(const n of t){const s=new P(n),o=await s.listAllFilesForClone("/");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${o.length} files in ${n}. Starting stream...`,type:"info"}}));const a=200;let r=0;for(let c=0;c<o.length;c+=a){const l=o.slice(c,c+a),d=await Promise.all(l.map(h=>s.readFileAsBuffer(h).then(u=>({file:h,content:u}))));for(const{file:h,content:u}of d)u&&e.sync.sendSyncMessage({type:"file_update",gardenName:n,path:h,content:Buffer.from(u).toString("base64"),isBase64:!0,isFullSync:!0});r+=l.length,e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sent ${r} of ${o.length} files for ${n}...`,type:"info"}}))}}e.sync.sendSyncMessage({type:"full_sync_complete"}),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All file data sent.",type:"info"}}))}catch(n){console.error("Error handling garden request:",n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error handling garden request: ${n.message}`,type:"error"}}))}}}}class Q{static async syncAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Starting to send all files...",type:"info"}}));const t=e._getGitClient();if(!t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Error: Git client not available.",type:"error"}}));return}try{if(!await b.confirm({title:"Send All Files",message:"This will send your working files to the peer. It will NOT send your git history. Are you sure?",okText:"Send Files"})){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Send all files cancelled.",type:"cancelled"}}));return}const s=await e.getAllFiles(t);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${s.length} content files to sync.`,type:"info"}}));for(const o of s){const a=await t.readFile(o);let r=0;try{r=JSON.parse(a).lastupdated||0}catch{}e.sync.sendSyncMessage({type:"file_update",path:o,content:a,timestamp:r,isFullSync:!1})}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sync completed. Sent ${s.length} files.`,type:"complete"}}))}catch(n){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error syncing all files: ${n.message}`,type:"error"}}))}}static requestSpecificGardens(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting selected gardens from peers...",type:"info"}})),Object.entries(t).forEach(([n,s])=>{const o=n.substring(0,8);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending request to peer ${o}... for gardens: ${s.join(", ")}`,type:"info"}})),e.sync.sendSyncMessage({type:"request_gardens",gardens:s},n)}),e.sync.addMessage(`Sent requests for ${Object.keys(t).length} peer(s).`)}static sendFileUpdate(e,t,n,s){e.sync.sendSyncMessage({type:"file_update",path:t,content:n,timestamp:s})}}class Bt extends At{constructor(e){super(),this.sync=e,this.gitClient=null,this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs=new Set}resetFullSyncState(){this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs.clear()}_getGitClient(){return Ot.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){_t.setupDataChannel(this,e)}async handleSyncMessage(e){await Ut.handleSyncMessage(this,e)}async syncAllFiles(){this.resetFullSyncState(),await Q.syncAllFiles(this)}requestSpecificGardens(e){this.resetFullSyncState(),Q.requestSpecificGardens(this,e)}incrementPendingWrites(){this.pendingWriteCount++}decrementPendingWrites(){this.pendingWriteCount--,this.checkForReload()}markSyncStreamAsComplete(){this.isSyncCompleteMessageReceived=!0,this.checkForReload()}checkForReload(){this.isSyncCompleteMessageReceived&&this.pendingWriteCount===0&&(this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All files received and written. Reloading...",type:"complete"}})),setTimeout(()=>window.location.reload(),1500))}destroy(){super.destroy()}async getAllFiles(e){return ge._listAllFiles(e,"/")}}class qt{constructor(e){this.sync=e,this.syncMethodIndicatorEl=null,this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressActionButton=null,this.connectBtn=null,this.nameInput=null,this.autoConnectCheckbox=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                    <!-- THIS IS THE FIX: Added the missing peer count element -->
                    <strong>Peers:</strong> <span id="sync-peer-count">0</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="sync-all-files-btn" class="eruda-button">Send All Files</button>
                <button id="request-all-files-btn" class="eruda-button">Request from Peer...</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"),this.connectBtn=this.sync._container.querySelector("#sync-connect-btn"),this.nameInput=this.sync._container.querySelector("#sync-name-input"),this.autoConnectCheckbox=this.sync._container.querySelector("#sync-autoconnect-checkbox"))}bindEvents(){if(!this.sync._container){p.error("SyncUI.bindEvents: Container not set");return}this.nameInput.value=localStorage.getItem("thoughtform_sync_name")||"",this.autoConnectCheckbox.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",this.connectBtn.addEventListener("click",()=>{const s=this.sync.connectionState;if(s==="disconnected"||s==="error"){const o=this.nameInput.value.trim(),a=this.autoConnectCheckbox.checked;if(!o){this.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",o),localStorage.setItem("thoughtform_sync_auto_connect",a),this.sync.connect(o)}else this.sync.disconnect()});const e=this.sync._container.querySelector("#save-signaling-config");e&&e.addEventListener("click",()=>{const s=this.sync._container.querySelector("#signaling-server-url"),o=s?s.value.trim():"";o?(this.sync.signaling.updateSignalingServerUrl(o),this.addMessage(`Signaling server updated to: ${o}`)):this.addMessage("Please enter a valid signaling server URL.")});const t=this.sync._container.querySelector("#sync-all-files-btn"),n=this.sync._container.querySelector("#request-all-files-btn");t&&t.addEventListener("click",async()=>{this.showSyncProgressModal(),await this.sync.fileSync.syncAllFiles()}),n&&n.addEventListener("click",async()=>{const s=await b.selection({title:"Request Gardens from Peers",peerData:this.sync.connectedPeers});s?(p.log("User made selection:",s),this.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens(s)):p.log("Garden request cancelled by user.")})}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e);const n=this.sync._container.querySelector("#sync-peer-count");n&&(n.textContent=this.sync.connectedPeers.size)}updateControls(e){const t=e==="disconnected"||e==="error",n=e==="connecting";this.connectBtn&&(this.connectBtn.disabled=n,t?this.connectBtn.textContent="Connect":n?this.connectBtn.textContent="Connecting...":this.connectBtn.textContent="Disconnect"),this.nameInput&&(this.nameInput.disabled=!t),this.autoConnectCheckbox&&(this.autoConnectCheckbox.disabled=!t);const s=e==="connected-p2p"||e==="connected-signal";this.sync._container.querySelectorAll(".sync-actions button").forEach(o=>o.disabled=!s)}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let n="None",s="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),n="Connecting...",s="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),n="WebSocket (Fallback)",s="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),n="WebRTC (P2P)",s="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),n="Error",s="var(--base-accent-destructive)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=n,this.syncMethodIndicatorEl.style.color=s)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const n=document.createElement("div");n.textContent=e,t.appendChild(n),t.scrollTop=t.scrollHeight}}showMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="block")}hideMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="none")}showSyncProgressModal(){this.syncProgressModal&&this.syncProgressModal.destroy(),this.syncProgressModal=new b({title:"File Sync Progress"}),this.syncProgressModal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.syncProgressLogArea=this.syncProgressModal.content.querySelector("#sync-progress-log"),this.syncProgressFinalMessageArea=this.syncProgressModal.content.querySelector("#sync-progress-final-message"),this.syncProgressActionButton=null,this.syncProgressModal.show()}updateSyncProgress(e){if(!this.syncProgressModal||!this.syncProgressLogArea)return;const{message:t="No message",type:n="info"}=e.detail,s=document.createElement("div"),o=new Date().toLocaleTimeString();switch(s.textContent=`[${o}] ${t}`,s.style.marginBottom="5px",n){case"error":s.style.color="var(--base-accent-destructive)";break;case"complete":s.style.color="var(--base-accent-action)";break;case"cancelled":s.style.color="var(--base-accent-warning)";break;default:s.style.color="var(--color-text-primary)";break}this.syncProgressLogArea.appendChild(s),this.syncProgressLogArea.scrollTop=this.syncProgressLogArea.scrollHeight,["complete","error","cancelled"].includes(n)&&(this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.textContent=t,this.syncProgressFinalMessageArea.style.color=s.style.color),this.syncProgressActionButton&&this.syncProgressActionButton.remove(),(n==="error"||n==="cancelled")&&(this.syncProgressActionButton=this.syncProgressModal.addFooterButton("Close",()=>this.hideSyncProgressModal()),n==="error"&&this.syncProgressActionButton.classList.add("destructive")))}hideSyncProgressModal(){this.syncProgressModal&&(this.syncProgressModal.destroy(),this.syncProgressModal=null)}}class Gt{constructor(){this.name="sync",this._container=null,this.peerConnection=null,this.dataChannel=null,this.isInitiator=!1,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.connectedPeers=new Map,this.signaling=new Rt(this),this.fileSync=new Bt(this),this.ui=new qt(this)}init(e){this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&this.fileSync.addEventListener("syncProgress",this.ui.updateSyncProgress.bind(this.ui));const t=localStorage.getItem("thoughtform_sync_auto_connect")==="true",n=localStorage.getItem("thoughtform_sync_name");t&&n&&this.connect(n)}async connect(e){this.connectionState!=="disconnected"&&this.connectionState!=="error"||(this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.negotiateSession(this.syncName))}disconnect(){this.signaling.destroy(),this.peerConnection&&this.peerConnection.close(),this.isConnected=!1,this.isInitiator=!1,this.syncName=null,this.connectedPeers.clear(),this.updateConnectionState("disconnected","Disconnected")}updateConnectionState(e,t){if(this.connectionState===e)return;const n=this.connectionState;this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal";const s=n==="connected-p2p"||n==="connected-signal";this.isConnected&&!s&&this._announcePresence(),this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e))}_handleIncomingSyncMessage(e,t){switch(console.log(`[SYNC-RECV ◄ ${t}] Type: ${e.type}`,e),e.type){case"peer_introduction":this.handlePeerIntroduction(e);break;default:this.fileSync&&this.fileSync.handleSyncMessage(e);break}}_announcePresence(){setTimeout(()=>{if(!this.signaling.peerId){console.error("[SYNC-ERROR] Cannot announce presence, peerId is not known.");return}const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"];this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,gardens:t})},1e3)}handlePeerIntroduction(e){if(!e.peerId||e.peerId===this.signaling.peerId)return;const t=!this.connectedPeers.has(e.peerId);if(this.connectedPeers.set(e.peerId,{gardens:e.gardens}),t){this.addMessage(`Peer ${e.peerId.substring(0,8)}... connected.`);const n=localStorage.getItem("thoughtform_gardens"),s=n?JSON.parse(n):["home"];this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,gardens:s},e.peerId)}this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} peer${this.connectedPeers.size===1?"":"s"})`)}handlePeerLeft(e){this.connectedPeers.has(e)&&(this.connectedPeers.delete(e),this.addMessage(`Peer ${e.substring(0,8)}... disconnected.`),this.ui&&this.ui.updateStatus(`Peer disconnected. (${this.connectedPeers.size} total)`))}handleHostChange(e){this.addMessage(`Network host changed. New host: ${e.substring(0,8)}...`),this.peerConnection&&this.peerConnection.close(),this.signaling.peerId===e?(this.isInitiator=!0,this.signaling._webrtcInitiator.setupPeerConnection(),this.updateConnectionState("connected-signal","Waiting for peers to rejoin...")):(this.isInitiator=!1,this.signaling._webrtcJoiner.joinSession(this.syncName))}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui&&this.ui.addMessage(e)}sendSyncMessage(e,t=null){this.signaling.sendSyncMessage(e,t)}show(){this._container&&(this._container.style.display="block")}hide(){this._container&&(this._container.style.display="none")}destroy(){this.disconnect(),this.fileSync&&this.fileSync.destroy()}}function B(i,e,t=!0){const n=e.map(s=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${s}" ${t?"checked":""}>
      <span>${s}</span>
    </label>
  `).join("");return`
    <div>
      <p>${i}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${n}
      </div>
    </div>
  `}function Ht(){const i=document.getElementById("eruda-container");if(!i)return;I.init({container:i,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1});const e=I.get("console");return e&&e.config.set("maxLogNum",2e3),window.thoughtform&&(window.thoughtform.eruda=I),setTimeout(()=>{const t=i.querySelector(".luna-tab-item")?.parentElement;t&&t.addEventListener("click",n=>{const s=n.target.closest(".luna-tab-item");if(s){const o=s.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,o)}})},500),setTimeout(()=>{const t=i.querySelector(".eruda-elements");if(!t)return;let n=!1;new MutationObserver(()=>{const o=t.style.display!=="none";if(o&&!n){const a=document.querySelector(".eruda-control > .eruda-icon-select");a&&(a.click(),a.click())}n=o}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),I.add({name:"Data",init(t){this._$el=t,t.html(`
        <div>
          <h2>Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">

          <hr>

          <h2>Danger Zone</h2>
          <p>
            <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
          </p>
        </div>
      `);const n=t.find("#export-btn")[0],s=t.find("#import-btn")[0],o=t.find("#import-file-input")[0],a=t.find("#clear-data-btn")[0];n.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),c=r?JSON.parse(r):["home"],l=new b({title:"Select Gardens to Export"});l.updateContent(B("Choose which gardens to include in the export:",c));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(S=>S.value);l.destroy();const g=new b({title:"Exporting Gardens..."});g.updateContent("<p>Preparing export. Please wait...</p>");let m=!1,w="";g.addFooterButton("Cancel",()=>{m=!0,g.destroy(),console.log("Export cancelled by user.")}),g.show();try{await xt(u,S=>{if(m)throw new Error("Export cancelled by user.");console.log(S),w+=S+"<br>",g.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${w}</div>`)}),m||(g.clearFooter(),g.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>g.destroy(),3e3))}catch(S){m||(console.error("Export failed:",S.message),g.clearFooter(),g.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${S.message}</p>`),g.addFooterButton("Close",()=>g.destroy()))}};l.addFooterButton("Export Selected",h),l.addFooterButton("Cancel",()=>l.destroy()),l.show()}),s.addEventListener("click",()=>o.click()),o.addEventListener("change",async()=>{const r=o.files[0];if(!r)return;const c=new b({title:"Select Gardens to Import"});c.updateContent("Scanning zip file..."),c.show();try{const l=await Pt(r);if(l.length===0){c.updateContent("No valid gardens found in this zip file."),c.addFooterButton("Close",()=>c.destroy());return}c.updateContent(B(`Found ${l.length} garden(s). Select which to import:`,l));const d=c.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(m=>m.value);c.clearFooter(),c.updateContent("Starting import...");let g="";try{await Lt(r,u,m=>{g+=`${m}<br>`,c.updateContent(g)})}catch(m){console.error("Import failed:",m),c.updateContent(`<strong>Error during import:</strong><br>${m.message}`),c.addFooterButton("Close",()=>c.destroy())}};c.addFooterButton("Import Selected",h),c.addFooterButton("Cancel",()=>c.destroy())}catch(l){console.error("Failed to read zip file:",l),c.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${l.message}`),c.addFooterButton("Close",()=>c.destroy())}finally{o.value=""}}),a.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),c=r?JSON.parse(r):[],l=new b({title:"Clear Garden Data"});l.updateContent(B("Select gardens to permanently delete:",c,!1));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!1);const h=async()=>{const g=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(w=>w.value);l.clearFooter(),l.updateContent("Starting deletion...");let m="";try{await $t(g,w=>{m+=`${w}<br>`,l.updateContent(m)})}catch(w){console.error("Deletion failed:",w),l.updateContent(`<strong>Error during deletion:</strong><br>${w.message}`),l.addFooterButton("Close",()=>l.destroy()).classList.add("destructive")}};l.addFooterButton("Delete Selected",h).classList.add("destructive"),l.addFooterButton("Cancel",()=>l.destroy()),l.show()})},show(){this._$el.show()},hide(){this._$el.hide()}}),I.add({name:"Sync",init(t){this.sync=new Gt,this.sync.init(t.get(0))},show(){this.sync.show()},hide(){this.sync.hide()},destroy(){this.sync.destroy()}}),I}class Wt{constructor({gitClient:e,editor:t}){if(!e||!t)throw new Error("CommandPalette requires a gitClient and editor instance.");this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="search",this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],n=[];await Promise.all(t.map(async s=>{const o=new P(s),a=await this.editor.sidebar.listFiles(o,"/");for(const r of a)n.push({garden:s,path:r,searchString:`${s} ${r.substring(1)}`.toLowerCase()})})),this.crossGardenFileCache=n}async open(e="search"){if(!this.isOpen){if(this.isOpen=!0,this.mode=e,this.mode==="execute"?(this.titleElement.textContent="Executing a File...",this.input.placeholder="Find a .js file to execute..."):(this.titleElement.textContent="Searching Files...",this.input.placeholder="Find file across all gardens..."),this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const t=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=t,this.input.disabled=!1,this.input.focus()}this.search("")}}close(){this.isOpen&&(this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown))}search(e){this.query=e.toLowerCase();let t=this.crossGardenFileCache;this.mode==="execute"&&(t=this.crossGardenFileCache.filter(n=>n.garden===this.gitClient.gardenName&&n.path.endsWith(".js"))),this.query?this.results=t.filter(n=>{let s=0,o=0;for(;s<this.query.length&&o<n.searchString.length;)this.query[s]===n.searchString[o]&&s++,o++;return s===this.query.length}).sort((n,s)=>{const o=n.garden===this.gitClient.gardenName,a=s.garden===this.gitClient.gardenName;return o&&!a?-1:!o&&a?1:0}):this.results=(this.mode==="execute"?t:t.filter(n=>n.garden===this.gitClient.gardenName)).slice(0,100),this.selectedIndex=0,this.renderResults()}renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="command-no-results">No matches found</li>';return}this.results.forEach((e,t)=>{const n=document.createElement("li");n.className="command-result-item",n.dataset.index=t;const s=e.path.startsWith("/")?e.path.substring(1):e.path;e.garden!==this.gitClient.gardenName?n.innerHTML=`<span class="command-path">${s}</span> <span class="command-garden">${e.garden}</span>`:n.textContent=s,t===this.selectedIndex&&(n.classList.add("active"),n.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(n)})}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(this.mode==="execute"){console.log(`Executing: ${t.path}`),this.close();try{const n=await this.gitClient.readFile(t.path),o=new Function(n)();console.log(`Execution successful for ${t.path}. Result:`,o)}catch(n){console.error(`Execution failed for ${t.path}:`,n),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}else{if(t.garden!==this.gitClient.gardenName){const n=new URL(import.meta.url).pathname,s=n.lastIndexOf("/src/"),o=s>-1?n.substring(0,s):"";window.location.href=`${window.location.origin}${o}/${encodeURIComponent(t.garden)}#${encodeURIComponent(t.path)}`}else window.location.hash=`#${encodeURIComponent(t.path)}`;this.close()}}handleInput(e){this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".command-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}async function me(i,e){const t=i.pfs;let n=[];try{const s=await t.readdir(e);for(const o of s){if(o===".git")continue;const a=`${e==="/"?"":e}/${o}`;try{(await t.stat(a)).isDirectory()?n=n.concat(await me(i,a)):n.push(a)}catch{console.warn(`[Migration] Could not stat ${a}, skipping.`)}}}catch{console.warn(`[Migration] Could not read directory: ${e}.`)}return n}async function jt(){console.log("%cStarting Thoughtform data migration...","font-weight: bold; font-size: 1.2em;"),console.log("This will convert all files from the old JSON format to raw content. This only needs to be run once.");const i=localStorage.getItem("thoughtform_gardens"),e=i?JSON.parse(i):["home"];if(e.length===0){console.log("No gardens found to migrate.");return}let t=0,n=0;for(const s of e){console.log(`%cProcessing garden: "${s}"`,"font-weight: bold; color: blue;");const o=new P(s),a=await me(o,"/");if(a.length===0){console.log("No files found in this garden.");continue}for(const r of a){t++;try{const c=await o.readFile(r);let l;try{l=JSON.parse(c)}catch{console.log(`- ${r} is not in JSON format, skipping.`);continue}if(l&&typeof l.content<"u"){const d=l.content;c!==d?(console.log(`%c  MIGRATING: ${r}`,"color: green;"),await o.writeFile(r,d),n++):console.log(`- ${r} content is already raw, skipping.`)}else console.log(`- ${r} is valid JSON but not the old format, skipping.`)}catch(c){console.error(`%c  ERROR: Failed to process ${r}.`,"color: red;",c)}}}console.log("%cMigration complete!","font-weight: bold; font-size: 1.2em;"),console.log(`Checked ${t} files across ${e.length} garden(s).`),console.log(`Migrated ${n} files.`),console.log("You should now refresh the page.")}window.Buffer=we.Buffer;window.process={env:{}};window.thoughtform={ui:{}};const fe=new URL(import.meta.url).pathname,ee=fe.lastIndexOf("/src/"),H=ee>-1?fe.substring(0,ee):"";let F=window.location.pathname.startsWith(H)?window.location.pathname.substring(H.length):window.location.pathname;F=F.replace(/^\/|\/$/g,"")||"home";F=decodeURIComponent(F);console.log(`Base Path: "${H}"`);console.log(`Loading garden: "${F}"`);const pe=new P(F);St();Ht();window.thoughtform.runMigration=jt;window.onerror=function(i,e,t,n,s){return console.error("Caught global error:",i,s),window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1};window.onunhandledrejection=function(i){console.error("Caught unhandled promise rejection:",i.reason),window.thoughtform.ui.toggleDevtools?.(!0,"console")};const te=new D({target:"main",gitClient:pe}),zt=setInterval(()=>{if(te.isReady){clearInterval(zt);const i=new Wt({gitClient:pe,editor:te});window.thoughtform.commandPalette=i,window.addEventListener("keydown",e=>{const t=document.activeElement;if(!(t&&(t.tagName==="INPUT"||t.tagName==="TEXTAREA")&&!t.classList.contains("cm-content")||!(navigator.platform.toUpperCase().indexOf("MAC")>=0?e.metaKey:e.ctrlKey)))switch(e.key.toLowerCase()){case"p":e.preventDefault(),e.stopPropagation(),e.shiftKey?i.open("execute"):i.open("search");break;case"[":e.preventDefault(),e.stopPropagation(),window.thoughtform.ui.toggleSidebar?.();break;case"`":e.preventDefault(),e.stopPropagation(),window.thoughtform.ui.toggleDevtools?.(null,null);break}},{capture:!0})}},100);
