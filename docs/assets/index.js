import{Q as ke,e as f,R as q,U as le,V as R,W as xe}from"./chunk-vendor.js";import{E as A,H as $e,s as de,D as $,V as L,R as T,S as he,k as M,a as j,W as Pe,b as Le,c as Te,m as Fe,L as B,j as ue,h as ge,d as me,y as Me,x as Ie,e as Ne,f as Ae,C as z,A as Re,g as De,v as _e,l as Oe,i as qe,n as Be,o as Ge,p as Ue,q as He,r as We,t as je,u as ze,w as Je,z as Ke,B as Ve,F as Ye,G as Xe,I as Ze,J as Qe,K as et,M as tt,N as nt,O as st,P as it,Q as ot,T as rt,U as at}from"./chunk-codemirror.js";import{F as ct,g as k,i as V}from"./chunk-git.js";import{c as lt}from"./chunk-gpt-tokenizer.js";import{e as F}from"./chunk-eruda.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();var fe=!1;try{var G={};Object.defineProperty(G,"passive",{get(){return fe=!0,!1}}),window.addEventListener("testpassive",null,G),window.removeEventListener("testpassive",null,G)}catch{}if(fe){var dt=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(o,e,t){var n=t&&typeof t=="object",s=n?t.capture:t,i=n?Object.assign({},t):{};return i.passive===void 0&&(o==="touchstart"||o==="touchmove"||o==="wheel")&&(i.passive=!0),i.capture===void 0&&(i.capture=!!s),dt.call(this,o,e,i)}}class Y{constructor({targetSelector:e,items:t,containerItems:n=[],itemSelector:s,dataAttribute:i}){if(this.targetSelector=e,this.items=t,this.containerItems=n,this.itemSelector=s,i){const r=i.replace("data-","");this.dataAttributeKey=r.replace(/-([a-z])/g,a=>a[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null;n?this.showMenu(e.clientX,e.clientY,this.items,n):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null,s=n?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,s,n||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,n,s){this.menuElement.innerHTML="",this.menuElement.style.display="block";const i=this.dataAttributeKey&&s.dataset[this.dataAttributeKey]?s.dataset[this.dataAttributeKey]:null;n.forEach(u=>{if(u.type==="separator"){const m=document.createElement("div");m.className="context-menu-separator",this.menuElement.appendChild(m);return}const g=document.createElement("button");g.className="context-menu-item",g.textContent=u.label,g.addEventListener("click",()=>{u.action(i),this.hideMenu()}),this.menuElement.appendChild(g)});const r=this.menuElement.offsetWidth,a=this.menuElement.offsetHeight,{innerWidth:c,innerHeight:l}=window;let d=e,h=t;e+r>c&&(d=c-r-5),t+a>l&&(h=l-a-5),this.menuElement.style.top=`${h}px`,this.menuElement.style.left=`${d}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class S{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const n=document.createElement("button");return n.textContent=e,n.addEventListener("click",t),this.footer.appendChild(n),n}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:n=""}){return new Promise(s=>{const i=new S({title:e}),r=`modal-input-${Date.now()}`,a=`
        <div class="modal-prompt">
          <label for="${r}">${t}</label>
          <input type="text" id="${r}" value="${n}">
        </div>
      `;i.updateContent(a);const c=i.content.querySelector(`#${r}`),l=()=>{s(c.value),i.destroy()},d=()=>{s(null),i.destroy()};c.addEventListener("keydown",h=>{h.key==="Enter"?(h.preventDefault(),l()):h.key==="Escape"&&d()}),i.addFooterButton("OK",l),i.addFooterButton("Cancel",d),i.show(),c.focus(),c.select()})}static confirm({title:e,message:t,okText:n="OK",cancelText:s="Cancel",destructive:i=!1}){return new Promise(r=>{const a=new S({title:e});a.updateContent(`<p>${t}</p>`);const c=()=>{r(!0),a.destroy()},l=()=>{r(!1),a.destroy()},d=a.addFooterButton(n,c);i&&d.classList.add("destructive"),a.addFooterButton(s,l),a.show()})}static choice({title:e,message:t,choices:n}){return new Promise(s=>{const i=new S({title:e});i.updateContent(t),n.forEach(a=>{const c=i.addFooterButton(a.text,()=>{s(a.id),i.destroy()});a.class&&c.classList.add(a.class)});const r=a=>{a.key==="Escape"&&(s(null),i.destroy(),document.removeEventListener("keydown",r))};document.addEventListener("keydown",r),i.show()})}static selection({title:e,peerData:t,okText:n="Request"}){return new Promise(s=>{if(t.size===0){const l=new S({title:"No Peers Found"});l.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),l.addFooterButton("OK",()=>{l.destroy(),s(null)}),l.show();return}const i=new S({title:e});let r='<div class="peer-selection-container">';t.forEach((l,d)=>{const h=d.substring(0,8);r+=`
          <div class="peer-group" data-peer-id="${d}">
            <strong class="peer-title">Peer: ${h}...</strong>
            <div class="garden-checkbox-list">
              ${l.gardens.map(u=>`
                <label>
                  <input type="checkbox" class="garden-select-checkbox" value="${u}">
                  <span>${u}</span>
                </label>
              `).join("")}
            </div>
          </div>
        `}),r+="</div>",i.updateContent(r);const a=()=>{const l={};i.content.querySelectorAll(".peer-group").forEach(d=>{const h=d.dataset.peerId,u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);u.length>0&&(l[h]=u)}),s(Object.keys(l).length>0?l:null),i.destroy()},c=()=>{s(null),i.destroy()};i.addFooterButton(n,a),i.addFooterButton("Cancel",c),i.show()})}}const ht={async renderFiles(o){try{const e=await this.listFiles(this.gitClient,"/"),t=new Map;for(const[i,r,a]of o)r!==a&&t.set(`/${i}`,"modified");const n=decodeURIComponent(window.location.hash.substring(1)),s=e.sort().map(i=>{const r=`#${i}`,a=t.get(i)||"unmodified",c=i.startsWith("/")?i.substring(1):i,l=[`status-${a}`];return i===n&&l.push("active"),`<li><a href="${r}" class="${l.join(" ")}" data-filepath="${i}">${c}</a></li>`}).join("");this.contentContainer.innerHTML=`<ul>${s}</ul>`}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleNewFile(){const o=await S.prompt({title:"New File",label:"Enter new file name:"});if(!o)return;const e=`/${o}`;try{await this.gitClient.pfs.stat(e),await this.showAlert({title:"File Exists",message:`File "${o}" already exists.`})}catch(t){t.code==="ENOENT"?(await this.gitClient.writeFile(e,""),window.location.hash=`#${e}`):(console.error("Error checking for file:",t),await this.showAlert({title:"Error",message:"An error occurred while creating the file."}))}},async handleRename(o){const e=await S.prompt({title:"Rename File",label:`Enter new name for ${o.substring(1)}:`,defaultValue:o.substring(1)});if(!e||e===o.substring(1))return;const t=`/${e}`;try{const n=t.substring(0,t.lastIndexOf("/"));n&&await this.ensureDir(n),await this.gitClient.pfs.rename(o,t),decodeURIComponent(window.location.hash)===`#${o}`?window.location.hash=`#${t}`:await this.refresh()}catch(n){console.error("Error renaming file:",n),await this.showAlert({title:"Error",message:"Failed to rename file. Check console for details."})}},async handleDuplicate(o){const e=o.substring(0,o.lastIndexOf("/")),t=o.substring(o.lastIndexOf("/")+1),n=t.lastIndexOf("."),s=n>0;let i;if(s){const c=t.substring(0,n),l=t.substring(n);i=`${c} (copy)${l}`}else i=`${t} (copy)`;const r=await S.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:i});if(!r)return;const a=`${e}/${r}`;try{const c=await this.gitClient.readFile(o);await this.gitClient.writeFile(a,c),await this.refresh()}catch(c){console.error("Error duplicating file:",c),await this.showAlert({title:"Error",message:"Failed to duplicate file."})}},async handleDelete(o){if(await this.showConfirm({title:"Delete File",message:`Are you sure you want to permanently delete "${o}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=decodeURIComponent(window.location.hash)===`#${o}`;await this.gitClient.pfs.unlink(o),t?window.location.hash="#/home":await this.refresh()}catch(t){console.error("Error deleting file:",t),await this.showAlert({title:"Error",message:"Failed to delete file."})}}};class P{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new ct(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),this.registerNewGarden();return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await k.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/home",e,"utf8"),this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async rmrf(e){try{if((await this.pfs.stat(e)).isDirectory()){const n=await this.pfs.readdir(e);for(const s of n)await this.rmrf(`${e}/${s}`);await this.pfs.rmdir(e)}else await this.pfs.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async clearWorkdir(){const e=await this.pfs.readdir("/");for(const t of e)t!==".git"&&await this.rmrf(`/${t}`)}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{await this.pfs.stat(n)}catch(i){if(i.code==="ENOENT")try{await this.pfs.mkdir(n)}catch(r){if(r.code!=="EEXIST")throw r}else throw i}}}async listAllFilesForClone(e="/"){let t=[];const n=await this.pfs.readdir(e);for(const s of n){const i=`${e==="/"?"":e}/${s}`;(await this.pfs.stat(i)).isDirectory()?t=t.concat(await this.listAllFilesForClone(i)):t.push(i)}return t}async stage(e){const t=e.startsWith("/")?e.substring(1):e,s=(await this.getStatuses()).find(r=>r[0]===t);if(!s){console.error(`Could not find status for "${t}". Cannot stage.`);return}s[2]===0?await k.remove({fs:this.fs,dir:"/",filepath:t}):await k.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await k.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){const t=e.startsWith("/")?e.substring(1):e;try{const s=(await this.getStatuses()).find(r=>r[0]===t);if(!s)return;s[1]===0?await this.pfs.unlink(e):await k.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0})}catch(n){console.error(`[discard] An error occurred for ${e}:`,n)}}async commit(e){const t=await k.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async push(e,t,n){return await k.push({fs:this.fs,http:V,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t})})}async pull(e,t,n){return await k.pull({fs:this.fs,http:V,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t}),author:{name:"User",email:"user@thoughtform.garden"},singleBranch:!0,fastForward:!0})}async log(){try{return await k.log({fs:this.fs,dir:"/",depth:20})}catch{return[]}}async getChangedFiles(e){try{const{commit:t}=await k.readCommit({fs:this.fs,dir:"/",oid:e}),n=t.parent[0];if(!n)return(await k.listFiles({fs:this.fs,dir:"/",ref:e})).map(i=>`/${i}`);const s=[];return await k.walk({fs:this.fs,dir:"/",trees:[k.TREE({ref:n}),k.TREE({ref:e})],map:async(i,[r,a])=>{if(i===".")return;const c=r&&await r.oid(),l=a&&await a.oid();if(c===l)return;(a?await a.type():await r.type())==="blob"&&s.push(`/${i}`)}}),s}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const n=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const s=e==="HEAD"?await k.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:i}=await k.readBlob({fs:this.fs,dir:"/",oid:s,filepath:n});return new TextDecoder().decode(i)}catch(s){return s.name==="NotFoundError"?"":null}}async readFile(e){try{return await this.pfs.readFile(e,"utf8")}catch{return`// "${e}" does not exist yet, type anywhere to create it.`}}async readFileAsBuffer(e){try{return await this.pfs.readFile(e)}catch{return null}}async writeFile(e,t){const n=typeof t=="string"?"utf8":void 0;try{await this.pfs.writeFile(e,t,n),this.markGardenAsDirty(!0)}catch(s){if(s.code==="ENOENT"){const i=e.substring(0,e.lastIndexOf("/"));if(i&&i!=="/")try{await this.ensureDir(i),await this.pfs.writeFile(e,t,n),this.markGardenAsDirty(!0)}catch(r){throw r}else throw s}else throw s}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),n=t?JSON.parse(t):[],s=n.indexOf(this.gardenName);e&&s===-1?n.push(this.gardenName):!e&&s!==-1&&n.splice(s,1),localStorage.setItem("dirty_gardens",JSON.stringify(n))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return k.statusMatrix({fs:this.fs,dir:"/"})}}const ut={async renderGardens(){try{const o=localStorage.getItem("thoughtform_gardens"),e=o?JSON.parse(o):[],t=localStorage.getItem("dirty_gardens"),n=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let s="";for(const i of e.sort()){const r=decodeURIComponent(i),a=n.has(r),c=`/${encodeURIComponent(i)}`,l=this.gitClient.gardenName===r,d=[];l&&d.push("active"),a&&d.push("status-modified"),s+=`<li><a href="${c}" class="${d.join(" ")}" data-garden-name="${i}">${r}</a></li>`}this.contentContainer.innerHTML=`<ul>${s}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(i=>{i.addEventListener("click",r=>{this.gitClient.gardenName!==r.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(o){console.error("Error rendering garden list:",o),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const o=await S.prompt({title:"New Garden",label:"Enter new garden name:"});if(!o||!o.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(o)){await this.showAlert({title:"Garden Exists",message:`Garden "${o}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(o)}`},async handleDuplicateGarden(o){if(!o)return;const t=`${decodeURIComponent(o)} (copy)`,n=await S.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!n||!n.trim()||n===o)return;const s=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const i=new P(o),r=new P(n);await r.initRepo();const a=await this.listFiles(i,"/");let c=0;for(const l of a){c++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${c} of ${a.length}:<br>${l.substring(1)}</p>`;const d=await i.readFile(l);await r.writeFile(l,d)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(n)}`)},500)}catch(i){console.error("Error duplicating garden:",i),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=s}},100)},async handleDeleteGarden(o){if(!o)return;if(o==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${o}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];n=n.filter(i=>i!==o),localStorage.setItem("thoughtform_gardens",JSON.stringify(n));const s=`garden-fs-${o}`;await new Promise((i,r)=>{const a=indexedDB.deleteDatabase(s);a.onsuccess=()=>i(),a.onerror=c=>r(c.target.error),a.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),r(new Error("Deletion blocked"))}}),this.gitClient.gardenName===o?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},gt={async renderGitView(){try{const[o,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],n=[];for(const[h,u,g,m]of o){const y=`/${h}`;(u!==g||u!==m)&&(g===m?t.push({filepath:y,status:"staged"}):n.push({filepath:y,status:"unstaged"}))}const s=this.renderRemoteSection(),i=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,r=this.renderFileSection("Changes",n,!1),a=this.renderFileSection("Staged Changes",t,!0),c=this.renderHistorySection(e),l=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${s}
          ${i}
          ${a}
          ${r}
          ${c}
        </div>
      `;const d=this.contentContainer.querySelector("#git-commit-message");d&&(d.value=l),this.addGitViewListeners(),this.updateCommitButtonState()}catch(o){console.error("Error rendering Git view:",o),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderRemoteSection(){const o=this.getRemoteConfig();return`
      <div class="git-remote-section">
        <h3>Remote</h3>
        <input type="text" id="git-remote-url" placeholder="Remote URL" value="${o.url}">
        <input type="password" id="git-remote-auth" placeholder="Username or Token" value="${o.auth}">
        <div class="git-remote-actions">
          <button id="git-pull-button">Pull</button>
          <button id="git-push-button">Push</button>
        </div>
        <div class="git-remote-log" id="git-remote-log">Ready</div>
      </div>
    `},renderFileSection(o,e,t){const n=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let s="";return e.length>0?s=e.map(r=>{const a=r.filepath.startsWith("/")?r.filepath.substring(1):r.filepath;return`
          <li class="git-file-item ${this.editor.filePath===r.filepath?"active":""}" data-filepath="${r.filepath}">
            <span class="git-file-path">${a}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${n}
            </span>
          </li>
        `}).join(""):s=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${o} (${e.length})</h3>
        <ul class="git-file-list">
          ${s}
        </ul>
      </div>
    `},renderHistorySection(o){let e="";return o.length>0?e=o.map(t=>{const n=t.commit.message.split(`
`)[0],s=t.oid.substring(0,7),i=t.commit.author.name,r=new Date(t.commit.author.timestamp*1e3).toLocaleString(),a=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${a}" data-author="${i}" data-date="${r}">
                <div class="git-history-header">
                  <span class="git-history-message">${n}</span>
                  <span class="git-history-oid">${s}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const o=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!o||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,n=o.value.trim().length>0;e.disabled=!(t&&n)},getRemoteConfig(){const o=`thoughtform_remote_config_${this.gitClient.gardenName}`;try{const e=localStorage.getItem(o);if(e)return JSON.parse(e)}catch(e){console.error("Could not parse remote config from localStorage",e)}return{url:"",auth:""}},saveRemoteConfig(o,e){const t=`thoughtform_remote_config_${this.gitClient.gardenName}`,n={url:o,auth:e};localStorage.setItem(t,JSON.stringify(n))},addGitViewListeners(){const o=this.contentContainer.querySelector("#git-remote-url"),e=this.contentContainer.querySelector("#git-remote-auth"),t=this.contentContainer.querySelector("#git-push-button"),n=this.contentContainer.querySelector("#git-pull-button"),s=this.contentContainer.querySelector("#git-remote-log"),i=()=>{this.saveRemoteConfig(o.value,e.value)};o.addEventListener("input",i),e.addEventListener("input",i);const r=async d=>{const h=o.value.trim(),u=e.value.trim();if(!h){s.textContent="Error: Remote URL is required.";return}t.disabled=!0,n.disabled=!0;const g=d==="push"?"Pushing":"Pulling";s.textContent=`${g} to ${h}...`;try{const m=await this.gitClient[d](h,u,y=>{s.textContent=y});m.ok?s.textContent=`${g} complete.`:s.textContent=`Error: ${m.error||"Unknown error"}`,d==="pull"&&(await this.refresh(),await this.editor.forceReloadFile(this.editor.filePath))}catch(m){console.error(`${g} failed:`,m),s.textContent=`Error: ${m.message||"Check console for details."}`}finally{t.disabled=!1,n.disabled=!1}};t.addEventListener("click",()=>r("push")),n.addEventListener("click",()=>r("pull"));const a=this.contentContainer.querySelector("#git-commit-message");a&&!a.dataset.listenerAttached&&(a.dataset.listenerAttached="true",a.addEventListener("input",()=>this.updateCommitButtonState()));const c=this.contentContainer.querySelector(".git-view-container");c&&!c.dataset.listenerAttached&&(c.dataset.listenerAttached="true",c.addEventListener("click",async d=>{const h=d.target,u=h.closest(".git-file-item"),g=h.closest(".git-history-item");if(u){const m=u.dataset.filepath;h.matches(".git-file-path")?(this.editor.filePath!==m&&await this.editor.loadFile(m),this.editor.showDiff(await this.gitClient.readBlob(m))):h.matches(".git-action-button")&&(d.stopPropagation(),h.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${m}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(m),this.editor.filePath===m&&await this.editor.forceReloadFile(m),await this.refresh()):h.classList.contains("stage")?(await this.gitClient.stage(m),await this.renderGitView()):h.classList.contains("unstage")&&(await this.gitClient.unstage(m),await this.renderGitView()))}else if(g&&h.closest(".git-history-header")){const m=g.querySelector(".git-history-details");if(m.style.display!=="none")m.style.display="none";else if(m.style.display="block",!m.dataset.loaded){m.innerHTML='<span class="no-changes">Loading...</span>';const w=g.dataset.oid,p=await this.gitClient.getChangedFiles(w),C=g.dataset.author,v=g.dataset.date,E=p.map(x=>{const N=typeof x=="string"?x:x.path;return`<div class="history-file-path" data-path="${N}">${N.substring(1)}</div>`}).join("");m.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${C}</div>
                      <div><strong>Date:</strong> ${v}</div>
                    </div>
                    <div class="history-file-list">${E||'<span class="no-changes">No files changed.</span>'}</div>
                  `,m.dataset.loaded="true"}}else if(h.closest(".history-file-path")){c.querySelectorAll(".history-file-path.active").forEach(C=>C.classList.remove("active")),h.classList.add("active");const m=h.closest(".git-history-item"),y=h.dataset.path,w=m.dataset.oid,p=m.dataset.parentOid;await this.editor.previewHistoricalFile(y,w,p)}}));const l=this.contentContainer.querySelector("#git-commit-button");l&&!l.dataset.listenerAttached&&(l.dataset.listenerAttached="true",l.addEventListener("click",async()=>{const d=this.contentContainer.querySelector("#git-commit-message"),h=d.value.trim();if(h)try{l.disabled=!0,l.textContent="Committing...",await this.gitClient.commit(h),this.editor.hideDiff(),d.value="",await this.refresh()}catch(u){console.error("Commit failed:",u),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),l.textContent="Commit"}}))}};class mt{constructor({target:e,gitClient:t,editor:n}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!n)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=n,this.targetSelector=e;const s=document.querySelector(this.targetSelector);if(!s){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=s,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,ht),Object.assign(this,ut),Object.assign(this,gt)}async init(){this.renderTabs(),this.setupContextMenus(),await this.refresh()}async showAlert({title:e="Notice",message:t}){return new Promise(n=>{const s=new S({title:e});s.updateContent(`<p>${t}</p>`),s.addFooterButton("OK",()=>{s.destroy(),n()}),s.show()})}async showConfirm({title:e,message:t,okText:n="OK",destructive:s=!1}){return S.confirm({title:e,message:t,okText:n,destructive:s,cancelText:"Cancel"})}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{await this.gitClient.pfs.stat(n)}catch(i){if(i.code==="ENOENT")try{await this.gitClient.pfs.mkdir(n)}catch(r){if(r.code!=="EEXIST")throw r}else throw i}}}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new Y({targetSelector:".sidebar-content.files-view",itemSelector:"[data-filepath]",dataAttribute:"data-filepath",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},...e]}),new Y({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const n=t.target.dataset.tab,s=this.activeTab;if(this.activeTab=n,sessionStorage.setItem("sidebarActiveTab",this.activeTab),s==="Git"&&n!=="Git"){const i=this.editor.getFilePath(window.location.hash);this.editor.loadFile(i)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(n=>{n.classList.toggle("active",n.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,n,s])=>n!==s);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listFiles(e,t){const n=e.pfs;let s=[];try{const i=await n.readdir(t);for(const r of i){if(r===".git")continue;const a=`${t==="/"?"":t}/${r}`;try{(await n.stat(a)).isDirectory()?s=s.concat(await this.listFiles(e,a)):s.push(a)}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No files to list.`)}return s}}const ft=ke.define(),pt=A.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"},".cm-embed-container":{display:"block",padding:"10px 0"},".cm-embedded-image":{maxWidth:"100%",maxHeight:"500px",display:"block",margin:"0 auto",borderRadius:"4px",border:"1px solid var(--color-border)"},".cm-embed-placeholder, .cm-embed-error":{display:"block",padding:"10px",backgroundColor:"var(--color-background-secondary)",borderRadius:"4px",fontStyle:"italic",color:"var(--color-text-secondary)"},".cm-embed-error":{color:"var(--color-text-destructive)"}},{dark:!0}),yt=$e.define([{tag:f.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[f.name,f.deleted,f.character,f.propertyName,f.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[f.processingInstruction,f.string,f.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[f.function(f.variableName),f.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[f.color,f.constant(f.name),f.standard(f.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[f.definition(f.name),f.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[f.typeName,f.className,f.number,f.changed,f.annotation,f.modifier,f.self,f.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[f.operator,f.operatorKeyword,f.url,f.escape,f.regexp,f.link,f.special(f.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[f.meta,f.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:ft,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:f.strong,fontWeight:"bold",class:"cm-strong"},{tag:f.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:f.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:f.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:f.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[f.atom,f.bool,f.special(f.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:f.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),wt=[pt,de(yt)];function bt(o,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const n=r=>{t.innerHTML=`<p>${r}</p>`,t.classList.add("visible")},s=()=>{t.classList.remove("visible")},i=async(r,a)=>{let c=r;if(r.some(p=>p.isDirectory&&p.name===".git")){const p=await S.choice({title:".git Directory Detected",message:"<p>The content you dropped contains a .git repository. This could unintentionally overwrite your garden's history.</p><p>How would you like to proceed?</p>",choices:[{id:"import_safe",text:"Import Files (Ignore .git folder)"},{id:"cancel",text:"Cancel Import",class:"destructive"}]});if(!p||p==="cancel"){a("Import cancelled by user.","Import cancelled by user.");return}c=r.filter(C=>!(C.isDirectory&&C.name===".git")),a("Ignoring .git directory and proceeding with import.","Ignoring .git directory.")}const d=[],h=[],u=["png","jpg","jpeg","gif","svg","webp","avif"],g=async(p,C)=>{if(p.isFile){const v=await new Promise(x=>p.file(x)),E=`${C}/${v.name}`;v.name.toLowerCase().endsWith(".zip")?h.push(v):d.push({file:v,path:E})}else if(p.isDirectory){const v=p.createReader(),E=await new Promise(x=>v.readEntries(x));for(const x of E)await g(x,`${C}/${p.name}`)}};a("Scanning dropped items...","Scanning dropped items...");for(const p of c)await g(p,"");const m=`Found ${d.length} file(s) and ${h.length} zip archive(s) to process.`;a(m,m);const y=d.map(async({file:p,path:C})=>{let v;const E=p.name.split(".").pop()?.toLowerCase();return u.includes(E)?v=await p.arrayBuffer():v=await p.text(),o.writeFile(C,v)});if((await Promise.allSettled(y)).forEach((p,C)=>{const v=d[C].path;if(p.status==="rejected"){const E=`<span style="color: var(--color-text-destructive);">ERROR:</span> Failed to write "${v}": ${p.reason}`,x=`ERROR: Failed to write "${v}": ${p.reason}`;a(E,x)}else{const E=`<span style="color: var(--color-text-success);">OK:</span> Imported "${v}"`,x=`OK: Imported "${v}"`;a(E,x)}}),h.length>0){const p="Note: Zip archives must be imported via the DevTools > Data panel.";a(p,p)}};window.addEventListener("dragenter",r=>{r.preventDefault(),r.dataTransfer.types.includes("Files")&&n("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",r=>{r.preventDefault()}),window.addEventListener("dragleave",r=>{r.clientX===0&&r.clientY===0&&s()}),window.addEventListener("drop",async r=>{r.preventDefault(),s();const a=r.dataTransfer.items;if(!a||a.length===0)return;const c=Array.from(a).map(l=>l.webkitGetAsEntry()).filter(Boolean);if(c.length>0){const l=new S({title:"Importing Files..."}),d=document.createElement("div");d.style.fontFamily="monospace",d.style.maxHeight="300px",d.style.overflowY="auto",d.style.fontSize="12px",l.updateContent(""),l.content.appendChild(d),l.show();let h="";const u=(g,m)=>{console.log(`[Import Log] ${m}`),h+=`<div>${g}</div>`,d.innerHTML=h,d.scrollTop=d.scrollHeight};try{await i(c,u),u("<strong>Import process complete.</strong>","Import process complete.")}catch(g){const m=`<strong style="color: var(--color-text-destructive);">A critical error occurred: ${g.message}</strong>`,y=`A critical error occurred: ${g.message}`;u(m,y),console.error("[DragDrop] A critical error occurred during import:",g)}finally{l.addFooterButton("Close",()=>l.destroy()),await e.refresh()}}})}const vt=$.mark({class:"cm-hashtag"}),Ct=L.fromClass(class{decorations;constructor(o){this.decorations=this.findHashtags(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findHashtags(o.view))}findHashtags(o){const e=new T,t=/#[\w-]+/g;for(const{from:n,to:s}of o.visibleRanges){const i=o.state.doc.sliceString(n,s);let r;for(;r=t.exec(i);){const a=n+r.index,c=a+r[0].length,l=o.state.doc.lineAt(a);if(a>l.from){const g=o.state.doc.sliceString(a-1,a);if(/\s/.test(g)===!1)continue}const d=/https?:\/\/[^\s]+/g;let h,u=!1;for(;h=d.exec(l.text);){const g=l.from+h.index,m=g+h[0].length;if(a>=g&&c<=m){u=!0;break}}u||e.add(a,c,vt)}}return e.finish()}},{decorations:o=>o.decorations}),_=he.define({create:()=>({gitClient:null,sidebar:null}),update:(o,e)=>o});async function St(o,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listFiles(e.gitClient,"/"),n=o.toLowerCase();for(const s of t)if((s.startsWith("/")?s.substring(1):s).toLowerCase()===n)return s;return null}async function pe(o,e){if(!o)return;let t=o.split("|")[0].trim(),n=null;if(t.includes("#")&&([n,t]=t.split("#")),n){t.startsWith("/")||(t=`/${t}`);const s=new URL(import.meta.url).pathname,i=s.lastIndexOf("/src/"),r=i>-1?s.substring(0,i):"";window.location.href=`${window.location.origin}${r}/${encodeURIComponent(n)}#${encodeURIComponent(t)}`}else{const s=await St(t,e);let i;s?i=s:i=t.startsWith("/")?t:`/${t}`,window.location.hash=`#${encodeURIComponent(i)}`}}const Et=M.of([{key:"Mod-Enter",run:o=>{const e=o.state.field(_);if(!e.gitClient)return!1;const t=o.state.selection.main.head,n=o.state.doc.lineAt(t),s=[{type:"wikilink",regex:/\[\[([^\[\]]+?)\]\]/g},{type:"markdown",regex:/\[[^\]]*\]\(([^)]+)\)/g},{type:"naked",regex:/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g}];for(const{type:i,regex:r}of s){let a;for(;a=r.exec(n.text);){const c=n.from+a.index,l=c+a[0].length;if(t>=c&&t<=l){if(i==="wikilink")pe(a[1],e);else{let d=i==="markdown"?a[1]:a[0];d.startsWith("www.")&&(d=`https://${d}`),window.open(d,"_blank","noopener,noreferrer")}return!0}}}return!1}}]),kt=$.mark({class:"cm-wikilink"});class xt{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=this.view.state.field(_);t.gitClient&&pe(e.textContent.slice(2,-2),t)}onMouseDown(e){const t=e.target.closest(".cm-wikilink");t&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleNavigation(t))}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new T,n=/\[\[([^\[\]]+?)\]\]/g;for(const{from:s,to:i}of e.visibleRanges){const r=e.state.doc.sliceString(s,i);let a;for(;a=n.exec(r);){const c=s+a.index,l=c+a[0].length;t.add(c,l,kt)}}return t.finish()}}const $t=L.fromClass(xt,{decorations:o=>o.decorations}),Pt=$.mark({class:"cm-checkbox-todo"}),Lt=$.mark({class:"cm-checkbox-done"}),Tt=$.mark({class:"cm-checkbox-doing"}),Ft=L.fromClass(class{decorations;constructor(o){this.decorations=this.findCheckboxes(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findCheckboxes(o.view))}findCheckboxes(o){const e=new T,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:n,to:s}of o.visibleRanges){const i=o.state.doc.sliceString(n,s);let r;for(;r=t.exec(i);){const a=r[2],c=n+r.index+r[0].indexOf("["),l=c+3;a===" "?e.add(c,l,Pt):a==="x"?e.add(c,l,Lt):a==="-"&&e.add(c,l,Tt)}}return e.finish()}},{decorations:o=>o.decorations}),Mt=$.mark({class:"cm-timestamp"}),It=L.fromClass(class{decorations;constructor(o){this.decorations=this.findTimestamps(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findTimestamps(o.view))}findTimestamps(o){const e=new T,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:n,to:s}of o.visibleRanges){const i=o.state.doc.sliceString(n,s);let r;for(;r=t.exec(i);){const a=r[0],c=r[1],l=n+r.index+a.indexOf(c),d=l+c.length;e.add(l,d,Mt)}}return e.finish()}},{decorations:o=>o.decorations}),Nt=$.mark({class:"cm-naked-link"});function At(o){return o?o.startsWith("www.")?"https://"+o:o:null}class Rt{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;const n=At(t.textContent);return n&&window.open(n,"_blank","noopener,noreferrer"),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new T,n=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:s,to:i}of e.visibleRanges){const r=e.state.doc.sliceString(s,i);let a;for(;a=n.exec(r);){const c=e.state.doc.lineAt(s+a.index);if(/\[.*\]\(.*\)/.test(c.text)&&c.text.includes(`](${a[0]})`))continue;const l=s+a.index,d=l+a[0].length;t.add(l,d,Nt)}}return t.finish()}}const Dt=L.fromClass(Rt,{decorations:o=>o.decorations}),_t=$.line({class:"cm-blockquote"}),Ot=L.fromClass(class{decorations;constructor(o){this.decorations=this.findBlockquotes(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findBlockquotes(o.view))}findBlockquotes(o){const e=new T,t=/^\s*>\s/;for(const{from:n,to:s}of o.visibleRanges){let i=n;for(;i<=s;){const r=o.state.doc.lineAt(i);t.test(r.text)&&e.add(r.from,r.from,_t),i=r.to+1}}return e.finish()}},{decorations:o=>o.decorations}),qt=$.line({class:"cm-hr"}),Bt=L.fromClass(class{decorations;constructor(o){this.decorations=this.findRulers(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findRulers(o.view))}findRulers(o){const e=new T,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:n,to:s}of o.visibleRanges){let i=n;for(;i<=s;){const r=o.state.doc.lineAt(i);t.test(r.text)&&e.add(r.from,r.from,qt),i=r.to+1}}return e.finish()}},{decorations:o=>o.decorations}),ye=["png","jpg","jpeg","gif","svg","webp","avif"];function Gt(o){switch(o.toLowerCase()){case"png":return"image/png";case"jpg":case"jpeg":return"image/jpeg";case"gif":return"image/gif";case"svg":return"image/svg+xml";case"webp":return"image/webp";case"avif":return"image/avif";default:return"application/octet-stream"}}class X extends Pe{constructor(e,t,n,s){super(),this.linkTarget=e,this.altText=t,this.type=n,this.view=s,this.objectURL=null}eq(e){return this.linkTarget===e.linkTarget&&this.type===e.type}toDOM(){const e=document.createElement("span");if(e.className="cm-embed-container",this.type==="external"){const t=document.createElement("img");t.src=this.linkTarget,t.alt=this.altText,t.className="cm-embedded-image",e.appendChild(t)}else{const t=document.createElement("span");t.className="cm-embed-placeholder",t.textContent=`Loading: ${this.linkTarget}`,e.appendChild(t),this.loadInternalContent(e).catch(n=>{console.error(`Failed to load internal embed for ${this.linkTarget}:`,n),t.textContent=`Error: ${this.linkTarget} not found.`,e.classList.add("cm-embed-error")})}return e}async loadInternalContent(e){let n=decodeURIComponent(this.linkTarget),s=null;n.includes("#")&&([s,n]=n.split("#"));const i=n.split(".").pop()?.toLowerCase();if(!ye.includes(i)){e.textContent="",e.style.display="none";return}const r=this.view.state.field(_);let a;s&&s!==r.gitClient.gardenName?a=new P(s):a=r.gitClient;const c=n.startsWith("/")?n:`/${n}`,l=await a.readFileAsBuffer(c);if(!l)throw new Error("File could not be read as a buffer.");const d=Gt(i),h=new Blob([l],{type:d});this.objectURL=URL.createObjectURL(h);const u=document.createElement("img");u.src=this.objectURL,u.alt=this.linkTarget,u.className="cm-embedded-image",e.innerHTML="",e.appendChild(u)}destroy(){this.objectURL&&URL.revokeObjectURL(this.objectURL)}}function Z(o){const e=new T,t=j(o.state),n=s=>{let i=t.resolve(s,1);for(;i;){if(i.name.includes("Code"))return!0;i=i.parent}return!1};for(const{from:s,to:i}of o.visibleRanges){const r=o.state.doc.sliceString(s,i),a=/!\[\[([^\[\]]+?)\]\]/g;let c;for(;c=a.exec(r);){const d=s+c.index;if(n(d))continue;const h=d+c[0].length,u=c[1];e.add(d,h,$.replace({widget:new X(u,u,"internal",o)}))}const l=/!\[(.*?)\]\((.*?)\)/g;for(;c=l.exec(r);){const d=s+c.index;if(n(d))continue;const h=d+c[0].length,u=c[1],g=c[2],m=g.split(".").pop()?.toLowerCase()?.split("?")[0];g.startsWith("http")&&ye.includes(m)&&e.add(d,h,$.replace({widget:new X(g,u,"external",o)}))}}return e.finish()}const Ut=L.fromClass(class{constructor(o){this.decorations=Z(o)}update(o){(o.docChanged||o.viewportChanged||j(o.startState)!==j(o.state))&&(this.decorations=Z(o.view))}},{decorations:o=>o.decorations}),Ht=$.line({class:"cm-response-wrapper"}),Q=$.mark({class:"cm-response-tag"}),Wt=L.fromClass(class{decorations;constructor(o){this.decorations=this.findResponseBlocks(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findResponseBlocks(o.view))}findResponseBlocks(o){const e=new T,t=o.state.doc;let n=!1;for(let s=1;s<=t.lines;s++){const i=t.line(s),r=o.visibleRanges.some(a=>a.from<=i.to&&a.to>=i.from);if(i.text.trim()==="<response>"){n=!0,r&&e.add(i.from,i.to,Q);continue}if(i.text.trim()==="</response>"){n=!1,r&&e.add(i.from,i.to,Q);continue}n&&r&&e.add(i.from,i.from,Ht)}return e.finish()}},{decorations:o=>o.decorations}),jt=$.line({class:"cm-prompt-wrapper"}),zt=L.fromClass(class{decorations;constructor(o){this.decorations=this.findPrompts(o)}update(o){(o.docChanged||o.viewportChanged)&&(this.decorations=this.findPrompts(o.view))}findPrompts(o){const e=new T,t=/^\s*>\$\s/;for(const{from:n,to:s}of o.visibleRanges){let i=n;for(;i<=s;){const r=o.state.doc.lineAt(i);t.test(r.text)&&e.add(r.from,r.from,jt),i=r.to+1}}return e.finish()}},{decorations:o=>o.decorations}),Jt=[Ct,$t,Ft,It,Dt,Ot,Bt,Ut,Wt,zt],ee=Le.define(Te),Kt=Fe({base:Ae,codeLanguages:[B.of({name:"javascript",load:()=>Promise.resolve(ue())}),B.of({name:"html",load:()=>Promise.resolve(ge())}),B.of({name:"css",load:()=>Promise.resolve(me())})]});function te(o){const e=o.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return ee}switch(t){case"js":return ue();case"css":return me();case"html":return ge();case"json":return Ne();case"xml":return Ie();case"yaml":case"yml":return Me();case"sh":case"bash":case"zsh":return ee;default:return Kt}}const Vt=$.mark({class:"cm-diff-inserted"});function ne(o,e){const t=[],n=e.doc.toString(),s=q(o,n);let i=0;for(const[r,a]of s)r===q.INSERT&&t.push(Vt.range(i,i+a.length)),r!==q.DELETE&&(i+=a.length);return $.set(t)}const U=new z;function Yt(o){return he.define({create(e){return ne(o,e)},update(e,t){return t.docChanged?ne(o,t.state):e.map(t.changes)},provide:e=>A.decorations.from(e)})}const Xt=L.fromClass(class{constructor(o){this.view=o,this.statusBar=document.createElement("div"),this.statusBar.className="token-status-bar",this.countElement=document.createElement("span"),this.countElement.className="token-count",this.statusBar.appendChild(this.countElement);const e=o.dom.closest("main");e?e.appendChild(this.statusBar):o.dom.parentNode.insertBefore(this.statusBar,o.dom.nextSibling),this.debouncedUpdate=le(this.updateTokenCount.bind(this),250),this.updateTokenCount()}update(o){o.docChanged&&this.debouncedUpdate()}updateTokenCount(){try{const o=this.view.state.doc.toString(),e=lt(o);this.countElement.textContent=`Tokens: ${e.toLocaleString()}`}catch(o){console.warn("Token counting error:",o),this.countElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function Zt(){return Xt}const Qt=M.of([{key:"Mod-Enter",run:o=>{const e=o.state.selection.main.head;return o.state.doc.lineAt(e).text.trim().startsWith(">$")?(window.thoughtform.ai.handleAiChatRequest(o),!0):!1}}]),H=Re.define();class O{static editors=[];constructor({url:e,target:t="body main",editorConfig:n={},gitClient:s,commandPalette:i}){if(!s)throw new Error("Editor requires a gitClient instance.");if(!i)throw new Error("Editor requires a commandPalette instance.");window.location.hash||(window.location.hash="#home"),this.targetSelector=t,this.url=e||window.location.hash,this.editorConfig=n,this.gitClient=s,this.commandPalette=i,this.editorView=null,this.sidebar=null,this.filePath=this.getFilePath(this.url),this.isReady=!1,this.mainContainer=null,this.languageCompartment=new z,this.tokenCounterCompartment=new z,this.imageViewerElement=null,this.currentObjectUrl=null,this.debouncedHandleUpdate=le(this.handleUpdate.bind(this),500),this.init()}async init(){if(this.mainContainer=document.querySelector(this.targetSelector),!this.mainContainer){console.error(`Target container not found: ${this.targetSelector}`);return}await this.gitClient.initRepo(),this.sidebar=new mt({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),bt(this.gitClient,this.sidebar);const e=await this.loadFileContent(this.filePath),t=document.getElementById("loading-indicator");t&&t.remove(),this.mainContainer.style.display="flex",this.imageViewerElement=document.createElement("div"),this.imageViewerElement.className="image-viewer-container",this.mainContainer.appendChild(this.imageViewerElement);const n=A.updateListener.of(r=>{r.docChanged&&!r.transactions.some(a=>a.annotation(H))&&this.debouncedHandleUpdate(r.state.doc.toString())});De.map("jj","<Esc>","insert");const s=M.of([{key:"Alt-ArrowLeft",run:()=>(window.history.back(),!0)},{key:"Alt-ArrowRight",run:()=>(window.history.forward(),!0)}]),i=M.of([{key:"Mod-p",run:()=>(window.thoughtform.commandPalette.open("search"),!0),shift:()=>(window.thoughtform.commandPalette.open("execute"),!0)},{key:"Mod-[",run:()=>(window.thoughtform.ui.toggleSidebar?.(),!0)},{key:"Mod-`",run:()=>(window.thoughtform.ui.toggleDevtools?.(null,null),!0)}]);this.editorView=new A({doc:e,extensions:[_.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar})),i,s,Qt,Et,M.of([et]),_e(),Oe(),qe(),Be(),Ge(),Ue(),He(),We(),je.allowMultipleSelections.of(!0),ze(),de(tt,{fallback:!0}),Je(),Ke(),Ve(),Ye(),Xe(),Ze(),M.of([...nt,...st,...it,...ot,...rt,...at]),A.lineWrapping,Qe,wt,this.languageCompartment.of(te(this.filePath)),n,...Jt,U.of([]),this.tokenCounterCompartment.of(Zt()),...this.editorConfig.extensions||[]],parent:this.mainContainer}),O.editors.push(this),this.isReady=!0,this.listenForNavigation(),this.loadFile(this.filePath),this.editorView.focus()}async loadFileContent(e){try{return await this.gitClient.readFile(e)}catch(t){return console.warn(`Could not read file ${e}, starting with empty content.`,t),""}}async showDiff(e){if(e===null){console.error("Cannot show diff, original content is null."),this.hideDiff();return}const t=Yt(e);this.editorView.dispatch({effects:U.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:U.reconfigure([])})}listenForNavigation(){window.addEventListener("hashchange",async()=>{this.hideDiff();const e=this.getFilePath(window.location.hash);e&&this.filePath!==e&&await this.loadFile(e)})}async previewHistoricalFile(e,t,n){const[s,i]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(n,e)]);if(s===null||i===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:s},annotations:H.of(!0)}),this.showDiff(i)}async loadFile(e){const t=["png","jpg","jpeg","gif","svg","webp","avif"],n=e.split(".").pop()?.toLowerCase();if(t.includes(n)){this.hideDiff(),this.mainContainer.classList.remove("is-editor"),this.mainContainer.classList.add("is-image-preview"),this.imageViewerElement.innerHTML="<p>Loading image...</p>";const a=await this.gitClient.readFileAsBuffer(e);if(a){const c=`image/${n==="svg"?"svg+xml":n}`,l=new Blob([a],{type:c});this.currentObjectUrl&&URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=URL.createObjectURL(l),this.imageViewerElement.innerHTML=`<img src="${this.currentObjectUrl}" alt="${e}" />`}else this.imageViewerElement.innerHTML=`<p class="error">Could not load image: ${e}</p>`;this.filePath=e,this.sidebar&&await this.sidebar.refresh();return}this.mainContainer.classList.remove("is-image-preview"),this.mainContainer.classList.add("is-editor"),this.currentObjectUrl&&(URL.revokeObjectURL(this.currentObjectUrl),this.currentObjectUrl=null),this.hideDiff();const s=await this.loadFileContent(e);this.filePath=e;const i=te(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(i)});const r=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:r.length,insert:s},annotations:H.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){await this.loadFile(e)}async handleUpdate(e){this.isReady&&this.filePath===this.getFilePath(window.location.hash)&&(await this.gitClient.writeFile(this.filePath,e),this.sidebar&&await this.sidebar.refresh())}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="home"),t}}window.Editor=O;function en(){tn(),nn()}function tn(){const o=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!o||!e||!t)return;const n=document.createElement("button");n.id="sidebar-toggle-icon",n.title="Toggle Sidebar (Ctrl + [)",e.appendChild(n);let s=0,i=!1;const r=()=>{if(o.classList.contains("sidebar-collapsed")){const g=localStorage.getItem("sidebarWidth")||"250px";o.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",g),localStorage.setItem("sidebarCollapsed","false"),n.textContent="‹"}else{const g=document.documentElement.style.getPropertyValue("--sidebar-width");g!=="0px"&&localStorage.setItem("sidebarWidth",g),o.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),n.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=r);const a=u=>{u.type==="touchmove"&&u.preventDefault();const g=u.clientX||u.touches&&u.touches[0].clientX;if(Math.abs(g-s)>5&&(i=!0),i){const m=Math.max(24,Math.min(g,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${m}px`),o.classList.remove("sidebar-collapsed"),n.textContent="‹"}},c=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),i){const u=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",u),localStorage.setItem("sidebarCollapsed","false")}else r()},l=u=>{s=u.clientX||u.touches&&u.touches[0].clientX,i=!1,u.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a,{passive:!1}),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c)};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(o.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),n.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",d||"250px"),n.textContent="‹")}function nn(){const o=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!o||!e)return;const n=document.createElement("button");n.id="eruda-toggle",n.title="Toggle DevTools (Ctrl + `)",e.appendChild(n);let s=0,i=!1;const r=(h=null,u=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const g=t.style.height==="0px"||t.offsetHeight<10;if(h===null?g:h){const y=localStorage.getItem("erudaHeight")||"250px";t.style.height=y,n.textContent="▼",localStorage.setItem("erudaCollapsed","false"),u&&setTimeout(()=>window.thoughtform.eruda?.show(u),50)}else{if(g)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",n.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=r);const a=h=>{h.type==="touchmove"&&h.preventDefault();const u=h.clientY||h.touches&&h.touches[0].clientY;if(Math.abs(u-s)>5&&(i=!0),!i)return;const g=window.innerHeight-u,m=42,y=window.innerHeight-100;t.style.height=`${Math.max(m,Math.min(g,y))}px`,n.textContent="▼"},c=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),i?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):r(null,null)},l=h=>{s=h.clientY||h.touches&&h.touches[0].clientY,i=!1,h.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c))};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const d=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",n.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",n.textContent="▼"),d.disconnect())});d.observe(o,{childList:!0})}async function we(o,e){const t=o.pfs;let n=[];try{const s=await t.readdir(e);for(const i of s){const r=`${e==="/"?"":e}/${i}`;try{(await t.stat(r)).isDirectory()?n=n.concat(await we(o,r)):n.push(r)}catch{console.warn(`Could not stat ${r}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return n}async function be(o,e){try{if((await o.stat(e)).isDirectory()){const n=await o.readdir(e);for(const s of n)await be(o,`${e}/${s}`);await o.rmdir(e)}else await o.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async function sn(o,e){e("Starting export...");const t=new R;if(!o||o.length===0)throw new Error("No gardens were selected for export.");for(const a of o){e(`Processing garden: "${a}"...`);const c=t.folder(a),l=new P(a),d=await we(l,"/");for(const h of d){const u=await l.pfs.readFile(h),g=h.startsWith("/")?h.substring(1):h;c.file(g,u)}}e("Generating zip file...");const n=await t.generateAsync({type:"blob"}),i=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,r=document.createElement("a");r.href=URL.createObjectURL(n),r.download=i,document.body.appendChild(r),r.click(),document.body.removeChild(r),e(`Export process initiated: ${i}`)}async function on(o){const e=await R.loadAsync(o),t=new Set;return e.forEach(n=>{if(n.includes("/")){const s=n.split("/")[0];t.add(s)}}),Array.from(t).sort()}async function rn(o,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${o.name}...`);const n=await R.loadAsync(o);t("Zip file loaded. Analyzing backup contents...");let s="merge";const i=[];for(const d of e){const h=new P(d);let u=!1;try{await h.pfs.stat("/.git"),u=!0}catch{}const g=Object.keys(n.files).some(m=>m.startsWith(`${d}/.git/`));u&&g&&i.push(d)}if(i.length>0){const d=`<ul>${i.map(u=>`<li><strong>${u}</strong></li>`).join("")}</ul>`,h=await S.choice({title:"Replace Garden History?",message:`<p>The backup contains a git history for the following existing garden(s):</p>
                ${d}
                <p>Replacing history is a destructive action. How should we proceed?</p>`,choices:[{id:"replace",text:"Replace History",class:"destructive"},{id:"merge",text:"Merge Files, Keep Local History"},{id:"cancel",text:"Cancel Import"}]});if(!h||h==="cancel"){t("Import cancelled by user.");return}s=h}if(s==="replace"){t("Strategy: Replacing history for conflicting gardens.");for(const d of i){t(`  Deleting existing .git directory for "${d}"...`);const h=new P(d);await be(h.pfs,"/.git"),t(`  Done deleting for "${d}".`)}}else t("Strategy: Merging files and keeping local history where conflicts exist.");const r=new Map;t("Initializing target gardens...");for(const d of e){const h=new P(d);await h.initRepo(),r.set(d,h)}t("Initialization complete. Starting file writes...");const a=[];n.forEach((d,h)=>{if(h.dir)return;const u=d.split("/")[0];if(!e.includes(u)||d.substring(u.length+1).startsWith(".git/")&&s==="merge"&&i.includes(u))return;const m=`/${d.substring(u.length+1)}`,y=h.async("uint8array").then(async w=>{await r.get(u).writeFile(m,w)});a.push(y)});const c=a.length;let l=0;a.forEach(d=>d.then(()=>{l++,(l%100===0||l===c)&&t(`Writing files... (${l}/${c})`)})),await Promise.all(a),t("Import complete! Reloading page..."),setTimeout(()=>window.location.reload(),1500)}async function an(o,e){if(!o||o.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];for(const s of o){e(`Deleting garden: "${s}"...`),n=n.filter(r=>r!==s);const i=`garden-fs-${s}`;await new Promise((r,a)=>{const c=indexedDB.deleteDatabase(i);c.onsuccess=()=>{e(`  Successfully deleted database: ${i}`),r()},c.onerror=l=>{e(`  Error deleting database: ${i}`),a(l.target.error)},c.onblocked=()=>{e(`  Deletion blocked for ${i}. Please refresh and try again.`),a(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(n)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const s=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(o.includes(s)||n.length===0){const i=new URL(import.meta.url).pathname,r=i.lastIndexOf("/src/"),a=r>-1?i.substring(0,r):"";window.location.href=`${window.location.origin}${a}/home`}else window.location.reload()},2e3)}class cn{constructor(){const e=new URLSearchParams(window.location.search);this.isEnabled=e.has("debug"),console.log(`[DEBUG] Debug mode is ${this.isEnabled?"ENABLED":"DISABLED"}`)}log(...e){this.isEnabled&&console.log("[DEBUG]",...e)}error(...e){this.isEnabled&&console.error("[DEBUG]",...e)}warn(...e){this.isEnabled&&console.warn("[DEBUG]",...e)}}const b=new cn;class ln{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const n=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(n),this.signaling.ws.onopen=()=>{b.log(`Connected to signaling server at ${n}`),e()},this.signaling.ws.onclose=()=>{b.log("Disconnected from signaling server"),this.signaling.sync.disconnect()},this.signaling.ws.onerror=s=>{b.error("WebSocket error:",s),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${n}`))},this.signaling.ws.onmessage=s=>{try{const i=JSON.parse(s.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(i)}catch(i){b.error("Error parsing signaling message:",i)}}})}sendJoinSessionRequest(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN?t.send(JSON.stringify({type:"join_session",sessionId:e})):b.error("Cannot send join session request, WebSocket is not open.")}sendSignal(e,t){const n=this.signaling.ws;n&&n.readyState===WebSocket.OPEN&&n.send(JSON.stringify({type:"signal",target:t,data:e}))}}class dn{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"welcome":this.signaling.peerId=e.peerId,t.updateConnectionState("connected-signal","Connected to tracker, waiting for peers...");break;case"peer_list":e.peers.forEach(n=>{this.signaling.connectToPeer(n)});break;case"peer_joined":this.signaling.connectToPeer(e.peerId);break;case"signal":e.from&&e.data&&this.signaling.handleSignal(e.from,e.data);break;case"peer_left":e.peerId&&t.handlePeerLeft(e.peerId);break;case"error":t.updateConnectionState("error",`Signaling error: ${e.message}`);break}}}const hn=500;class un{constructor(e){this.signaling=e,this.sync=e.sync,this.seenMessages=new Set}handleIncomingMessage(e,t){if(!e.payload||!e.messageId){b.warn("Received a message without a payload or messageId, cannot process.",e);return}if(this.seenMessages.has(e.messageId))return;if(this.seenMessages.add(e.messageId),this.seenMessages.size>hn){const s=this.seenMessages.values().next().value;this.seenMessages.delete(s)}e.noGossip||this.sendSyncMessage(e.payload,null,e.messageId);const n=e.payload;switch(n.type){case"peer_introduction":this.sync.handlePeerIntroduction(n);break;default:this.sync.fileSync&&this.sync.fileSync.handleSyncMessage(n);break}}sendSyncMessage(e,t=null,n=null){const s=n||crypto.randomUUID(),r=JSON.stringify({messageId:s,payload:e,noGossip:!!t});if(this.seenMessages.add(s),t){const a=this.sync.peerConnections.get(t);if(a&&a.dataChannel&&a.dataChannel.readyState==="open")try{a.dataChannel.send(r)}catch(c){console.error(`Error sending direct message to ${t.substring(0,8)}...:`,c)}}else this.sync.peerConnections.forEach((a,c)=>{if(a.dataChannel&&a.dataChannel.readyState==="open")try{a.dataChannel.send(r)}catch(l){console.error(`Error gossiping message to ${c.substring(0,8)}...:`,l)}})}destroy(){this.seenMessages.clear()}}class gn{constructor(e){this.signaling=e}async connectToPeer(e){const t=this.signaling.sync,n=t.createPeerConnection(e,!0);if(n)try{const s=n.createDataChannel("syncChannel");t.setupDataChannel(e,s);const i=await n.createOffer();await n.setLocalDescription(i),this.signaling.sendSignal({type:"offer",sdp:i.sdp},e)}catch(s){b.error(`Failed to initiate connection to ${e}:`,s)}}}class mn{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this._webSocketManager=new ln(this),this._signalingMessageHandler=new dn(this),this._webrtcInitiator=new gn(this),this._syncMessageRouter=new un(this)}updateSignalingServerUrl(e){this.signalingServerUrl=e,localStorage.setItem("thoughtform_signaling_server",e)}async joinSession(e){try{await this._webSocketManager.connectToSignalingServer(),this._webSocketManager.sendJoinSessionRequest(e)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server.")}}connectToPeer(e){e!==this.peerId&&this.peerId>e&&this._webrtcInitiator.connectToPeer(e)}sendSignal(e,t){this._webSocketManager.sendSignal(e,t)}async handleSignal(e,t){const n=this.sync;try{let s=n.peerConnections.get(e);if(!s)if(t.type==="offer"){if(s=n.createPeerConnection(e,!1),!s){console.warn(`[SYNC-SIGNAL] Received offer from ${e.substring(0,8)} but at connection limit. Ignoring.`);return}}else{b.warn(`[SYNC-SIGNAL] Received signal from unknown peer ${e.substring(0,8)} before an offer. Discarding.`);return}if(t.type==="offer"){await s.setRemoteDescription(new RTCSessionDescription(t));const i=await s.createAnswer();await s.setLocalDescription(i),this.sendSignal({type:"answer",sdp:i.sdp},e)}else t.type==="answer"?await s.setRemoteDescription(new RTCSessionDescription(t)):t.type==="candidate"&&await s.addIceCandidate(new RTCIceCandidate(t.candidate))}catch(s){b.error(`Error handling signal from ${e}:`,s)}}sendSyncMessage(e,t,n){this._syncMessageRouter.sendSyncMessage(e,t,n)}handleIncomingMessage(e,t){this._syncMessageRouter.handleIncomingMessage(e,t)}destroy(){this.ws&&(this.ws.close(),this.ws=null),this._syncMessageRouter.destroy()}}class fn{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const n=this._listeners[e];for(let s=0,i=n.length;s<i;s++)if(n[s]===t){n.splice(s,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class pn{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return b.log(`DEBUG: Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return b.log(`DEBUG: Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return b.log("DEBUG: Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return b.log("DEBUG: Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return b.log("DEBUG: _getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class yn{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),b.log("DEBUG: SyncFiles confirmed data channel is open.")},t.onmessage=async n=>{try{const s=JSON.parse(n.data);await e.sync._handleIncomingSyncMessage(s,"P2P")}catch(s){console.error("Error parsing sync message from DataChannel:",s,"Raw data:",n.data)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),b.log("DEBUG: SyncFiles confirmed data channel is closed.")},t.onerror=n=>{const s=n.error;s&&s.name==="OperationError"&&s.message.includes("User-Initiated Abort")?b.log("Data channel closed intentionally by a peer.",n):(console.error("Data channel error:",n),e.sync.addMessage("Data channel error: "+(s?s.message:"Unknown error")))}}}class ve{static async _listAllFiles(e,t){const n=e.pfs;if(!n)throw new Error("gitClient does not have pfs property");let s=[];try{const i=await n.readdir(t);for(const r of i){if(r===".git")continue;const a=t==="/"?`/${r}`:`${t}/${r}`;try{(await n.stat(a)).isDirectory()?s=s.concat(await this._listAllFiles(e,a)):s.push(a)}catch(c){b.warn(`Could not stat ${a}, skipping.`,c)}}}catch(i){b.log(`Directory not readable: ${t}`,i)}return s}static async handleFileUpdate(e,t){e.incrementPendingWrites();try{if(!t.gardenName)throw new Error("Received file update without a gardenName during a full sync.");const n=new P(t.gardenName);if(t.isFullSync){e.deletedGitDirs.has(t.gardenName)||(e.deletedGitDirs.add(t.gardenName),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing to receive garden: ${t.gardenName}...`,type:"info"}})),await n.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Replacing git history for ${t.gardenName}...`,type:"info"}})),await n.rmrf("/.git")),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Writing: ${t.path.substring(1)} (${t.gardenName})`,type:"info"}}));const s=Buffer.from(t.content,"base64");await n.writeFile(t.path,s)}else{const s=t.isBase64?Buffer.from(t.content,"base64"):t.content;await n.writeFile(t.path,s),e.sync.addMessage(`Updated file: ${t.path} in garden ${t.gardenName}`)}}catch(n){console.error("Error handling file update for path:",t.path,n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${n.message}`,type:"error"}}))}finally{e.decrementPendingWrites()}}}class wn{static async handleSyncMessage(e,t){switch(t.type){case"file_update":await ve.handleFileUpdate(e,t);break;case"request_gardens":await this.handleRequestGardens(e,t.gardens,t.requesterId);break;case"garden_zip_chunk":await this.handleGardenZipChunk(e,t);break;case"garden_zip_complete":await this.handleGardenZipComplete(e,t);break;case"full_sync_complete":e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"File stream complete. Waiting for writes to finish...",type:"info"}})),e.markSyncStreamAsComplete();break;default:b.log("Unknown sync message type:",t.type)}}static async handleRequestGardens(e,t=[],n){if(!t||t.length===0)return;if(!n){const l="Error: Received garden request without a requesterId. Cannot send response.";console.error(l),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:l,type:"error"}}));return}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received request for gardens: ${t.join(", ")}.`,type:"info"}}));const s=64*1024,i=10*1024*1024,r=e.sync.peerConnections.get(n);if(!r||!r.dataChannel||r.dataChannel.readyState!=="open"){const l=`Error: Cannot send files to ${n.substring(0,8)}... because no open data channel was found.`;console.error(l),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:l,type:"error"}}));return}const a=r.dataChannel,c=()=>new Promise(l=>{if(a.bufferedAmount<i)l();else{const d=()=>{a.bufferedAmount<i&&(a.removeEventListener("bufferedamountlow",d),l())};a.addEventListener("bufferedamountlow",d)}});try{for(const l of t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing ${l} for transfer...`,type:"info"}}));const d=new R,h=new P(l),u=await this.getAllFilesIncludingGit(h.pfs,"/");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zipping ${u.length} files from ${l}...`,type:"info"}}));for(const w of u){const p=await h.pfs.readFile(w),C=w.startsWith("/")?w.substring(1):w;d.file(C,p)}const g=await d.generateAsync({type:"uint8array",compression:"DEFLATE",compressionOptions:{level:6}});e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zip created (${(g.length/1024/1024).toFixed(2)} MB). Sending in chunks...`,type:"info"}}));const m=Math.ceil(g.length/s),y=crypto.randomUUID();for(let w=0;w<m;w++){await c();const p=w*s,C=Math.min(p+s,g.length),v=g.slice(p,C);e.sync.sendSyncMessage({type:"garden_zip_chunk",gardenName:l,transferId:y,chunkIndex:w,totalChunks:m,data:Buffer.from(v).toString("base64"),zipSize:g.length},n),(w%20===0||w===m-1)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sent chunk ${w+1} of ${m} for ${l}...`,type:"info"}}))}e.sync.sendSyncMessage({type:"garden_zip_complete",gardenName:l,transferId:y},n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Finished sending ${l}.`,type:"info"}}))}e.sync.sendSyncMessage({type:"full_sync_complete"},n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All gardens sent successfully.",type:"complete"}}))}catch(l){console.error("Error handling garden request:",l),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: ${l.message}`,type:"error"}}))}}static async getAllFilesIncludingGit(e,t){let n=[];try{const s=await e.readdir(t);for(const i of s){const r=`${t==="/"?"":t}/${i}`;try{(await e.stat(r)).isDirectory()?n=n.concat(await this.getAllFilesIncludingGit(e,r)):n.push(r)}catch(a){b.warn(`Could not stat ${r}, skipping.`,a)}}}catch(s){b.log(`Directory not readable: ${t}`,s)}return n}static async handleGardenZipChunk(e,t){e.activeTransfers||(e.activeTransfers=new Map);const n=`${t.gardenName}-${t.transferId}`;e.activeTransfers.has(n)||(e.activeTransfers.set(n,{chunks:new Array(t.totalChunks),receivedCount:0,totalChunks:t.totalChunks,gardenName:t.gardenName,zipSize:t.zipSize}),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Receiving ${t.gardenName} (${(t.zipSize/1024/1024).toFixed(2)} MB in ${t.totalChunks} chunks)...`,type:"info"}})));const s=e.activeTransfers.get(n);s.chunks[t.chunkIndex]=Buffer.from(t.data,"base64"),s.receivedCount++,(s.receivedCount%10===0||s.receivedCount===s.totalChunks)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received ${s.receivedCount} of ${s.totalChunks} chunks for ${t.gardenName}...`,type:"info"}}))}static async handleGardenZipComplete(e,t){const n=`${t.gardenName}-${t.transferId}`,s=e.activeTransfers.get(n);if(!s){console.error(`No transfer found for ${n}`);return}if(s.receivedCount!==s.totalChunks){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: Only received ${s.receivedCount} of ${s.totalChunks} chunks for ${t.gardenName}`,type:"error"}})),e.activeTransfers.delete(n);return}try{e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Reassembling and extracting ${t.gardenName}...`,type:"info"}}));const i=s.chunks.reduce((u,g)=>u+g.length,0),r=new Uint8Array(i);let a=0;for(const u of s.chunks)r.set(u,a),a+=u.length;const c=await R.loadAsync(r),l=new P(t.gardenName);await l.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Clearing existing data for ${t.gardenName}...`,type:"info"}})),await l.rmrf("/.git"),await l.clearWorkdir();const d=Object.entries(c.files);let h=0;for(const[u,g]of d)if(!g.dir){const m=await g.async("uint8array"),y=`/${u}`,w=y.substring(0,y.lastIndexOf("/"));w&&w!=="/"&&await l.ensureDir(w),await l.pfs.writeFile(y,m),h++,h%50===0&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Extracted ${h} files for ${t.gardenName}...`,type:"info"}}))}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Successfully received and extracted ${t.gardenName} (${h} files).`,type:"complete"}})),e.activeTransfers.delete(n),e.activeTransfers.size===0&&e.markSyncStreamAsComplete()}catch(i){console.error(`Error extracting garden ${t.gardenName}:`,i),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error extracting ${t.gardenName}: ${i.message}`,type:"error"}})),e.activeTransfers.delete(n)}}}class se{static async syncAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Starting to send all files...",type:"info"}}));const t=e._getGitClient();if(!t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Error: Git client not available.",type:"error"}}));return}try{if(!await S.confirm({title:"Send All Files",message:"This will send your working files to the peer. It will NOT send your git history. Are you sure?",okText:"Send Files"})){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Send all files cancelled.",type:"cancelled"}}));return}const s=await e.getAllFiles(t);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${s.length} content files to sync.`,type:"info"}}));for(const i of s){const r=await t.readFile(i);let a=0;try{a=JSON.parse(r).lastupdated||0}catch{}e.sync.sendSyncMessage({type:"file_update",path:i,content:r,timestamp:a,isFullSync:!1})}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sync completed. Sent ${s.length} files.`,type:"complete"}}))}catch(n){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error syncing all files: ${n.message}`,type:"error"}}))}}static requestSpecificGardens(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting selected gardens from peers...",type:"info"}}));const n=e.sync.signaling.peerId;if(!n){const s="Cannot request gardens: own peer ID is not available.";e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:s,type:"error"}})),console.error(s);return}Object.entries(t).forEach(([s,i])=>{const r=s.substring(0,8);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending request to peer ${r}... for gardens: ${i.join(", ")}`,type:"info"}})),e.sync.sendSyncMessage({type:"request_gardens",gardens:i,requesterId:n},s)}),e.sync.addMessage(`Sent requests for ${Object.keys(t).length} peer(s).`)}static sendFileUpdate(e,t,n,s){e.sync.sendSyncMessage({type:"file_update",path:t,content:n,timestamp:s})}}class bn extends fn{constructor(e){super(),this.sync=e,this.gitClient=null,this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs=new Set,this.isSyncFailed=!1,this.activeTransfers=new Map}resetFullSyncState(){this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs.clear(),this.activeTransfers.clear(),this.isSyncFailed=!1}_getGitClient(){return pn.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){yn.setupDataChannel(this,e)}async handleSyncMessage(e){try{await wn.handleSyncMessage(this,e)}catch(t){console.error("[SyncFiles] Critical error handling sync message:",t),this.isSyncFailed=!0,this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`A critical error occurred: ${t.message}. Aborting sync.`,type:"error"}}))}}async syncAllFiles(){this.resetFullSyncState(),await se.syncAllFiles(this)}requestSpecificGardens(e){this.resetFullSyncState(),se.requestSpecificGardens(this,e)}incrementPendingWrites(){this.pendingWriteCount++}decrementPendingWrites(){this.pendingWriteCount--,this.checkForReload()}markSyncStreamAsComplete(){this.isSyncCompleteMessageReceived=!0,this.checkForReload()}checkForReload(){if(this.isSyncFailed){this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Sync failed. Please close this dialog and check the console for errors.",type:"error"}}));return}this.isSyncCompleteMessageReceived&&this.pendingWriteCount===0&&this.activeTransfers.size===0&&(this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All files received and written. Reloading...",type:"complete"}})),setTimeout(()=>window.location.reload(),1500))}destroy(){super.destroy(),this.activeTransfers.clear()}async getAllFiles(e){return ve._listAllFiles(e,"/")}}class vn{constructor(e){this.sync=e,this.syncMethodIndicatorEl=null,this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressActionButton=null,this.connectBtn=null,this.nameInput=null,this.autoConnectCheckbox=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                    <!-- THIS IS THE FIX: Added the missing peer count element -->
                    <strong>Peers:</strong> <span id="sync-peer-count">0</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="sync-all-files-btn" class="eruda-button">Send All Files</button>
                <button id="request-all-files-btn" class="eruda-button">Request from Peer...</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"),this.connectBtn=this.sync._container.querySelector("#sync-connect-btn"),this.nameInput=this.sync._container.querySelector("#sync-name-input"),this.autoConnectCheckbox=this.sync._container.querySelector("#sync-autoconnect-checkbox"))}bindEvents(){if(!this.sync._container){b.error("SyncUI.bindEvents: Container not set");return}this.nameInput.value=localStorage.getItem("thoughtform_sync_name")||"",this.autoConnectCheckbox.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",this.connectBtn.addEventListener("click",()=>{const s=this.sync.connectionState;if(s==="disconnected"||s==="error"){const i=this.nameInput.value.trim(),r=this.autoConnectCheckbox.checked;if(!i){this.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",i),localStorage.setItem("thoughtform_sync_auto_connect",r),this.sync.connect(i)}else this.sync.disconnect()});const e=this.sync._container.querySelector("#save-signaling-config");e&&e.addEventListener("click",()=>{const s=this.sync._container.querySelector("#signaling-server-url"),i=s?s.value.trim():"";i?(this.sync.signaling.updateSignalingServerUrl(i),this.addMessage(`Signaling server updated to: ${i}`)):this.addMessage("Please enter a valid signaling server URL.")});const t=this.sync._container.querySelector("#sync-all-files-btn"),n=this.sync._container.querySelector("#request-all-files-btn");t&&t.addEventListener("click",async()=>{this.showSyncProgressModal(),await this.sync.fileSync.syncAllFiles()}),n&&n.addEventListener("click",async()=>{const s=await S.selection({title:"Request Gardens from Peers",peerData:this.sync.connectedPeers});s?(b.log("User made selection:",s),this.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens(s)):b.log("Garden request cancelled by user.")})}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e);const n=this.sync._container.querySelector("#sync-peer-count");n&&(n.textContent=this.sync.connectedPeers.size)}updateControls(e){const t=e==="disconnected"||e==="error",n=e==="connecting";this.connectBtn&&(this.connectBtn.disabled=n,t?this.connectBtn.textContent="Connect":n?this.connectBtn.textContent="Connecting...":this.connectBtn.textContent="Disconnect"),this.nameInput&&(this.nameInput.disabled=!t),this.autoConnectCheckbox&&(this.autoConnectCheckbox.disabled=!t);const s=e==="connected-p2p"||e==="connected-signal";this.sync._container.querySelectorAll(".sync-actions button").forEach(i=>i.disabled=!s)}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let n="None",s="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),n="Connecting...",s="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),n="WebSocket (Fallback)",s="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),n="WebRTC (P2P)",s="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),n="Error",s="var(--base-accent-destructive)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=n,this.syncMethodIndicatorEl.style.color=s)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const n=document.createElement("div");n.textContent=e,t.appendChild(n),t.scrollTop=t.scrollHeight}}showMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="block")}hideMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="none")}showSyncProgressModal(){this.syncProgressModal&&this.syncProgressModal.destroy(),this.syncProgressModal=new S({title:"File Sync Progress"}),this.syncProgressModal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.syncProgressLogArea=this.syncProgressModal.content.querySelector("#sync-progress-log"),this.syncProgressFinalMessageArea=this.syncProgressModal.content.querySelector("#sync-progress-final-message"),this.syncProgressActionButton=null,this.syncProgressModal.show()}updateSyncProgress(e){if(!this.syncProgressModal||!this.syncProgressLogArea)return;const{message:t="No message",type:n="info"}=e.detail,s=document.createElement("div"),i=new Date().toLocaleTimeString();switch(s.textContent=`[${i}] ${t}`,s.style.marginBottom="5px",n){case"error":s.style.color="var(--base-accent-destructive)";break;case"complete":s.style.color="var(--base-accent-action)";break;case"cancelled":s.style.color="var(--base-accent-warning)";break;default:s.style.color="var(--color-text-primary)";break}this.syncProgressLogArea.appendChild(s),this.syncProgressLogArea.scrollTop=this.syncProgressLogArea.scrollHeight,["complete","error","cancelled"].includes(n)&&(this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.textContent=t,this.syncProgressFinalMessageArea.style.color=s.style.color),this.syncProgressActionButton&&this.syncProgressActionButton.remove(),(n==="error"||n==="cancelled")&&(this.syncProgressActionButton=this.syncProgressModal.addFooterButton("Close",()=>this.hideSyncProgressModal()),n==="error"&&this.syncProgressActionButton.classList.add("destructive")))}hideSyncProgressModal(){this.syncProgressModal&&(this.syncProgressModal.destroy(),this.syncProgressModal=null)}}const ie=5;class Cn{constructor(){this.name="sync",this._container=null,this.peerConnections=new Map,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.connectedPeers=new Map,this.signaling=new mn(this),this.fileSync=new bn(this),this.ui=new vn(this)}init(e){this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&this.fileSync.addEventListener("syncProgress",this.ui.updateSyncProgress.bind(this.ui));const t=localStorage.getItem("thoughtform_sync_auto_connect")==="true",n=localStorage.getItem("thoughtform_sync_name");t&&n&&this.connect(n)}async connect(e){this.connectionState!=="disconnected"&&this.connectionState!=="error"||(this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.joinSession(this.syncName))}disconnect(){this.signaling.destroy(),this.peerConnections.forEach(e=>e.close()),this.peerConnections.clear(),this.isConnected=!1,this.syncName=null,this.connectedPeers.clear(),this.updateConnectionState("disconnected","Disconnected")}createPeerConnection(e,t=!1){if(this.peerConnections.has(e))return this.peerConnections.get(e);if(this.peerConnections.size>=ie)return console.warn(`[SYNC-PC] Max connections (${ie}) reached. Not connecting to ${e.substring(0,8)}...`),null;const n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});return this.peerConnections.set(e,n),n.onicecandidate=s=>{s.candidate&&this.signaling.sendSignal({type:"candidate",candidate:s.candidate},e)},n.onconnectionstatechange=()=>{const s=n.connectionState;s==="connected"?this.updateConnectionState("connected-p2p",`P2P Connected (${this.peerConnections.size} peers)`):(s==="failed"||s==="disconnected"||s==="closed")&&this.handlePeerLeft(e)},t||(n.ondatachannel=s=>{this.setupDataChannel(e,s.channel)}),n}setupDataChannel(e,t){const n=this.peerConnections.get(e);n&&(n.dataChannel=t,t.onopen=()=>{this._announcePresence(e)},t.onmessage=async s=>{try{const i=JSON.parse(s.data);await this._handleIncomingSyncMessage(i,`P2P-${e.substring(0,4)}`)}catch(i){console.error("Error parsing sync message from DataChannel:",i)}},t.onclose=()=>this.handlePeerLeft(e),t.onerror=s=>{const i=s.error;i&&i.name==="OperationError"&&i.message.includes("User-Initiated Abort")?b.log(`Data channel for peer ${e.substring(0,8)} closed intentionally.`):console.error(`Data channel error with ${e.substring(0,8)}...:`,s)})}updateConnectionState(e,t){this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal",this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e))}_handleIncomingSyncMessage(e,t){this.signaling.handleIncomingMessage(e,t)}_announcePresence(e=null){if(!this.signaling.peerId)return;const t=localStorage.getItem("thoughtform_gardens"),n=t?JSON.parse(t):["home"];this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,gardens:n},e)}handlePeerIntroduction(e){if(!e.peerId||e.peerId===this.signaling.peerId)return;const t=!this.connectedPeers.has(e.peerId);this.connectedPeers.set(e.peerId,{gardens:e.gardens}),t&&this.addMessage(`Peer ${e.peerId.substring(0,8)}... discovered.`),this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} peer${this.connectedPeers.size===1?"":"s"})`)}handlePeerLeft(e){this.connectedPeers.has(e)&&(this.connectedPeers.delete(e),this.addMessage(`Peer ${e.substring(0,8)}... disconnected.`));const t=this.peerConnections.get(e);t&&t.signalingState!=="closed"?(t.close(),this.peerConnections.delete(e)):this.peerConnections.has(e)&&this.peerConnections.delete(e),this.peerConnections.size===0&&this.connectionState==="connected-p2p"?this.updateConnectionState("connected-signal","Connected to tracker, waiting for peers..."):this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} total)`)}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui&&this.ui.addMessage(e)}sendSyncMessage(e,t=null,n=null){this.signaling.sendSyncMessage(e,t,n)}show(){this._container&&(this._container.style.display="block")}hide(){this._container&&(this._container.style.display="none")}destroy(){this.disconnect(),this.fileSync&&this.fileSync.destroy()}}function W(o,e,t=!0){const n=e.map(s=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${s}" ${t?"checked":""}>
      <span>${s}</span>
    </label>
  `).join("");return`
    <div>
      <p>${o}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${n}
      </div>
    </div>
  `}function Sn(){const o=document.getElementById("eruda-container");if(!o)return;F.init({container:o,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1});const e=F.get("console");return e&&e.config.set("maxLogNum",2e3),window.thoughtform&&(window.thoughtform.eruda=F),setTimeout(()=>{const t=o.querySelector(".luna-tab-item")?.parentElement;t&&t.addEventListener("click",n=>{const s=n.target.closest(".luna-tab-item");if(s){const i=s.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,i)}})},500),setTimeout(()=>{const t=o.querySelector(".eruda-elements");if(!t)return;let n=!1;new MutationObserver(()=>{const i=t.style.display!=="none";if(i&&!n){const r=document.querySelector(".eruda-control > .eruda-icon-select");r&&(r.click(),r.click())}n=i}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),F.add({name:"Data",init(t){this._$el=t,t.html(`
        <div>
          <h2>Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">

          <hr>

          <h2>Danger Zone</h2>
          <p>
            <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
          </p>
        </div>
      `);const n=t.find("#export-btn")[0],s=t.find("#import-btn")[0],i=t.find("#import-file-input")[0],r=t.find("#clear-data-btn")[0];n.addEventListener("click",()=>{const a=localStorage.getItem("thoughtform_gardens"),c=a?JSON.parse(a):["home"],l=new S({title:"Select Gardens to Export"});l.updateContent(W("Choose which gardens to include in the export:",c));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(w=>w.value);l.destroy();const g=new S({title:"Exporting Gardens..."});g.updateContent("<p>Preparing export. Please wait...</p>");let m=!1,y="";g.addFooterButton("Cancel",()=>{m=!0,g.destroy(),console.log("Export cancelled by user.")}),g.show();try{await sn(u,w=>{if(m)throw new Error("Export cancelled by user.");console.log(w),y+=w+"<br>",g.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${y}</div>`)}),m||(g.clearFooter(),g.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>g.destroy(),3e3))}catch(w){m||(console.error("Export failed:",w.message),g.clearFooter(),g.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${w.message}</p>`),g.addFooterButton("Close",()=>g.destroy()))}};l.addFooterButton("Export Selected",h),l.addFooterButton("Cancel",()=>l.destroy()),l.show()}),s.addEventListener("click",()=>i.click()),i.addEventListener("change",async()=>{const a=i.files[0];if(!a)return;const c=new S({title:"Select Gardens to Import"});c.updateContent("Scanning zip file..."),c.show();try{const l=await on(a);if(l.length===0){c.updateContent("No valid gardens found in this zip file."),c.addFooterButton("Close",()=>c.destroy());return}c.updateContent(W(`Found ${l.length} garden(s). Select which to import:`,l));const d=c.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const h=async()=>{const u=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(m=>m.value);c.clearFooter(),c.updateContent("Starting import...");let g="";try{await rn(a,u,m=>{g+=`${m}<br>`,c.updateContent(g)})}catch(m){console.error("Import failed:",m),c.updateContent(`<strong>Error during import:</strong><br>${m.message}`),c.addFooterButton("Close",()=>c.destroy())}};c.addFooterButton("Import Selected",h),c.addFooterButton("Cancel",()=>c.destroy())}catch(l){console.error("Failed to read zip file:",l),c.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${l.message}`),c.addFooterButton("Close",()=>c.destroy())}finally{i.value=""}}),r.addEventListener("click",()=>{const a=localStorage.getItem("thoughtform_gardens"),c=a?JSON.parse(a):[],l=new S({title:"Clear Garden Data"});l.updateContent(W("Select gardens to permanently delete:",c,!1));const d=l.content;d.querySelector(".select-all-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!0),d.querySelector(".select-none-btn").onclick=()=>d.querySelectorAll(".garden-select-checkbox").forEach(g=>g.checked=!1);const h=async()=>{const g=Array.from(d.querySelectorAll(".garden-select-checkbox:checked")).map(y=>y.value);l.clearFooter(),l.updateContent("Starting deletion...");let m="";try{await an(g,y=>{m+=`${y}<br>`,l.updateContent(m)})}catch(y){console.error("Deletion failed:",y),l.updateContent(`<strong>Error during deletion:</strong><br>${y.message}`),l.addFooterButton("Close",()=>l.destroy()).classList.add("destructive")}};l.addFooterButton("Delete Selected",h).classList.add("destructive"),l.addFooterButton("Cancel",()=>l.destroy()),l.show()})},show(){this._$el.show()},hide(){this._$el.hide()}}),F.add({name:"Sync",init(t){this.sync=new Cn,this.sync.init(t.get(0))},show(){this.sync.show()},hide(){this.sync.hide()},destroy(){this.sync.destroy()}}),F.add({name:"AI",init(t){this._$el=t,t.html(`
        <div style="padding: 10px;">
          <h2>AI Configuration</h2>
          <div class="sync-panel">
            <h3>Google Gemini</h3>
            <div class="sync-row" style="margin-bottom: 10px;">
              <label for="gemini-api-key" class="sync-label">API Key:</label>
              <input type="password" id="gemini-api-key" class="eruda-input flex-grow">
            </div>
            <div class="sync-row">
              <label for="gemini-model-name" class="sync-label">Model Name:</label>
              <input type="text" id="gemini-model-name" class="eruda-input flex-grow" placeholder="e.g., gemini-2.5-flash">
            </div>
          </div>
          <div class="sync-panel" style="margin-top: 15px;">
            <h3>Content Proxy</h3>
            <div class="sync-row">
              <label for="proxy-url" class="sync-label">Proxy URL:</label>
              <input type="text" id="proxy-url" class="eruda-input flex-grow" placeholder="https://proxy.thoughtform.garden">
            </div>
          </div>
          <button id="ai-save-config" class="eruda-button" style="margin-top: 15px;">Save</button>
          <div id="ai-save-status" style="margin-top: 10px; color: var(--base-accent-action);"></div>
        </div>
      `);const n=t.find("#gemini-api-key")[0],s=t.find("#gemini-model-name")[0],i=t.find("#proxy-url")[0],r=t.find("#ai-save-config")[0],a=t.find("#ai-save-status")[0];n.value=localStorage.getItem("thoughtform_gemini_api_key")||"",s.value=localStorage.getItem("thoughtform_gemini_model_name")||"gemini-2.5-flash",i.value=localStorage.getItem("thoughtform_proxy_url")||"";const c=()=>{const l=n.value.trim(),d=s.value.trim()||"gemini-2.5-flash",h=i.value.trim();localStorage.setItem("thoughtform_gemini_api_key",l),localStorage.setItem("thoughtform_gemini_model_name",d),localStorage.setItem("thoughtform_proxy_url",h),window.thoughtform.ai?.loadConfig(),a.textContent="Configuration saved!",setTimeout(()=>{a.textContent=""},3e3)};n.addEventListener("input",c),s.addEventListener("input",c),i.addEventListener("input",c),r.addEventListener("click",c)},show(){this._$el.show()},hide(){this._$el.hide()}}),F}class En{constructor({gitClient:e,editor:t}){this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="search",this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],n=[];await Promise.all(t.map(async s=>{const i=new P(s),r=await this.editor.sidebar.listFiles(i,"/");for(const a of r)n.push({garden:s,path:a,searchString:`${s} ${a.substring(1)}`.toLowerCase()})})),this.crossGardenFileCache=n}async open(e="search"){if(!this.gitClient||!this.editor){console.error("CommandPalette cannot open: gitClient or editor is not initialized.");return}if(!this.isOpen){if(this.isOpen=!0,this.mode=e,this.mode==="execute"?(this.titleElement.textContent="Executing a File...",this.input.placeholder="Find a .js file to execute..."):(this.titleElement.textContent="Searching Files...",this.input.placeholder="Find file across all gardens..."),this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const t=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=t,this.input.disabled=!1,this.input.focus()}this.search("")}}close(){this.isOpen&&(this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown),this.editor&&this.editor.editorView&&this.editor.editorView.focus())}search(e){this.query=e.toLowerCase();let t=this.crossGardenFileCache;this.mode==="execute"&&(t=this.crossGardenFileCache.filter(n=>n.garden===this.gitClient.gardenName&&n.path.endsWith(".js"))),this.query?this.results=t.filter(n=>{let s=0,i=0;for(;s<this.query.length&&i<n.searchString.length;)this.query[s]===n.searchString[i]&&s++,i++;return s===this.query.length}).sort((n,s)=>{const i=n.garden===this.gitClient.gardenName,r=s.garden===this.gitClient.gardenName;return i&&!r?-1:!i&&r?1:0}):this.results=(this.mode==="execute"?t:t.filter(n=>n.garden===this.gitClient.gardenName)).slice(0,100),this.selectedIndex=0,this.renderResults()}renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="command-no-results">No matches found</li>';return}this.results.forEach((e,t)=>{const n=document.createElement("li");n.className="command-result-item",n.dataset.index=t;const s=e.path.startsWith("/")?e.path.substring(1):e.path;e.garden!==this.gitClient.gardenName?n.innerHTML=`<span class="command-path">${s}</span> <span class="command-garden">${e.garden}</span>`:n.textContent=s,t===this.selectedIndex&&(n.classList.add("active"),n.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(n)})}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(this.mode==="execute"){this.close();try{const n=await this.gitClient.readFile(t.path),i=await new Function("editor","git",n)(this.editor,this.gitClient);console.log(`Execution successful for ${t.path}. Result:`,i)}catch(n){console.error(`Execution failed for ${t.path}:`,n),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}else{if(t.garden!==this.gitClient.gardenName){const n=new URL(import.meta.url).pathname,s=n.lastIndexOf("/src/"),i=s>-1?n.substring(0,s):"";window.location.href=`${window.location.origin}${i}/${encodeURIComponent(t.garden)}#${encodeURIComponent(t.path)}`}else window.location.hash=`#${encodeURIComponent(t.path)}`;this.close()}}handleInput(e){this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".command-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}async function Ce(o,e){const t=o.pfs;let n=[];try{const s=await t.readdir(e);for(const i of s){if(i===".git")continue;const r=`${e==="/"?"":e}/${i}`;try{(await t.stat(r)).isDirectory()?n=n.concat(await Ce(o,r)):n.push(r)}catch{console.warn(`[Migration] Could not stat ${r}, skipping.`)}}}catch{console.warn(`[Migration] Could not read directory: ${e}.`)}return n}async function kn(){console.log("%cStarting Thoughtform data migration...","font-weight: bold; font-size: 1.2em;"),console.log("This will convert all files from the old JSON format to raw content. This only needs to be run once.");const o=localStorage.getItem("thoughtform_gardens"),e=o?JSON.parse(o):["home"];if(e.length===0){console.log("No gardens found to migrate.");return}let t=0,n=0;for(const s of e){console.log(`%cProcessing garden: "${s}"`,"font-weight: bold; color: blue;");const i=new P(s),r=await Ce(i,"/");if(r.length===0){console.log("No files found in this garden.");continue}for(const a of r){t++;try{const c=await i.readFile(a);let l;try{l=JSON.parse(c)}catch{console.log(`- ${a} is not in JSON format, skipping.`);continue}if(l&&typeof l.content<"u"){const d=l.content;c!==d?(console.log(`%c  MIGRATING: ${a}`,"color: green;"),await i.writeFile(a,d),n++):console.log(`- ${a} content is already raw, skipping.`)}else console.log(`- ${a} is valid JSON but not the old format, skipping.`)}catch(c){console.error(`%c  ERROR: Failed to process ${a}.`,"color: red;",c)}}}console.log("%cMigration complete!","font-weight: bold; font-size: 1.2em;"),console.log(`Checked ${t} files across ${e.length} garden(s).`),console.log(`Migrated ${n} files.`),console.log("You should now refresh the page.")}async function xn(o,e,t){const n=`https://generativelanguage.googleapis.com/v1beta/models/${e}:streamGenerateContent?key=${o}&alt=sse`,s={contents:[{parts:[{text:t}]}]};try{const i=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!i.ok){const c=await i.json();throw console.error("Gemini API Error:",c),new Error(`API request failed: ${c.error?.message||i.statusText}`)}const r=i.body.getReader(),a=new TextDecoder;return new ReadableStream({async pull(c){for(;;){const{done:l,value:d}=await r.read();if(l){c.close();break}const u=a.decode(d,{stream:!0}).split(`
`);for(const g of u)if(g.startsWith("data: "))try{const m=g.substring(5).trim(),w=JSON.parse(m)?.candidates?.[0]?.content?.parts?.[0]?.text;w&&c.enqueue(w)}catch{}}}})}catch(i){throw console.error("Failed to fetch from Gemini API:",i),i}}class $n{constructor(e){if(!e)throw new Error("Traversal helper requires a gitClient instance.");this.gitClient=e}extractWikilinks(e){const t=/\[\[([^\[\]]+?)\]\]/g,n=new Set;let s;for(;s=t.exec(e);){const i=s[1].split("|")[0].trim();n.add(i)}return Array.from(n)}async readLinkContent(e,t){let n=t,s=e;e.includes("#")&&([n,s]=e.split("#")),s.startsWith("/")||(s=`/${s}`);const i=n!==this.gitClient.gardenName?`${n}#${s}`:s,r=n!==this.gitClient.gardenName?new P(n):this.gitClient;try{return{content:await r.readFile(s),fullIdentifier:i,gardenName:n}}catch(a){return console.error(`[Agent] Error reading ${i}:`,a),{content:null,fullIdentifier:i,gardenName:null}}}}const oe=`You are a librarian's assistant, tasked with finding relevant information.
Your user has a goal. You have a list of potential documents (wikilinks) to investigate.
Your job is to quickly determine which of these documents are likely to contain information relevant to the user's goal.

**User Goal:**
{{goal}}

**Current Context Summary:**
{{context_summary}}

**Available Documents (Wikilinks):**
{{links}}

**Instructions:**
- Evaluate each link based on its name and the user's goal.
- You must respond ONLY with a valid JSON object.
- The JSON object should contain a single key, "relevant_links", which is an array of strings.
- The array should contain the exact names of the links you have deemed relevant.
- If no links are relevant, return an empty array.

**Example Response:**
{
  "relevant_links": ["/path/to/file.md", "/another/relevant-topic"]
}`,Pn=`You are a meticulous research assistant performing a self-critique.
You have been gathering information to answer a user's goal. Your task is to determine if you have enough information to form a reasonably confident and helpful answer.

**User Goal:**
{{goal}}

**Collected Context:**
---
{{context_buffer}}
---

**Instructions:**
-   Read the user's goal and the collected context.
-   Can you form a reasonably confident answer based on this context?
-   It's okay if the context is sparse, as long as you can use it to reason about the user's goal. For subjective questions (e.g., "is this a good idea?"), the user's own notes are often all the context you need.
-   Identify specific knowledge gaps only if the question is factual and the context is missing key information.
-   You must respond ONLY with a valid JSON object.

**JSON Schema:**
{
  "is_sufficient": boolean, // Can you provide a helpful, reasoned answer with this context?
  "gaps": string[] // If factual information is missing, list the key questions that remain. For subjective queries, this can be empty.
}

**Example Response (Insufficient for a factual question):**
{
  "is_sufficient": false,
  "gaps": ["The context explains what the gossip protocol is, but not how it's implemented in the server code.", "There are no details on the WebRTC handshake process."]
}

**Example Response (Sufficient for a subjective question):**
{
  "is_sufficient": true,
  "gaps": []
}`,Ln=`You are an AI assistant embedded in Thoughtform.Garden, a personal knowledge system. Your role is to act as a direct extension of the user's thought process.

**Core Instructions:**
-   **Be direct and concise.** Get straight to the point.
-   **Do not introduce yourself or refer to your role as an AI.** Avoid all conversational filler.
-   **Synthesize, don't just summarize.** Provide a direct answer or reflection based on the user's goal and the provided context.
-   You can form a reasoned perspective based on the user's own notes, especially for subjective questions.
-   If the context is truly insufficient for a factual question, state what is missing.
-   Format your answer using Markdown.

**User's Goal:**
{{goal}}

**Provided Context:**
---
{{context_buffer}}
---

**Final Answer:**`,re=2,ae=2;function Tn(o){const e=new Set,t=/(https?:\/\/[^\s"'`\]\)]+)|\[[^\]]+\]\((https?:\/\/[^\s"'`\]\)]+)\)/g;let n;for(;n=t.exec(o);){let s=n[2]||n[1];s&&(s=s.replace(/[.,;:`\])\s]+$/,""),e.add(s))}return e}async function Fn(o){try{const n=`${(localStorage.getItem("thoughtform_proxy_url")||"https://proxy.thoughtform.garden").replace(/\/$/,"")}?thoughtformgardenproxy=${encodeURIComponent(o)}`,s=await fetch(n);if(!s.ok){const r=await s.text();throw new Error(`Proxy request failed with status ${s.status}: ${r}`)}const i=await s.text();return`<context><website src="${o}">${i}</website></context>

---

`}catch(e){return console.error(`[Agent] Failed to fetch URL via proxy: ${o}`,e),`<context><website src="${o}">Error: Could not retrieve content. ${e.message}</website></context>

---

`}}class Mn{constructor({gitClient:e,aiService:t,startingFilePath:n}){this.gitClient=e,this.aiService=t,this.traversal=new $n(this.gitClient),this.startingFilePath=n}run(e){const t={controller:null,enqueue(s){this.controller?.enqueue(s)},close(){this.controller?.close()},error(s){this.controller?.error(s)}},n=new ReadableStream({start(s){t.controller=s}});return this._orchestrate(e,t).catch(s=>{console.error("[Agent] Orchestration failed:",s),t.enqueue(`**Agent Error:**
> ${s.message}`),t.close()}),n}async _orchestrate(e,t){console.log(`%c[Agent] Starting run with goal: "${e}"`,"font-weight: bold; color: blue;");let n="";const s=new Set;let i=0;const r=await this.gitClient.readFile(this.startingFilePath);n+=`## Context from ${this.startingFilePath}

${r}

---

`,s.add(this.startingFilePath),console.log(`[Agent] Reading starting file: ${this.startingFilePath}`);const a=new Set;for(;i<ae;){i++,console.log(`[Agent] Starting critique loop #${i}`),console.log(`[Agent] Traversing knowledge graph (Depth limit: ${re})...`);const h=await this._traverse(e,r,s,0,this.gitClient.gardenName);n+=h;const u=Tn(n+`
`+e),g=Array.from(u).filter(y=>!a.has(y));if(g.length>0){console.log(`[Agent] Found ${g.length} un-fetched external link(s). Triaging...`);const y=this._fillPrompt(oe,{goal:e,context_summary:n.substring(0,2e3)+"...",links:JSON.stringify(g)}),p=(await this._getJsonCompletion(y)).relevant_links||[];if(p.length>0){console.log(`%c[Agent] Found relevant external links: ${p.join(", ")}. Fetching sequentially...`,"color: green");for(const C of p){a.add(C);const v=await Fn(C);n+=v}}else console.log("[Agent] No relevant external links found by triage.")}console.log("[Agent] Critiquing gathered context...");const m=await this._critique(e,n);if(m.is_sufficient){console.log("%c[Agent] Critique passed. Context is sufficient.","color: green;");break}else console.warn("[Agent] Critique failed. Gaps identified:",m.gaps),i>=ae&&console.warn("[Agent] Max critique loops reached. Synthesizing with available info.")}console.log("%c[Agent] Synthesizing final answer...","font-weight: bold; color: blue;");const c=this._fillPrompt(Ln,{goal:e,context_buffer:n}),d=(await this.aiService.getCompletion(c)).getReader();for(;;){const{done:h,value:u}=await d.read();if(h)break;t.enqueue(u)}t.close(),console.log("%c[Agent] Run finished.","font-weight: bold;")}async _traverse(e,t,n,s,i){if(s>=re)return"";const r=this.traversal.extractWikilinks(t);if(r.length===0)return"";const a=r.filter(u=>!n.has(u));if(a.length===0)return"";console.log(`[Agent] Depth ${s} (in ${i}): Found unvisited links:`,a);const c=this._fillPrompt(oe,{goal:e,context_summary:t.substring(0,2e3)+"...",links:JSON.stringify(a)}),d=(await this._getJsonCompletion(c)).relevant_links||[];if(d.length===0)return console.log(`[Agent] Depth ${s}: No relevant links found by triage.`),"";console.log(`%c[Agent] Depth ${s}: Found relevant links: ${d.join(", ")}`,"color: green");let h="";for(const u of d){const{content:g,fullIdentifier:m,gardenName:y}=await this.traversal.readLinkContent(u,i);g!==null&&!n.has(m)&&(n.add(m),console.log(`[Agent] Reading content from: ${m}`),h+=`## Context from ${m}

${g}

---

`,h+=await this._traverse(e,g,n,s+1,y))}return h}async _critique(e,t){const n=this._fillPrompt(Pn,{goal:e,context_buffer:t});return this._getJsonCompletion(n)}async _getJsonCompletion(e){const n=(await this.aiService.getCompletion(e)).getReader();let s="";for(;;){const{done:i,value:r}=await n.read();if(i)break;s+=r}try{const i=s.match(/```json\n([\s\S]*?)\n```|({[\s\S]*})/);if(!i)throw new Error("No JSON object found in the LLM response.");const r=i[1]||i[2];return JSON.parse(r)}catch(i){throw console.error("[Agent] Failed to parse JSON from LLM response:",i),console.error("[Agent] Raw response was:",s),new Error("The AI assistant did not return valid JSON. Please try again.")}}_fillPrompt(e,t){let n=e;for(const[s,i]of Object.entries(t))n=n.replace(new RegExp(`{{${s}}}`,"g"),String(i));return n}}class In{constructor(){this.config={geminiApiKey:"",geminiModelName:"gemini-2.5-flash"},this.loadConfig()}loadConfig(){this.config.geminiApiKey=localStorage.getItem("thoughtform_gemini_api_key")||"";const e=localStorage.getItem("thoughtform_gemini_model_name");this.config.geminiModelName=e||"gemini-2.5-flash"}saveConfig(e,t){localStorage.setItem("thoughtform_gemini_api_key",e||""),localStorage.setItem("thoughtform_gemini_model_name",t||""),this.loadConfig()}async getCompletion(e){if(this.loadConfig(),!this.config.geminiApiKey)throw new Error("Gemini API key is not set. Please configure it in the AI dev tools panel.");return xn(this.config.geminiApiKey,this.config.geminiModelName,e)}async handleAiChatRequest(e){let t=-1;const n="🤖 Thinking...";try{const s=e.state.selection.main.head,i=e.state.doc.lineAt(s),r=e.state.doc.toString();let a=i.number;for(;a>1&&e.state.doc.line(a-1).text.trim().startsWith(">$");)a--;let c=i.number;for(;c<e.state.doc.lines&&e.state.doc.line(c+1).text.trim().startsWith(">$");)c++;const l=e.state.doc.line(a).from,d=e.state.doc.line(c).to;let h=e.state.sliceDoc(l,d);h=h.split(`
`).map(E=>E.trim().replace(/^>\$\s*/,"")).join(`
`);const u=/\[\[.+?\]\]/.test(r);let g;const m=d,y={changes:{from:m,insert:`

${n}`}};if(e.dispatch(y),t=m+2,u){console.log("[AI Service] Wikilinks detected. Invoking agent...");const E=window.thoughtform.editor;if(!E||!E.gitClient)throw new Error("Cannot find global editor or gitClient instance for agent.");g=new Mn({gitClient:E.gitClient,aiService:this,startingFilePath:E.filePath}).run(h)}else{console.log("[AI Service] No wikilinks detected. Using simple chat.");const E=`CONTEXT:
---
${r}
---

Based on the context above, respond to the following prompt:

${h}`;g=await this.getCompletion(E)}const w=g.getReader();let p=t;const C=`

<response>
`;for(e.dispatch({changes:{from:p,to:p+n.length,insert:C}}),p+=C.length;;){const{done:E,value:x}=await w.read();if(E)break;const N=x;e.dispatch({changes:{from:p,insert:N}}),p+=N.length}const v=`
</response>

>$ `;e.dispatch({changes:{from:p,insert:v},selection:{anchor:p+v.length}})}catch(s){console.error("AI Chat Error:",s),t!==-1&&e.dispatch({changes:{from:t,to:t+n.length,insert:`🚨 Error: ${s.message}`}})}}}function Nn(){return new In}window.Buffer=xe.Buffer;window.process={env:{}};window.thoughtform={ui:{},ai:Nn()};const Se=new URL(import.meta.url).pathname,ce=Se.lastIndexOf("/src/"),J=ce>-1?Se.substring(0,ce):"";let I=window.location.pathname.startsWith(J)?window.location.pathname.substring(J.length):window.location.pathname;I=I.replace(/^\/|\/$/g,"")||"home";I=decodeURIComponent(I);console.log(`Base Path: "${J}"`);console.log(`Loading garden: "${I}"`);const Ee=new P(I);en();Sn();window.thoughtform.runMigration=kn;window.onerror=function(o,e,t,n,s){return console.error("Caught global error:",o,s),window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1};window.onunhandledrejection=function(o){console.error("Caught unhandled promise rejection:",o.reason),window.thoughtform.ui.toggleDevtools?.(!0,"console")};const D=new En({gitClient:null,editor:null});window.thoughtform.commandPalette=D;const K=new O({target:"main",gitClient:Ee,commandPalette:D});window.thoughtform.editor=K;const An=setInterval(()=>{K.isReady&&(clearInterval(An),D.gitClient=Ee,D.editor=K)},100);
