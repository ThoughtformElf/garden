const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunk-vendor.js","assets/chunk-eruda.js"])))=>i.map(i=>d[i]);
import{Q as B,R as ge,U as Ae,t as w,V as D,W,X as Me}from"./chunk-vendor.js";import{S as Ne,s as Fe,m as De,L as q,j as fe,h as me,c as pe,y as Re,x as _e,a as Ge,b as Oe,D as $,C as R,d as ye,E as N,V as T,k as _,H as Be,e as we,R as I,f as J,W as qe,l as Ue,g as je,i as He,n as ze,o as We,p as Je,q as Ke,r as ve,t as Ve,u as Ye,v as Xe,w as Ze,z as Qe,A as et,B as tt,F as nt,G as st,I as it,J as ot,K as rt,M as at,N as ct,O as lt,P as dt,Q as ht,T as ut,U as gt}from"./chunk-codemirror.js";import{F as ft,g as P,i as ee}from"./chunk-git.js";import{c as mt}from"./chunk-gpt-tokenizer.js";import{e as A}from"./chunk-eruda.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();var be=!1;try{var U={};Object.defineProperty(U,"passive",{get(){return be=!0,!1}}),window.addEventListener("testpassive",null,U),window.removeEventListener("testpassive",null,U)}catch{}if(be){var pt=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(r,e,t){var n=t&&typeof t=="object",s=n?t.capture:t,i=n?Object.assign({},t):{};return i.passive===void 0&&(r==="touchstart"||r==="touchmove"||r==="wheel")&&(i.passive=!0),i.capture===void 0&&(i.capture=!!s),pt.call(this,r,e,i)}}class te{constructor({targetSelector:e,items:t,containerItems:n=[],itemSelector:s,dataAttribute:i}){if(this.targetSelector=e,this.items=t,this.containerItems=n,this.itemSelector=s,i){const o=i.replace("data-","");this.dataAttributeKey=o.replace(/-([a-z])/g,a=>a[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null;n?this.showMenu(e.clientX,e.clientY,this.items,n):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null,s=n?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,s,n||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,n,s){this.menuElement.innerHTML="",this.menuElement.style.display="block";const i=this.dataAttributeKey&&s.dataset[this.dataAttributeKey]?s.dataset[this.dataAttributeKey]:null;n.forEach(l=>{if(l.type==="separator"){const f=document.createElement("div");f.className="context-menu-separator",this.menuElement.appendChild(f);return}const g=document.createElement("button");g.className="context-menu-item",g.textContent=l.label,g.addEventListener("click",()=>{l.action(i),this.hideMenu()}),this.menuElement.appendChild(g)});const o=this.menuElement.offsetWidth,a=this.menuElement.offsetHeight,{innerWidth:c,innerHeight:h}=window;let u=e,d=t;e+o>c&&(u=c-o-5),t+a>h&&(d=h-a-5),this.menuElement.style.top=`${d}px`,this.menuElement.style.left=`${u}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class b{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const n=document.createElement("button");return n.textContent=e,n.addEventListener("click",t),this.footer.appendChild(n),n}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:n=""}){return new Promise(s=>{const i=new b({title:e}),o=`modal-input-${Date.now()}`,a=`
        <div class="modal-prompt">
          <label for="${o}">${t}</label>
          <input type="text" id="${o}" value="${n}">
        </div>
      `;i.updateContent(a);const c=i.content.querySelector(`#${o}`),h=()=>{s(c.value),i.destroy()},u=()=>{s(null),i.destroy()};c.addEventListener("keydown",d=>{d.key==="Enter"?(d.preventDefault(),h()):d.key==="Escape"&&u()}),i.addFooterButton("OK",h),i.addFooterButton("Cancel",u),i.show(),c.focus(),c.select()})}static confirm({title:e,message:t,okText:n="OK",cancelText:s="Cancel",destructive:i=!1}){return new Promise(o=>{const a=new b({title:e});a.updateContent(`<p>${t}</p>`);const c=()=>{o(!0),a.destroy()},h=()=>{o(!1),a.destroy()},u=a.addFooterButton(n,c);i&&u.classList.add("destructive"),a.addFooterButton(s,h),a.show()})}static choice({title:e,message:t,choices:n}){return new Promise(s=>{const i=new b({title:e});i.updateContent(t),n.forEach(a=>{const c=i.addFooterButton(a.text,()=>{s(a.id),i.destroy()});a.class&&c.classList.add(a.class)});const o=a=>{a.key==="Escape"&&(s(null),i.destroy(),document.removeEventListener("keydown",o))};document.addEventListener("keydown",o),i.show()})}static selection({title:e,peerData:t,okText:n="Request"}){return new Promise(s=>{if(t.size===0){const h=new b({title:"No Peers Found"});h.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),h.addFooterButton("OK",()=>{h.destroy(),s(null)}),h.show();return}const i=new b({title:e});let o='<div class="peer-selection-container">';t.forEach((h,u)=>{o+=`
          <div class="peer-group" data-peer-id="${u}">
            <strong class="peer-title">Peer: ${h.id}</strong>
            <div class="garden-checkbox-list">
              ${h.gardens.map(d=>`
                <label>
                  <input type="checkbox" class="garden-select-checkbox" value="${d}">
                  <span>${d}</span>
                </label>
              `).join("")}
            </div>
          </div>
        `}),o+="</div>",i.updateContent(o);const a=()=>{const h={};i.content.querySelectorAll(".peer-group").forEach(u=>{const d=u.dataset.peerId,l=Array.from(u.querySelectorAll(".garden-select-checkbox:checked")).map(g=>g.value);l.length>0&&(h[d]=l)}),s(Object.keys(h).length>0?h:null),i.destroy()},c=()=>{s(null),i.destroy()};i.addFooterButton(n,a),i.addFooterButton("Cancel",c),i.show()})}static sendSelection({title:e,peerData:t,gardenData:n,okText:s="Send"}){return new Promise(i=>{if(t.size===0){const l=new b({title:"No Peers Found"});l.updateContent("<p>There are no other peers currently connected to this sync session.</p>"),l.addFooterButton("OK",()=>{l.destroy(),i(null)}),l.show();return}const o=new b({title:e}),a=(l,g,f=!1)=>{const m=l.replace(/\s/g,""),y=g.map(p=>{const v=f?p.id:p,S=f?p.id:p;return`
            <label>
              <input type="checkbox" class="modal-select-checkbox" data-group="${m}" value="${v}">
              <span>${S}</span>
            </label>
          `}).join("");return`
          <div class="modal-selection-group" id="group-${m}">
            <strong>${l}</strong>
            <div class="modal-selection-controls">
              <button type="button" class="select-all-btn">Select All</button>
              <button type="button" class="select-none-btn">Deselect All</button>
            </div>
            <div class="modal-selection-list">${y}</div>
          </div>
        `},c=Array.from(t.values());let h='<div class="modal-send-container">';h+=a("Gardens to Send",n),h+=a("Peers to Receive",c,!0),h+="</div>",o.updateContent(h),o.content.querySelectorAll(".modal-selection-group").forEach(l=>{l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".modal-select-checkbox").forEach(g=>g.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".modal-select-checkbox").forEach(g=>g.checked=!1)});const u=()=>{const l=Array.from(o.content.querySelectorAll("#group-GardenstoSend .modal-select-checkbox:checked")).map(f=>f.value),g=Array.from(o.content.querySelectorAll("#group-PeerstoReceive .modal-select-checkbox:checked")).map(f=>f.value);l.length>0&&g.length>0?i({gardens:l,peers:g}):i(null),o.destroy()},d=()=>{i(null),o.destroy()};o.addFooterButton(s,u),o.addFooterButton("Cancel",d),o.show()})}}function yt(r){const e={};r.sort((t,n)=>t.path.localeCompare(n.path));for(const{path:t,isDirectory:n}of r){const s=t.substring(1).split("/");let i=e;for(let o=0;o<s.length;o++){const a=s[o];o===s.length-1?i[a]||(i[a]=n?{type:"folder",path:t,children:{}}:{type:"file",path:t}):(i[a]||(i[a]={type:"folder",path:"/"+s.slice(0,o+1).join("/"),children:{}}),i[a].children||(i[a].children={}),i=i[a].children)}}return e}function Ce(r,e,t,n,s){const i=Object.keys(r).sort((a,c)=>{const h=r[a],u=r[c];return h.type==="folder"&&u.type!=="folder"?-1:h.type!=="folder"&&u.type==="folder"?1:a.localeCompare(c,void 0,{numeric:!0})});let o="";for(const a of i){const c=r[a],h=`padding-left: ${s*20}px;`;if(c.type==="folder"){const u=n.has(c.path);o+=`
                <li class="file-tree-item is-folder ${u?"expanded":""}" data-path="${c.path}" style="${h}" draggable="true">
                    <span class="folder-name">${a}</span>
                </li>
                <ul class="nested-list ${u?"active":""}">
                    ${Ce(c.children,e,t,n,s+1)}
                </ul>
            `}else{const u=e.get(c.path)||"unmodified",d=[];c.path===t&&d.push("active"),o+=`
                <li class="file-tree-item is-file ${d.join(" ")}" data-path="${c.path}" style="${h}" draggable="true">
                    <a href="#" class="status-${u}" data-filepath="${c.path}">${a}</a>
                </li>
            `}}return o}const wt={async renderFiles(r){try{const e=await window.thoughtform.workspace.getActiveGitClient(),t=window.thoughtform.workspace.getActiveEditor();if(!e||!t){this.contentContainer.innerHTML="";return}const n=await this.listAllPaths(e,"/"),s=new Map;for(const[d,l,g]of r)l!==g&&s.set(`/${d}`,"modified");const i=t.filePath,o=yt(n),a=sessionStorage.getItem(`expanded_folders_${e.gardenName}`),c=new Set(a?JSON.parse(a):[]);if(i){const d=i.split("/").filter(g=>g);let l="";for(let g=0;g<d.length-1;g++)l+=`/${d[g]}`,c.add(l)}this.contentContainer.innerHTML=`<ul class="file-tree-root">${Ce(o,s,i,c,0)}</ul>`,this.contentContainer.querySelectorAll(".is-folder").forEach(d=>{d.addEventListener("click",l=>{if(l.target.closest("a"))return;const g=d.dataset.path,f=d.nextElementSibling,m=sessionStorage.getItem(`expanded_folders_${e.gardenName}`),y=new Set(m?JSON.parse(m):[]);d.classList.toggle("expanded"),f.classList.toggle("active"),d.classList.contains("expanded")?y.add(g):y.delete(g),sessionStorage.setItem(`expanded_folders_${e.gardenName}`,JSON.stringify(Array.from(y)))})}),this.contentContainer.querySelectorAll("a[data-filepath]").forEach(d=>{d.addEventListener("click",l=>{l.preventDefault();const g=l.target.dataset.filepath,f=e.gardenName;window.thoughtform.workspace.openFile(f,g)})});let h=null;const u=this;this.contentContainer.addEventListener("dragstart",d=>{const l=d.target.closest(".file-tree-item");l&&(h=l,d.dataTransfer.setData("text/plain",l.dataset.path),d.dataTransfer.effectAllowed="move",setTimeout(()=>l.classList.add("is-dragging"),0))}),this.contentContainer.addEventListener("dragend",()=>{h&&h.classList.remove("is-dragging"),h=null,this.contentContainer.querySelectorAll(".drop-target").forEach(d=>d.classList.remove("drop-target"))}),this.contentContainer.addEventListener("dragover",d=>{d.preventDefault(),this.contentContainer.querySelectorAll(".drop-target").forEach(g=>g.classList.remove("drop-target"));const l=d.target.closest(".file-tree-item.is-folder");if(l&&h&&l!==h&&!l.dataset.path.startsWith(h.dataset.path+"/"))l.classList.add("drop-target");else if(!l){const g=d.target.closest(".file-tree-root");g&&g.classList.add("drop-target")}}),this.contentContainer.addEventListener("dragleave",d=>d.target.closest(".drop-target")?.classList.remove("drop-target")),this.contentContainer.addEventListener("drop",async d=>{d.preventDefault();const l=d.dataTransfer.getData("text/plain"),g=d.target.closest(".drop-target");if(this.contentContainer.querySelectorAll(".drop-target").forEach(f=>f.classList.remove("drop-target")),g&&h){const f=g.classList.contains("file-tree-root")?"/":g.dataset.path;await u.handleFileMove(l,f)}})}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleFileMove(r,e){const t=await window.thoughtform.workspace.getActiveGitClient(),n=r.split("/").pop(),s=e==="/"?`/${n}`:`${e}/${n}`;if((r.substring(0,r.lastIndexOf("/"))||"/")===e)return;if(e.startsWith(r+"/")){await this.showAlert({title:"Invalid Move",message:"Cannot move a folder into one of its own sub-folders."});return}try{await t.pfs.stat(s),await this.showAlert({title:"Move Failed",message:`An item named "${n}" already exists in the destination folder.`});return}catch(a){if(a.code!=="ENOENT")throw a}if(await this.showConfirm({title:"Move Item?",message:"This will move the item to the new location. <br><br><strong>Warning:</strong> This will NOT automatically update wikilinks, which may cause them to break.",okText:"Move Item"}))try{await t.pfs.rename(r,s),await this.refresh()}catch(a){console.error("Error moving file:",a),await this.showAlert({title:"Error",message:"Failed to move the item. Check the console for details."})}},async handleNewFile(){await window.thoughtform.workspace.getActiveEditor()?.newFile()},async handleNewFolder(){const r=await window.thoughtform.workspace.getActiveGitClient(),e=await b.prompt({title:"New Folder",label:'Enter new folder name (e.g., "projects/new-topic"):'});if(!e||!e.trim())return;const t=`/${e.trim().replace(/\/$/,"")}`;try{const s=(await r.pfs.stat(t)).isDirectory()?"folder":"file";await this.showAlert({title:"Creation Failed",message:`A ${s} named "${e}" already exists.`});return}catch(n){if(n.code!=="ENOENT"){console.error("Error checking for folder:",n),await this.showAlert({title:"Error",message:"An unexpected error occurred."});return}}try{await r.ensureDir(t),await this.refresh()}catch(n){console.error("Error creating folder:",n),await this.showAlert({title:"Error",message:`Could not create folder: ${n.message}`})}},async handleRename(r){const e=await window.thoughtform.workspace.getActiveGitClient(),n=(await e.pfs.stat(r)).isDirectory()?"Folder":"File",s=await b.prompt({title:`Rename ${n}`,label:`Enter new name for ${r.substring(1)}:`,defaultValue:r.substring(1)});if(!s||s===r.substring(1))return;const i=`/${s}`;try{const c=(await e.pfs.stat(i)).isDirectory()?"folder":"file";await this.showAlert({title:"Rename Failed",message:`A ${c} named "${s}" already exists.`});return}catch(a){if(a.code!=="ENOENT"){console.error("Error checking for file:",a),await this.showAlert({title:"Error",message:"An unexpected error occurred."});return}}const o=r+`.__rename__.${Date.now()}`;try{await e.pfs.rename(r,o);try{const a=i.substring(0,i.lastIndexOf("/"));a&&await e.ensureDir(a),await e.pfs.rename(o,i)}catch(a){throw console.error(`Error during rename phase 2/3 for ${i}:`,a),await e.pfs.rename(o,r),a}await this.refresh()}catch(a){console.error("Error renaming file:",a),await this.showAlert({title:"Error",message:`Failed to rename file: ${a.message}`}),await this.refresh()}},async handleDuplicate(r){await window.thoughtform.workspace.getActiveEditor()?.duplicateFile(r)},async handleDelete(r){const e=await window.thoughtform.workspace.getActiveGitClient(),t=await e.pfs.stat(r),n=t.isDirectory()?"folder":"file";if(await this.showConfirm({title:`Delete ${n}`,message:`Are you sure you want to permanently delete the ${n} "${r}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{window.thoughtform.events.publish("file:delete",{path:r,isDirectory:t.isDirectory()}),await e.rmrf(r),await this.refresh()}catch(i){console.error(`Error deleting ${n}:`,i),await this.showAlert({title:"Error",message:`Failed to delete ${n}.`})}}},Se=`# Thoughtform.Garden Interface Settings
#
# This file controls the behavior of the editor's interface.
# You can override this file by creating 'settings/interface.yml' in your current garden.

# editingMode: Set the default keybinding mode.
# Options: 'vim', 'default'
editingMode: 'default'`,Ee=`# Thoughtform.Garden Keymap Settings
#
# This file maps keyboard shortcuts to executable script files.
# The 'run' path is relative to the garden where this file resides,
# or can be a full path like 'Settings#keymaps/some-script.js'.

- key: "Mod-["
  run: "keymaps/toggle-sidebar.js"

- key: "Mod-Enter"
  run: "keymaps/navigate-or-prompt.js"

- key: "Mod-\`"
  run: "keymaps/toggle-devtools.js"

- key: "Mod-p"
  run: "keymaps/search-files.js"

- key: "Mod-Shift-p"
  run: "keymaps/execute-command.js"

- key: "Mod-Shift-d"
  run: "keymaps/duplicate-current-file.js"

- key: "Mod-Alt-n"
  run: "keymaps/new-file.js"

- key: "Alt-ArrowLeft"
  run: "keymaps/browser-back.js"

- key: "Alt-ArrowRight"
  run: "keymaps/browser-forward.js"

- key: "Mod-\\\\"
  run: "keymaps/split-pane-vertical.js"

- key: "Mod-Shift-\\\\"
  run: "keymaps/split-pane-horizontal.js"

- key: "Alt-Shift-ArrowRight"
  run: "keymaps/select-next-pane.js"

- key: "Alt-Shift-ArrowLeft"
  run: "keymaps/select-prev-pane.js"

- key: "Alt-Shift-ArrowDown"
  run: "keymaps/move-pane-down.js"

- key: "Alt-Shift-ArrowUp"
  run: "keymaps/move-pane-up.js"

- key: "Alt-Shift-x"
  run: "keymaps/close-pane.js"`,vt=`// This is the primary action script for the "Mod-Enter" keyboard shortcut.
// It intelligently determines what to do based on the cursor's context.

// --- CONTEXT GLOBALS ---
// 'editor': The global editor instance, passed by the executor.
// 'git': The git client for the current garden, passed by the executor.
// 'event': Null for keymap-triggered events.

const view = editor.editorView;
const pos = view.state.selection.main.head;
const line = view.state.doc.lineAt(pos);

// --- 1. AI Prompt Execution ---
// If the cursor is on a line that is an AI prompt, execute the AI request.
if (line.text.trim().startsWith('>$')) {
  console.log('[navigate-or-prompt] Triggering AI request.');
  window.thoughtform.ai.handleAiChatRequest(view);
  return; // Stop execution
}

// --- 2. Link Navigation ---
// Check for any type of link at the cursor's position.
const linkRegexes = [
  { type: 'wikilink', regex: /\\[\\[([^\\[\\]]+?)\\]\\]/g },
  { type: 'markdown', regex: /\\[[^\\]]*\\]\\(([^)]+)\\)/g },
  { type: 'naked', regex: /(https?:\\/\\/[^\\s]+)|(www\\.[^\\s]+)/g },
];

for (const { type, regex } of linkRegexes) {
  let match;
  while ((match = regex.exec(line.text))) {
    const start = line.from + match.index;
    const end = start + match[0].length;

    if (pos >= start && pos <= end) {
      console.log(\`[navigate-or-prompt] Found \${type} link. Navigating.\`);
      if (type === 'wikilink') {
        // Use the new, clean method on the editor instance
        editor.navigateTo(match[1]);
      } else {
        let url = type === 'markdown' ? match[1] : match[0];
        if (url.startsWith('www.')) url = \`https://\${url}\`;
        window.open(url, '_blank', 'noopener,noreferrer');
      }
      return; // Stop execution
    }
  }
}

// --- 3. Fallback: Insert New Prompt ---
// If no other context was matched, insert a new prompt at the end of the document.
console.log('[navigate-or-prompt] No other context found. Inserting new prompt.');
const doc = view.state.doc;
const endOfDoc = doc.length;
let insertText = \`\\n\\n>$ \`;

if (endOfDoc > 1) {
    const lastTwoChars = doc.sliceString(endOfDoc - 2, endOfDoc);
    if (lastTwoChars === '\\n\\n') {
        insertText = \`>$ \`;
    } else if (lastTwoChars.endsWith('\\n')) {
        insertText = \`\\n>$ \`;
    }
}

view.dispatch({
  changes: { from: endOfDoc, insert: insertText },
  selection: { anchor: endOfDoc + insertText.length },
  effects: view.constructor.scrollIntoView(endOfDoc + insertText.length, { y: "end" })
});`,bt=`// This script toggles the visibility of the main sidebar.
window.thoughtform.ui.toggleSidebar?.();`,Ct=`// This script toggles the visibility of the Eruda devtools panel.
window.thoughtform.ui.toggleDevtools?.();`,St=`// This script opens the command palette in "search" mode for fuzzy file finding.
window.thoughtform.commandPalette.open('search');`,Et=`// This script opens the command palette in "execute" mode for running commands.
window.thoughtform.commandPalette.open('execute');`,kt=`// This script navigates back in the browser's history.
window.history.back();`,xt=`// This script navigates forward in the browser's history.
window.history.forward();`,Pt=`// This script duplicates the currently active file in the editor.
// It will trigger a modal to ask for the new file name.

// --- CONTEXT GLOBALS ---
// 'editor': The global editor instance.
// 'git': The git client for the current garden.
// 'event': Null for keymap-triggered events.

if (editor && editor.filePath) {
  editor.duplicateFile(editor.filePath);
} else {
  console.error('[Duplicate Keymap] Could not find editor or current file path.');
}`,$t=`// This script creates a new file by calling the editor's core functionality.
// It will trigger a modal to ask for the file name.

// --- CONTEXT GLOBALS ---
// 'editor': The global editor instance, passed by the executor.
// 'git': The git client for the current garden, passed by the executor.
// 'event': Null for keymap-triggered events.

if (editor) {
  editor.newFile();
} else {
  console.error('[New File Keymap] Could not find editor instance.');
}`,Tt=`// This script runs automatically whenever a new file is created.
//
// The 'event' variable is available in this script's scope
// and contains data about the event that triggered the hook.
// For 'file:create', it looks like: { path: '/path/to/new-file.md' }

console.log('HOOK::', window.location.origin + '/Settings#hooks/create.js');
console.log('Created file:', event.path);`,Lt=`// This script runs automatically when the application finishes loading.
//
// The 'event' variable is available in this script's scope.
// For 'app:load', it is null.

console.log('HOOK::', window.location.origin + '/Settings#hooks/load.js');`,It=`// This script runs automatically whenever a file or folder is deleted.
//
// The 'event' variable is available in this script's scope
// and contains data about the event that triggered the hook.
// For 'file:delete', it looks like: { path: '/path/to/deleted-item', isDirectory: false }

console.log('HOOK::', window.location.origin + '/Settings#hooks/delete.js');
console.log('Deleted item:', event.path, 'isDirectory:', event.isDirectory);`,At=`// This script splits the currently active pane vertically.

const workspace = window.thoughtform.workspace;
if (workspace && workspace.activePaneId) {
  workspace.splitPane(workspace.activePaneId, 'vertical');
}`,Mt=`// This script splits the currently active pane horizontally.

const workspace = window.thoughtform.workspace;
if (workspace && workspace.activePaneId) {
  workspace.splitPane(workspace.activePaneId, 'horizontal');
}`,Nt=`// This script changes focus to the next available pane.
window.thoughtform.workspace.selectNextPane();`,Ft=`// This script changes focus to the previous available pane.
window.thoughtform.workspace.selectPrevPane();`,Dt=`// This script swaps the active pane with its previous sibling.
window.thoughtform.workspace.movePaneUp();`,Rt=`// This script swaps the active pane with its next sibling.
window.thoughtform.workspace.movePaneDown();`,_t=`// This script closes the currently active pane.
window.thoughtform.workspace.closeActivePane();`,ke=[["/interface.yml",Se],["/keymaps.yml",Ee],["/keymaps/navigate-or-prompt.js",vt],["/keymaps/toggle-sidebar.js",bt],["/keymaps/toggle-devtools.js",Ct],["/keymaps/search-files.js",St],["/keymaps/execute-command.js",Et],["/keymaps/browser-back.js",kt],["/keymaps/browser-forward.js",xt],["/keymaps/duplicate-current-file.js",Pt],["/keymaps/new-file.js",$t],["/keymaps/split-pane-vertical.js",At],["/keymaps/split-pane-horizontal.js",Mt],["/keymaps/select-next-pane.js",Nt],["/keymaps/select-prev-pane.js",Ft],["/keymaps/move-pane-up.js",Dt],["/keymaps/move-pane-down.js",Rt],["/keymaps/close-pane.js",_t],["/hooks/create.js",Tt],["/hooks/load.js",Lt],["/hooks/delete.js",It]];class k{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new ft(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),this.registerNewGarden();return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{if(await P.init({fs:this.fs,dir:"/",defaultBranch:"main"}),this.gardenName==="Settings")await this.populateDefaultSettings();else{const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/home",e,"utf8")}this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}async populateDefaultSettings(){console.log('[Git] Populating "Settings" garden with default files...'),await this.ensureDir("/keymaps"),await this.ensureDir("/hooks");for(const[e,t]of ke)try{await this.pfs.writeFile(e,t,"utf8")}catch(n){console.error(`[Git] Failed to write default setting file: ${e}`,n)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async rmrf(e){try{if((await this.pfs.stat(e)).isDirectory()){const n=await this.pfs.readdir(e);for(const s of n)await this.rmrf(`${e}/${s}`);await this.pfs.rmdir(e)}else await this.pfs.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async clearWorkdir(){const e=await this.pfs.readdir("/");for(const t of e)t!==".git"&&await this.rmrf(`/${t}`)}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{if(!(await this.pfs.stat(n)).isDirectory())throw new Error(`A file exists at '${n}' which conflicts with the desired directory structure.`)}catch(i){if(i.code==="ENOENT")try{await this.pfs.mkdir(n)}catch(o){if(o.code!=="EEXIST")throw o}else throw i}}}async listAllFilesForClone(e="/"){let t=[];const n=await this.pfs.readdir(e);for(const s of n){const i=`${e==="/"?"":e}/${s}`;(await this.pfs.stat(i)).isDirectory()?t=t.concat(await this.listAllFilesForClone(i)):t.push(i)}return t}async stage(e){const t=e.startsWith("/")?e.substring(1):e,s=(await this.getStatuses()).find(o=>o[0]===t);if(!s){console.error(`Could not find status for "${t}". Cannot stage.`);return}s[2]===0?await P.remove({fs:this.fs,dir:"/",filepath:t}):await P.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await P.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){const t=e.startsWith("/")?e.substring(1):e;try{const s=(await this.getStatuses()).find(o=>o[0]===t);if(!s)return;s[1]===0?(await this.pfs.unlink(e),window.thoughtform.events.publish("file:delete",{path:e,isDirectory:!1})):await P.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0})}catch(n){console.error(`[discard] An error occurred for ${e}:`,n)}}async commit(e){const t=await P.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async push(e,t,n){return await P.push({fs:this.fs,http:ee,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t})})}async pull(e,t,n){return await P.pull({fs:this.fs,http:ee,dir:"/",url:e,onProgress:s=>n(`${s.phase}: ${s.loaded}/${s.total}`),onAuth:()=>({username:t}),author:{name:"User",email:"user@thoughtform.garden"},singleBranch:!0,fastForward:!0})}async log(){try{return await P.log({fs:this.fs,dir:"/",depth:20})}catch{return[]}}async getChangedFiles(e){try{const{commit:t}=await P.readCommit({fs:this.fs,dir:"/",oid:e}),n=t.parent[0];if(!n)return(await P.listFiles({fs:this.fs,dir:"/",ref:e})).map(i=>`/${i}`);const s=[];return await P.walk({fs:this.fs,dir:"/",trees:[P.TREE({ref:n}),P.TREE({ref:e})],map:async(i,[o,a])=>{if(i===".")return;const c=o&&await o.oid(),h=a&&await a.oid();if(c===h)return;(a?await a.type():await o.type())==="blob"&&s.push(`/${i}`)}}),s}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const n=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const s=e==="HEAD"?await P.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:i}=await P.readBlob({fs:this.fs,dir:"/",oid:s,filepath:n});return new TextDecoder().decode(i)}catch(s){return s.name==="NotFoundError"?"":null}}async readFile(e){const t=e.startsWith("/")?e:`/${e}`;try{return await this.pfs.readFile(t,"utf8")}catch{return`// "${t.substring(1)}" does not exist yet, type anywhere to create it.`}}async readFileAsBuffer(e){const t=e.startsWith("/")?e:`/${e}`;try{return await this.pfs.readFile(t)}catch{return null}}async writeFile(e,t){const n=e.startsWith("/")?e:`/${e}`,s=typeof t=="string"?"utf8":void 0;try{const i=n.substring(0,n.lastIndexOf("/"));i&&await this.ensureDir(i),await this.pfs.writeFile(n,t,s),this.markGardenAsDirty(!0)}catch(i){throw console.error(`[Git.writeFile] Failed to write to ${n}:`,i),i}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),n=t?JSON.parse(t):[],s=n.indexOf(this.gardenName);e&&s===-1?n.push(this.gardenName):!e&&s!==-1&&n.splice(s,1),localStorage.setItem("dirty_gardens",JSON.stringify(n))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return P.statusMatrix({fs:this.fs,dir:"/"})}}const Gt={async renderGardens(){try{const r=localStorage.getItem("thoughtform_gardens"),e=r?JSON.parse(r):[],t=localStorage.getItem("dirty_gardens"),n=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let s="";for(const i of e.sort()){const o=decodeURIComponent(i),a=n.has(o),c=`/${encodeURIComponent(i)}`,h=this.gitClient.gardenName===o,u=[];h&&u.push("active"),a&&u.push("status-modified"),s+=`<li><a href="${c}" class="${u.join(" ")}" data-garden-name="${i}">${o}</a></li>`}this.contentContainer.innerHTML=`<ul>${s}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(i=>{i.addEventListener("click",o=>{this.gitClient.gardenName!==o.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(r){console.error("Error rendering garden list:",r),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const r=await b.prompt({title:"New Garden",label:"Enter new garden name:"});if(!r||!r.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(r)){await this.showAlert({title:"Garden Exists",message:`Garden "${r}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(r)}`},async handleDuplicateGarden(r){if(!r)return;const t=`${decodeURIComponent(r)} (copy)`,n=await b.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!n||!n.trim()||n===r)return;const s=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const i=new k(r),o=new k(n);await o.initRepo();const a=await this.listFiles(i,"/");let c=0;for(const h of a){c++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${c} of ${a.length}:<br>${h.substring(1)}</p>`;const u=await i.readFile(h);await o.writeFile(h,u)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(n)}`)},500)}catch(i){console.error("Error duplicating garden:",i),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=s}},100)},async handleDeleteGarden(r){if(!r)return;if(r==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${r}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];n=n.filter(i=>i!==r),localStorage.setItem("thoughtform_gardens",JSON.stringify(n));const s=`garden-fs-${r}`;await new Promise((i,o)=>{const a=indexedDB.deleteDatabase(s);a.onsuccess=()=>i(),a.onerror=c=>o(c.target.error),a.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),o(new Error("Deletion blocked"))}}),this.gitClient.gardenName===r?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},Ot={async renderGitView(){try{const[r,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],n=[];for(const[d,l,g,f]of r){const m=`/${d}`;(l!==g||l!==f)&&(g===f?t.push({filepath:m,status:"staged"}):n.push({filepath:m,status:"unstaged"}))}const s=this.renderRemoteSection(),i=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,o=this.renderFileSection("Changes",n,!1),a=this.renderFileSection("Staged Changes",t,!0),c=this.renderHistorySection(e),h=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${s}
          ${i}
          ${a}
          ${o}
          ${c}
        </div>
      `;const u=this.contentContainer.querySelector("#git-commit-message");u&&(u.value=h),this.addGitViewListeners(),this.updateCommitButtonState()}catch(r){console.error("Error rendering Git view:",r),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderRemoteSection(){const r=this.getRemoteConfig();return`
      <div class="git-remote-section">
        <h3>Remote</h3>
        <input type="text" id="git-remote-url" placeholder="Remote URL" value="${r.url}">
        <input type="password" id="git-remote-auth" placeholder="Username or Token" value="${r.auth}">
        <div class="git-remote-actions">
          <button id="git-pull-button">Pull</button>
          <button id="git-push-button">Push</button>
        </div>
        <div class="git-remote-log" id="git-remote-log">Ready</div>
      </div>
    `},renderFileSection(r,e,t){const n=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let s="";return e.length>0?s=e.map(o=>{const a=o.filepath.startsWith("/")?o.filepath.substring(1):o.filepath;return`
          <li class="git-file-item ${this.editor.filePath===o.filepath?"active":""}" data-filepath="${o.filepath}">
            <span class="git-file-path">${a}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${n}
            </span>
          </li>
        `}).join(""):s=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${r} (${e.length})</h3>
        <ul class="git-file-list">
          ${s}
        </ul>
      </div>
    `},renderHistorySection(r){let e="";return r.length>0?e=r.map(t=>{const n=t.commit.message.split(`
`)[0],s=t.oid.substring(0,7),i=t.commit.author.name,o=new Date(t.commit.author.timestamp*1e3).toLocaleString(),a=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${a}" data-author="${i}" data-date="${o}">
                <div class="git-history-header">
                  <span class="git-history-message">${n}</span>
                  <span class="git-history-oid">${s}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const r=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!r||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,n=r.value.trim().length>0;e.disabled=!(t&&n)},getRemoteConfig(){const r=`thoughtform_remote_config_${this.gitClient.gardenName}`;try{const e=localStorage.getItem(r);if(e)return JSON.parse(e)}catch(e){console.error("Could not parse remote config from localStorage",e)}return{url:"",auth:""}},saveRemoteConfig(r,e){const t=`thoughtform_remote_config_${this.gitClient.gardenName}`,n={url:r,auth:e};localStorage.setItem(t,JSON.stringify(n))},addGitViewListeners(){const r=this.contentContainer.querySelector("#git-remote-url"),e=this.contentContainer.querySelector("#git-remote-auth"),t=this.contentContainer.querySelector("#git-push-button"),n=this.contentContainer.querySelector("#git-pull-button"),s=this.contentContainer.querySelector("#git-remote-log"),i=()=>{this.saveRemoteConfig(r.value,e.value)};r.addEventListener("input",i),e.addEventListener("input",i);const o=async u=>{const d=r.value.trim(),l=e.value.trim();if(!d){s.textContent="Error: Remote URL is required.";return}t.disabled=!0,n.disabled=!0;const g=u==="push"?"Pushing":"Pulling";s.textContent=`${g} to ${d}...`;try{const f=await this.gitClient[u](d,l,m=>{s.textContent=m});f.ok?s.textContent=`${g} complete.`:s.textContent=`Error: ${f.error||"Unknown error"}`,u==="pull"&&(await this.refresh(),await this.editor.forceReloadFile(this.editor.filePath))}catch(f){console.error(`${g} failed:`,f),s.textContent=`Error: ${f.message||"Check console for details."}`}finally{t.disabled=!1,n.disabled=!1}};t.addEventListener("click",()=>o("push")),n.addEventListener("click",()=>o("pull"));const a=this.contentContainer.querySelector("#git-commit-message");a&&!a.dataset.listenerAttached&&(a.dataset.listenerAttached="true",a.addEventListener("input",()=>this.updateCommitButtonState()));const c=this.contentContainer.querySelector(".git-view-container");c&&!c.dataset.listenerAttached&&(c.dataset.listenerAttached="true",c.addEventListener("click",async u=>{const d=u.target,l=d.closest(".git-file-item"),g=d.closest(".git-history-item");if(l){const f=l.dataset.filepath;d.matches(".git-file-path")?(this.editor.filePath!==f&&await this.editor.loadFile(f),this.editor.showDiff(await this.gitClient.readBlob(f))):d.matches(".git-action-button")&&(u.stopPropagation(),d.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${f}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(f),this.editor.filePath===f&&await this.editor.forceReloadFile(f),await this.refresh()):d.classList.contains("stage")?(await this.gitClient.stage(f),await this.renderGitView()):d.classList.contains("unstage")&&(await this.gitClient.unstage(f),await this.renderGitView()))}else if(g&&d.closest(".git-history-header")){const f=g.querySelector(".git-history-details");if(f.style.display!=="none")f.style.display="none";else if(f.style.display="block",!f.dataset.loaded){f.innerHTML='<span class="no-changes">Loading...</span>';const y=g.dataset.oid,p=await this.gitClient.getChangedFiles(y),v=g.dataset.author,S=g.dataset.date,x=p.map(E=>{const F=typeof E=="string"?E:E.path;return`<div class="history-file-path" data-path="${F}">${F.substring(1)}</div>`}).join("");f.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${v}</div>
                      <div><strong>Date:</strong> ${S}</div>
                    </div>
                    <div class="history-file-list">${x||'<span class="no-changes">No files changed.</span>'}</div>
                  `,f.dataset.loaded="true"}}else if(d.closest(".history-file-path")){c.querySelectorAll(".history-file-path.active").forEach(v=>v.classList.remove("active")),d.classList.add("active");const f=d.closest(".git-history-item"),m=d.dataset.path,y=f.dataset.oid,p=f.dataset.parentOid;await this.editor.previewHistoricalFile(m,y,p)}}));const h=this.contentContainer.querySelector("#git-commit-button");h&&!h.dataset.listenerAttached&&(h.dataset.listenerAttached="true",h.addEventListener("click",async()=>{const u=this.contentContainer.querySelector("#git-commit-message"),d=u.value.trim();if(d)try{h.disabled=!0,h.textContent="Committing...",await this.gitClient.commit(d),this.editor.hideDiff(),u.value="",await this.refresh()}catch(l){console.error("Commit failed:",l),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),h.textContent="Commit"}}))}};class Bt{constructor({target:e,gitClient:t,editor:n}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!n)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=n,this.targetSelector=e;const s=document.querySelector(this.targetSelector);if(!s){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=s,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,wt),Object.assign(this,Gt),Object.assign(this,Ot)}async init(){this.renderTabs(),this.setupContextMenus(),await this.refresh()}async showAlert({title:e="Notice",message:t}){return new Promise(n=>{const s=new b({title:e});s.updateContent(`<p>${t}</p>`),s.addFooterButton("OK",()=>{s.destroy(),n()}),s.show()})}async showConfirm({title:e,message:t,okText:n="OK",destructive:s=!1}){return b.confirm({title:e,message:t,okText:n,destructive:s,cancelText:"Cancel"})}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new te({targetSelector:".sidebar-content.files-view",itemSelector:".file-tree-item",dataAttribute:"data-path",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"New Folder",action:()=>this.handleNewFolder()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},{label:"New Folder",action:()=>this.handleNewFolder()},...e]}),new te({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const n=t.target.dataset.tab,s=this.activeTab;if(this.activeTab=n,sessionStorage.setItem("sidebarActiveTab",this.activeTab),s==="Git"&&n!=="Git"){const i=this.editor.getFilePath(window.location.hash);this.editor.loadFile(i)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(n=>{n.classList.toggle("active",n.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,n,s])=>n!==s);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listAllPaths(e,t){const n=e.pfs;let s=[];try{const i=await n.readdir(t);for(const o of i){if(o===".git")continue;const a=`${t==="/"?"":t}/${o}`;try{const c=await n.stat(a);if(s.push({path:a,isDirectory:c.isDirectory()}),c.isDirectory()){const h=await this.listAllPaths(e,a);s=s.concat(h)}}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No items to list.`)}return s}}function qt(r,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const n=o=>{t.innerHTML=`<p>${o}</p>`,t.classList.add("visible")},s=()=>{t.classList.remove("visible")},i=async(o,a)=>{let c=o;if(o.some(p=>p.isDirectory&&p.name===".git")){const p=await b.choice({title:".git Directory Detected",message:"<p>The content you dropped contains a .git repository. This could unintentionally overwrite your garden's history.</p><p>How would you like to proceed?</p>",choices:[{id:"import_safe",text:"Import Files (Ignore .git folder)"},{id:"cancel",text:"Cancel Import",class:"destructive"}]});if(!p||p==="cancel"){a("Import cancelled by user.","Import cancelled by user.");return}c=o.filter(v=>!(v.isDirectory&&v.name===".git")),a("Ignoring .git directory and proceeding with import.","Ignoring .git directory.")}const u=[],d=[],l=["png","jpg","jpeg","gif","svg","webp","avif","mp4","webm","mov","ogg","mp3","wav","flac","pdf","doc","docx","xls","xlsx","ppt","pptx"],g=async(p,v)=>{if(p.isFile){const S=await new Promise(E=>p.file(E)),x=`${v}/${S.name}`;S.name.toLowerCase().endsWith(".zip")?d.push(S):u.push({file:S,path:x})}else if(p.isDirectory){const S=p.createReader(),x=await new Promise(E=>S.readEntries(E));for(const E of x)await g(E,`${v}/${p.name}`)}};a("Scanning dropped items...","Scanning dropped items...");for(const p of c)await g(p,"");const f=`Found ${u.length} file(s) and ${d.length} zip archive(s) to process.`;a(f,f);const m=u.map(async({file:p,path:v})=>{let S;const x=p.name.split(".").pop()?.toLowerCase();return l.includes(x)?S=await p.arrayBuffer():S=await p.text(),r.writeFile(v,S)});if((await Promise.allSettled(m)).forEach((p,v)=>{const S=u[v].path;if(p.status==="rejected"){const x=`<span style="color: var(--color-text-destructive);">ERROR:</span> Failed to write "${S}": ${p.reason}`,E=`ERROR: Failed to write "${S}": ${p.reason}`;a(x,E)}else{const x=`<span style="color: var(--color-text-success);">OK:</span> Imported "${S}"`,E=`OK: Imported "${S}"`;a(x,E)}}),d.length>0){const p="Note: Zip archives must be imported via the DevTools > Data panel.";a(p,p)}};window.addEventListener("dragenter",o=>{o.preventDefault(),o.dataTransfer.types.includes("Files")&&n("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",o=>{o.preventDefault()}),window.addEventListener("dragleave",o=>{o.clientX===0&&o.clientY===0&&s()}),window.addEventListener("drop",async o=>{o.preventDefault(),s();const a=o.dataTransfer.items;if(!a||a.length===0)return;const c=Array.from(a).map(h=>h.webkitGetAsEntry()).filter(Boolean);if(c.length>0){const h=new b({title:"Importing Files..."}),u=document.createElement("div");u.style.fontFamily="monospace",u.style.maxHeight="300px",u.style.overflowY="auto",u.style.fontSize="12px",h.updateContent(""),h.content.appendChild(u),h.show();let d="";const l=(g,f)=>{console.log(`[Import Log] ${f}`),d+=`<div>${g}</div>`,u.innerHTML=d,u.scrollTop=u.scrollHeight};try{await i(c,l),l("<strong>Import process complete.</strong>","Import process complete.")}catch(g){const f=`<strong style="color: var(--color-text-destructive);">A critical error occurred: ${g.message}</strong>`,m=`A critical error occurred: ${g.message}`;l(f,m),console.error("[DragDrop] A critical error occurred during import:",g)}finally{h.addFooterButton("Close",()=>h.destroy()),await e.refresh()}}})}const ne=Ne.define(Fe),Ut=De({base:Oe,codeLanguages:[q.of({name:"javascript",load:()=>Promise.resolve(fe())}),q.of({name:"html",load:()=>Promise.resolve(me())}),q.of({name:"css",load:()=>Promise.resolve(pe())})]});function se(r){const e=r.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return ne}switch(t){case"js":return fe();case"css":return pe();case"html":return me();case"json":return Ge();case"xml":return _e();case"yaml":case"yml":return Re();case"sh":case"bash":case"zsh":return ne;default:return Ut}}const jt=$.mark({class:"cm-diff-inserted"});function ie(r,e){const t=[],n=e.doc.toString(),s=B(r,n);let i=0;for(const[o,a]of s)o===B.INSERT&&t.push(jt.range(i,i+a.length)),o!==B.DELETE&&(i+=a.length);return $.set(t)}const K=new R;function Ht(r){return ye.define({create(e){return ie(r,e)},update(e,t){return t.docChanged?ie(r,t.state):e.map(t.changes)},provide:e=>N.decorations.from(e)})}const G=ye.define({create:()=>({gitClient:null,sidebar:null,editor:null}),update:(r,e)=>r});async function zt(r,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listAllPaths(e.gitClient,"/"),n=r.toLowerCase();for(const{path:s,isDirectory:i}of t){if(i)continue;const o=s;if((o.startsWith("/")?o.substring(1):o).toLowerCase()===n)return o}return null}const Wt=new R,Jt=T.fromClass(class{constructor(r){this.view=r,this.statusBar=document.createElement("div"),this.statusBar.className="status-bar",this.filePathElement=document.createElement("span"),this.filePathElement.className="status-bar-filepath",this.tokenCountElement=document.createElement("span"),this.tokenCountElement.className="status-bar-token-count",this.statusBar.appendChild(this.filePathElement),this.statusBar.appendChild(this.tokenCountElement),r.dom.parentElement?r.dom.parentElement.appendChild(this.statusBar):console.error("Could not find a parent element for the editor view to attach the status bar."),this.debouncedUpdate=ge(this.updateAll.bind(this),100),this.updateAll()}update(r){(r.docChanged||r.selectionSet||r.viewportChanged)&&this.debouncedUpdate()}getDisplayPath(){const r=this.view.state.field(G);if(!r||!r.editor)return"...";const e=r.editor.gitClient.gardenName,t=r.editor.filePath||"/untitled";return`[${e}] ${t}`}updateAll(){if(!this.view.dom.isConnected)return;const r=this.getDisplayPath();this.filePathElement.textContent!==r&&(this.filePathElement.textContent=r);try{const e=this.view.state.doc.toString(),n=`Tokens: ${mt(e).toLocaleString()}`;this.tokenCountElement.textContent!==n&&(this.tokenCountElement.textContent=n)}catch{this.tokenCountElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function Kt(){return Jt}async function Z(r,e,t,n=null){try{let s=t.gardenName,i=r;r.includes("#")&&([s,i]=r.split("#")),i.startsWith("/")||(i=`/${i}`);const o=s!==t.gardenName?new k(s):t;s!==t.gardenName&&await o.initRepo();const c=`(function(editor, git, event) {
      try {
        ${await o.readFile(i)}
      } catch (e) {
        console.error(
          'EXECUTION FAILED in script: "${r}"\\n' +
          '--------------------------------------------------\\n' +
          'This error was caught and did not crash the application. Please check the script for errors.\\n\\n',
          e
        );
      }
    })(...arguments);`;await new Function(c)(e,o,n)}catch(s){console.error(`[Executor] Failed to load or execute ${r}:`,s),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}class Vt{constructor(e){this.editorView=e,this.keymapCompartment=new R,this.currentKeymap=_.of([])}getCompartment(){return this.keymapCompartment.of(this.currentKeymap)}async updateKeymaps(){const{value:e,sourceGarden:t}=await window.thoughtform.config.get("keymaps.yml");if(!Array.isArray(e)){console.error("[KeymapService] Invalid keymap configuration. Expected an array.");return}const n=this._buildKeymapExtension(e,t);this.currentKeymap=n,this.editorView.dispatch({effects:this.keymapCompartment.reconfigure(this.currentKeymap)})}_buildKeymapExtension(e,t){const n=e.map(s=>{if(!s.key||!s.run)return null;let i=s.run;return!i.includes("#")&&t&&(i=`${t}#${i}`),{key:s.key,run:()=>{const o=window.thoughtform.workspace.getActiveEditor(),a=window.thoughtform.workspace.getActiveGitClient();return o&&a&&Z(i,o,a),!0}}}).filter(Boolean);return _.of(n)}}const Yt=Ae.define(),Xt=N.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"},".cm-embed-container":{display:"block",padding:"10px 0"},".cm-embedded-image":{maxWidth:"100%",maxHeight:"500px",display:"block",margin:"0 auto",borderRadius:"4px",border:"1px solid var(--color-border)"},".cm-embed-placeholder, .cm-embed-error":{display:"block",padding:"10px",backgroundColor:"var(--color-background-secondary)",borderRadius:"4px",fontStyle:"italic",color:"var(--color-text-secondary)"},".cm-embed-error":{color:"var(--color-text-destructive)"}},{dark:!0}),Zt=Be.define([{tag:w.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[w.name,w.deleted,w.character,w.propertyName,w.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[w.processingInstruction,w.string,w.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[w.function(w.variableName),w.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[w.color,w.constant(w.name),w.standard(w.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[w.definition(w.name),w.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[w.typeName,w.className,w.number,w.changed,w.annotation,w.modifier,w.self,w.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[w.operator,w.operatorKeyword,w.url,w.escape,w.regexp,w.link,w.special(w.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[w.meta,w.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:Yt,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:w.strong,fontWeight:"bold",class:"cm-strong"},{tag:w.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:w.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:w.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:w.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[w.atom,w.bool,w.special(w.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:w.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),Qt=[Xt,we(Zt)],en=$.mark({class:"cm-hashtag"}),tn=T.fromClass(class{decorations;constructor(r){this.decorations=this.findHashtags(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findHashtags(r.view))}findHashtags(r){const e=new I,t=/#[\w-]+/g;for(const{from:n,to:s}of r.visibleRanges){const i=r.state.doc.sliceString(n,s);let o;for(;o=t.exec(i);){const a=n+o.index,c=a+o[0].length,h=r.state.doc.lineAt(a);if(a>h.from){const g=r.state.doc.sliceString(a-1,a);if(/\s/.test(g)===!1)continue}const u=/https?:\/\/[^\s]+/g;let d,l=!1;for(;d=u.exec(h.text);){const g=h.from+d.index,f=g+d[0].length;if(a>=g&&c<=f){l=!0;break}}l||e.add(a,c,en)}}return e.finish()}},{decorations:r=>r.decorations}),nn=$.mark({class:"cm-wikilink"});class sn{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=this.view.state.field(G);t.editor&&t.editor.navigateTo(e.textContent.slice(2,-2))}onMouseDown(e){const t=e.target.closest(".cm-wikilink");t&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleNavigation(t))}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new I,n=/\[\[([^\[\]]+?)\]\]/g;for(const{from:s,to:i}of e.visibleRanges){const o=e.state.doc.sliceString(s,i);let a;for(;a=n.exec(o);){const c=s+a.index,h=c+a[0].length;t.add(c,h,nn)}}return t.finish()}}const on=T.fromClass(sn,{decorations:r=>r.decorations}),rn=$.mark({class:"cm-checkbox-todo"}),an=$.mark({class:"cm-checkbox-done"}),cn=$.mark({class:"cm-checkbox-doing"}),ln=T.fromClass(class{decorations;constructor(r){this.decorations=this.findCheckboxes(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findCheckboxes(r.view))}findCheckboxes(r){const e=new I,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:n,to:s}of r.visibleRanges){const i=r.state.doc.sliceString(n,s);let o;for(;o=t.exec(i);){const a=o[2],c=n+o.index+o[0].indexOf("["),h=c+3;a===" "?e.add(c,h,rn):a==="x"?e.add(c,h,an):a==="-"&&e.add(c,h,cn)}}return e.finish()}},{decorations:r=>r.decorations}),dn=$.mark({class:"cm-timestamp"}),hn=T.fromClass(class{decorations;constructor(r){this.decorations=this.findTimestamps(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findTimestamps(r.view))}findTimestamps(r){const e=new I,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:n,to:s}of r.visibleRanges){const i=r.state.doc.sliceString(n,s);let o;for(;o=t.exec(i);){const a=o[0],c=o[1],h=n+o.index+a.indexOf(c),u=h+c.length;e.add(h,u,dn)}}return e.finish()}},{decorations:r=>r.decorations}),un=$.mark({class:"cm-naked-link"});function gn(r){return r?r.startsWith("www.")?"https://"+r:r:null}class fn{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove,{passive:!0})}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;const n=gn(t.textContent);return n&&window.open(n,"_blank","noopener,noreferrer"),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new I,n=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:s,to:i}of e.visibleRanges){const o=e.state.doc.sliceString(s,i);let a;for(;a=n.exec(o);){const c=e.state.doc.lineAt(s+a.index);if(/\[.*\]\(.*\)/.test(c.text)&&c.text.includes(`](${a[0]})`))continue;const h=s+a.index,u=h+a[0].length;t.add(h,u,un)}}return t.finish()}}const mn=T.fromClass(fn,{decorations:r=>r.decorations}),pn=$.line({class:"cm-blockquote"}),yn=T.fromClass(class{decorations;constructor(r){this.decorations=this.findBlockquotes(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findBlockquotes(r.view))}findBlockquotes(r){const e=new I,t=/^\s*>\s/;for(const{from:n,to:s}of r.visibleRanges){let i=n;for(;i<=s;){const o=r.state.doc.lineAt(i);t.test(o.text)&&e.add(o.from,o.from,pn),i=o.to+1}}return e.finish()}},{decorations:r=>r.decorations}),wn=$.line({class:"cm-hr"}),vn=T.fromClass(class{decorations;constructor(r){this.decorations=this.findRulers(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findRulers(r.view))}findRulers(r){const e=new I,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:n,to:s}of r.visibleRanges){let i=n;for(;i<=s;){const o=r.state.doc.lineAt(i);t.test(o.text)&&e.add(o.from,o.from,wn),i=o.to+1}}return e.finish()}},{decorations:r=>r.decorations}),xe=["png","jpg","jpeg","gif","svg","webp","avif"],V=["mp4","webm","mov","ogg"],Y=["mp3","wav","flac"],X=[...xe,...V,...Y];function bn(r){switch(r.toLowerCase()){case"png":return"image/png";case"jpg":case"jpeg":return"image/jpeg";case"gif":return"image/gif";case"svg":return"image/svg+xml";case"webp":return"image/webp";case"avif":return"image/avif";case"mp4":return"video/mp4";case"webm":return"video/webm";case"mov":return"video/quicktime";case"ogg":return"video/ogg";case"mp3":return"audio/mpeg";case"wav":return"audio/wav";case"flac":return"audio/flac";default:return"application/octet-stream"}}class oe extends qe{constructor(e,t,n,s){super(),this.linkTarget=e,this.altText=t,this.type=n,this.view=s,this.objectURL=null}eq(e){return this.linkTarget===e.linkTarget&&this.type===e.type}toDOM(){const e=document.createElement("span");e.className="cm-embed-container";const t=this.linkTarget.split(".").pop()?.toLowerCase().split("?")[0];if(this.type==="external"){let n;V.includes(t)?(n=document.createElement("video"),n.className="cm-embedded-video",n.controls=!0):Y.includes(t)?(n=document.createElement("audio"),n.className="cm-embedded-audio",n.controls=!0):(n=document.createElement("img"),n.className="cm-embedded-image",n.alt=this.altText),n.src=this.linkTarget,e.appendChild(n)}else{const n=document.createElement("span");n.className="cm-embed-placeholder",n.textContent=`Loading: ${this.linkTarget}`,e.appendChild(n),this.loadInternalContent(e).catch(s=>{console.error(`Failed to load internal embed for ${this.linkTarget}:`,s),n.textContent=`Error: ${this.linkTarget} not found.`,e.classList.add("cm-embed-error")})}return e}async loadInternalContent(e){let n=decodeURIComponent(this.linkTarget),s=null;n.includes("#")&&([s,n]=n.split("#"));const i=n.split(".").pop()?.toLowerCase();if(!X.includes(i)){e.textContent="",e.style.display="none";return}const o=this.view.state.field(G);let a;s&&s!==o.gitClient.gardenName?a=new k(s):a=o.gitClient;const c=n.startsWith("/")?n:`/${n}`,h=await a.readFileAsBuffer(c);if(!h)throw new Error("File could not be read as a buffer.");const u=bn(i),d=new Blob([h],{type:u});this.objectURL=URL.createObjectURL(d);let l;xe.includes(i)?(l=document.createElement("img"),l.className="cm-embedded-image",l.alt=this.linkTarget):V.includes(i)?(l=document.createElement("video"),l.className="cm-embedded-video",l.controls=!0):Y.includes(i)&&(l=document.createElement("audio"),l.className="cm-embedded-audio",l.controls=!0),l.src=this.objectURL,e.innerHTML="",e.appendChild(l),(l.tagName==="VIDEO"||l.tagName==="AUDIO")&&(l.onerror=g=>{console.error("Embedded media playback error:",g),e.innerHTML=`<span class="cm-embed-error">Error playing: ${this.linkTarget}</span>`},l.load())}destroy(){this.objectURL&&URL.revokeObjectURL(this.objectURL)}}function re(r){const e=new I,t=J(r.state),n=r.state.selection,s=new Set;for(const o of n.ranges)s.add(r.state.doc.lineAt(o.head).number);const i=o=>{let a=t.resolve(o,1);for(;a;){if(a.name.includes("Code"))return!0;a=a.parent}return!1};for(const{from:o,to:a}of r.visibleRanges){const c=r.state.doc.sliceString(o,a),h=/!\[\[([^\[\]]+?)\]\]/g;let u;for(;u=h.exec(c);){const l=o+u.index,g=r.state.doc.lineAt(l);if(i(l)||s.has(g.number))continue;const f=l+u[0].length,m=u[1],y=m.split(".").pop()?.toLowerCase();X.includes(y)&&e.add(l,f,$.replace({widget:new oe(m,m,"internal",r)}))}const d=/!\[(.*?)\]\((.*?)\)/g;for(;u=d.exec(c);){const l=o+u.index,g=r.state.doc.lineAt(l);if(i(l)||s.has(g.number))continue;const f=l+u[0].length,m=u[1],y=u[2],p=y.split(".").pop()?.toLowerCase()?.split("?")[0];y.startsWith("http")&&X.includes(p)&&e.add(l,f,$.replace({widget:new oe(y,m,"external",r)}))}}return e.finish()}const Cn=T.fromClass(class{constructor(r){this.decorations=re(r)}update(r){(r.docChanged||r.viewportChanged||r.selectionSet||J(r.startState)!==J(r.state))&&(this.decorations=re(r.view))}},{decorations:r=>r.decorations}),Sn=$.line({class:"cm-response-wrapper"}),ae=$.mark({class:"cm-response-tag"}),En=T.fromClass(class{decorations;constructor(r){this.decorations=this.findResponseBlocks(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findResponseBlocks(r.view))}findResponseBlocks(r){const e=new I,t=r.state.doc;let n=!1;for(let s=1;s<=t.lines;s++){const i=t.line(s),o=r.visibleRanges.some(a=>a.from<=i.to&&a.to>=i.from);if(i.text.trim()==="<response>"){n=!0,o&&e.add(i.from,i.to,ae);continue}if(i.text.trim()==="</response>"){n=!1,o&&e.add(i.from,i.to,ae);continue}n&&o&&e.add(i.from,i.from,Sn)}return e.finish()}},{decorations:r=>r.decorations}),kn=$.line({class:"cm-prompt-wrapper"}),xn=T.fromClass(class{decorations;constructor(r){this.decorations=this.findPrompts(r)}update(r){(r.docChanged||r.viewportChanged)&&(this.decorations=this.findPrompts(r.view))}findPrompts(r){const e=new I,t=/^\s*>\$\s/;for(const{from:n,to:s}of r.visibleRanges){let i=n;for(;i<=s;){const o=r.state.doc.lineAt(i);t.test(o.text)&&e.add(o.from,o.from,kn),i=o.to+1}}return e.finish()}},{decorations:r=>r.decorations}),Pn=[tn,on,ln,hn,mn,yn,vn,Cn,En,xn];function $n({appContext:r,dynamicKeymapExtension:e,vimCompartment:t,languageCompartment:n,updateListener:s,filePath:i,getLanguageExtension:o}){return[r,e,t.of([]),_.of([st]),Ue(),je(),He(),ze(),We(),Je(),Ke(),ve.allowMultipleSelections.of(!0),Ve(),we(it,{fallback:!0}),Ye(),Xe(),Ze(),Qe(),et(),tt(),_.of([...ot,...rt,...at,...ct,...lt,...dt]),N.lineWrapping,nt,Qt,n.of(o(i)),s,...Pn,K.of([]),Wt.of(Kt())]}const j=ht.define();class O{static editors=[];constructor({target:e,editorConfig:t={},gitClient:n,commandPalette:s,initialFile:i}){if(!n)throw new Error("Editor requires a gitClient instance.");if(!s)throw new Error("Editor requires a commandPalette instance.");this.targetElement=typeof e=="string"?document.querySelector(e):e,this.editorConfig=t,this.gitClient=n,this.commandPalette=s,this.editorView=null,this.sidebar=null,this.filePath=i||"/home",this.isReady=!1,this.keymapService=null,this.languageCompartment=new R,this.vimCompartment=new R,this.mediaViewerElement=null,this.currentMediaObjectUrl=null,this.debouncedHandleUpdate=ge(this.handleUpdate.bind(this),500),this.init()}async init(){if(!this.targetElement){console.error("Target container not found or provided.");return}if(document.querySelector("#sidebar").hasChildNodes())this.sidebar=window.thoughtform.sidebar;else{await this.gitClient.initRepo(),this.sidebar=new Bt({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),qt(this.gitClient,this.sidebar);const a=document.getElementById("loading-indicator");a&&a.remove(),document.querySelector(".main-content").style.display="flex"}window.thoughtform.sidebar||(window.thoughtform.sidebar=this.sidebar);let e=await this.loadFileContent(this.filePath);this.mediaViewerElement=document.createElement("div"),this.mediaViewerElement.className="media-viewer-container",this.targetElement.appendChild(this.mediaViewerElement);const t=N.updateListener.of(a=>{a.docChanged&&!a.transactions.some(c=>c.annotation(j))&&this.debouncedHandleUpdate(a.state.doc.toString())}),n=ve.create({doc:e}),s=new N({state:n});this.keymapService=new Vt(s);const i=this.keymapService.getCompartment(),o=$n({appContext:G.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar,editor:this})),dynamicKeymapExtension:i,vimCompartment:this.vimCompartment,languageCompartment:this.languageCompartment,updateListener:t,filePath:this.filePath,getLanguageExtension:se});this.editorView=new N({doc:e,extensions:o,parent:this.targetElement}),this.keymapService.editorView=this.editorView,s.destroy(),O.editors.push(this),this.isReady=!0,this.loadFile(this.filePath),this.editorView.focus(),this._applyUserSettings()}async _applyUserSettings(){const{value:e}=await window.thoughtform.config.get("interface.yml","editingMode");e==="vim"&&(ut.map("jj","<Esc>","insert"),this.editorView.dispatch({effects:this.vimCompartment.reconfigure(gt())})),await this.keymapService.updateKeymaps()}async navigateTo(e){if(!e)return;let t=e.split("|")[0].trim(),n=null;if(t.includes("#")&&([n,t]=t.split("#")),n&&n!==this.gitClient.gardenName)window.thoughtform.workspace.openFile(n,t.startsWith("/")?t:`/${t}`);else{const s=this.gitClient.gardenName;let o=await zt(t,{gitClient:this.gitClient,sidebar:this.sidebar})||(t.startsWith("/")?t:`/${t}`);window.thoughtform.workspace.openFile(s,o)}}async loadFileContent(e){try{return await this.gitClient.readFile(e)}catch(t){return console.warn(`Could not read file ${e}, starting with empty content.`,t),`// "${e.substring(1)}" does not exist. Start typing to create it.`}}async showDiff(e){if(e===null){this.hideDiff();return}const t=Ht(e);this.editorView.dispatch({effects:K.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:K.reconfigure([])})}async previewHistoricalFile(e,t,n){const[s,i]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(n,e)]);if(s===null||i===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:s},annotations:j.of(!0)}),this.showDiff(i)}async loadFile(e){const t=["png","jpg","jpeg","gif","svg","webp","avif"],n=["mp4","webm","mov","ogg"],s=["mp3","wav","flac"],i=[...t,...n,...s],o=e.split(".").pop()?.toLowerCase();if(i.includes(o)){this.hideDiff(),this.targetElement.classList.remove("is-editor"),this.targetElement.classList.add("is-media-preview"),this.mediaViewerElement.innerHTML="<p>Loading media...</p>";const u=await this.gitClient.readFileAsBuffer(e);if(u){const l={png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",svg:"image/svg+xml",webp:"image/webp",avif:"image/avif",mp4:"video/mp4",webm:"video/webm",mov:"video/quicktime",ogg:"video/ogg",mp3:"audio/mpeg",wav:"audio/wav",flac:"audio/flac"}[o]||"application/octet-stream",g=new Blob([u],{type:l});this.currentMediaObjectUrl&&URL.revokeObjectURL(this.currentMediaObjectUrl),this.currentMediaObjectUrl=URL.createObjectURL(g);let f="";t.includes(o)?f=`<img src="${this.currentMediaObjectUrl}" alt="${e}" />`:n.includes(o)?f=`<video src="${this.currentMediaObjectUrl}" controls></video>`:s.includes(o)&&(f=`<audio src="${this.currentMediaObjectUrl}" controls></audio>`),this.mediaViewerElement.innerHTML=f;const m=this.mediaViewerElement.querySelector("video, audio");m&&m.load()}else this.mediaViewerElement.innerHTML=`<p class="error">Could not load media: ${e}</p>`;this.filePath=e,this.sidebar&&await this.sidebar.refresh();return}this.targetElement.classList.remove("is-media-preview"),this.targetElement.classList.add("is-editor"),this.currentMediaObjectUrl&&(URL.revokeObjectURL(this.currentMediaObjectUrl),this.currentMediaObjectUrl=null),this.hideDiff();const a=await this.loadFileContent(e);this.filePath=e;const c=se(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(c)});const h=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:h.length,insert:a},annotations:j.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){await this.loadFile(e)}async newFile(){try{const e=await b.prompt({title:"New File",label:'Enter new file name (including folders, e.g., "projects/new-idea"):'});if(!e||!e.trim())return;const t=`/${e.trim()}`;try{const s=(await this.gitClient.pfs.stat(t)).isDirectory()?"folder":"file";await this.sidebar.showAlert({title:"Creation Failed",message:`A ${s} named "${e}" already exists.`});return}catch(n){if(n.code!=="ENOENT"){console.error("Error checking for file:",n),await this.sidebar.showAlert({title:"Error",message:"An unexpected error occurred."});return}}try{await this.gitClient.writeFile(t,""),window.thoughtform.events.publish("file:create",{path:t}),window.thoughtform.workspace.openFile(this.gitClient.gardenName,t)}catch(n){console.error("Error creating file:",n),await this.sidebar.showAlert({title:"Error",message:`Could not create file: ${n.message}`})}}finally{this.editorView.focus()}}async duplicateFile(e){if(e)try{if((await this.gitClient.pfs.stat(e)).isDirectory()){await this.sidebar.showAlert({title:"Action Not Supported",message:"Duplicating folders is not yet supported."});return}const n=e.substring(0,e.lastIndexOf("/")),s=e.substring(e.lastIndexOf("/")+1),i=`${s.split(".").slice(0,-1).join(".")||s} (copy)${s.includes(".")?"."+s.split(".").pop():""}`,o=await b.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:i});if(!o)return;const a=`${n}/${o}`;try{const c=await this.gitClient.readFile(e);await this.gitClient.writeFile(a,c),await this.sidebar.refresh()}catch(c){console.error("Error duplicating file:",c),await this.sidebar.showAlert({title:"Error",message:`Failed to duplicate file: ${c.message}`})}}finally{this.editorView.focus()}}async handleUpdate(e){this.isReady&&(await this.gitClient.writeFile(this.filePath,e),this.sidebar&&await this.sidebar.refresh())}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="home"),t}}window.Editor=O;function Tn(){Ln(),In()}function Ln(){const r=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!r||!e||!t)return;const n=document.createElement("button");n.id="sidebar-toggle-icon",n.title="Toggle Sidebar (Ctrl + [)",e.appendChild(n);let s=0,i=!1;const o=()=>{if(r.classList.contains("sidebar-collapsed")){const g=localStorage.getItem("sidebarWidth")||"250px";r.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",g),localStorage.setItem("sidebarCollapsed","false"),n.textContent="‹"}else{const g=document.documentElement.style.getPropertyValue("--sidebar-width");g!=="0px"&&localStorage.setItem("sidebarWidth",g),r.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),n.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=o);const a=l=>{l.type==="touchmove"&&l.preventDefault();const g=l.clientX||l.touches&&l.touches[0].clientX;if(Math.abs(g-s)>5&&(i=!0),i){const f=Math.max(24,Math.min(g,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${f}px`),r.classList.remove("sidebar-collapsed"),n.textContent="‹"}},c=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),i){const l=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",l),localStorage.setItem("sidebarCollapsed","false")}else o()},h=l=>{s=l.clientX||l.touches&&l.touches[0].clientX,i=!1,l.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a,{passive:!1}),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c)};e.addEventListener("mousedown",h),e.addEventListener("touchstart",h,{passive:!1});const u=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(r.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),n.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",u||"250px"),n.textContent="‹")}function In(){const r=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!r||!e)return;const n=document.createElement("button");n.id="eruda-toggle",n.title="Toggle DevTools (Ctrl + `)",e.appendChild(n);let s=0,i=!1;const o=(d=null,l=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const g=t.style.height==="0px"||t.offsetHeight<10;if(d===null?g:d){const m=localStorage.getItem("erudaHeight")||"250px";t.style.height=m,n.textContent="▼",localStorage.setItem("erudaCollapsed","false"),l&&setTimeout(()=>window.thoughtform.eruda?.show(l),50)}else{if(g)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",n.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=o);const a=d=>{d.type==="touchmove"&&d.preventDefault();const l=d.clientY||d.touches&&d.touches[0].clientY;if(Math.abs(l-s)>5&&(i=!0),!i)return;const g=window.innerHeight-l,f=42,m=window.innerHeight-100;t.style.height=`${Math.max(f,Math.min(g,m))}px`,n.textContent="▼"},c=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),i?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):o(null,null)},h=d=>{s=d.clientY||d.touches&&d.touches[0].clientY,i=!1,d.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c))};e.addEventListener("mousedown",h),e.addEventListener("touchstart",h,{passive:!1});const u=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",n.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",n.textContent="▼"),u.disconnect())});u.observe(r,{childList:!0})}async function Pe(r,e){const t=r.pfs;let n=[];try{const s=await t.readdir(e);for(const i of s){const o=`${e==="/"?"":e}/${i}`;try{(await t.stat(o)).isDirectory()?n=n.concat(await Pe(r,o)):n.push(o)}catch{console.warn(`Could not stat ${o}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return n}async function $e(r,e){try{if((await r.stat(e)).isDirectory()){const n=await r.readdir(e);for(const s of n)await $e(r,`${e}/${s}`);await r.rmdir(e)}else await r.unlink(e)}catch(t){if(t.code!=="ENOENT")throw console.error(`Error during rmrf for ${e}:`,t),t}}async function An(r,e){e("Starting export...");const t=new D;if(!r||r.length===0)throw new Error("No gardens were selected for export.");for(const a of r){e(`Processing garden: "${a}"...`);const c=t.folder(a),h=new k(a),u=await Pe(h,"/");for(const d of u){const l=await h.pfs.readFile(d),g=d.startsWith("/")?d.substring(1):d;c.file(g,l)}}e("Generating zip file...");const n=await t.generateAsync({type:"blob"}),i=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,o=document.createElement("a");o.href=URL.createObjectURL(n),o.download=i,document.body.appendChild(o),o.click(),document.body.removeChild(o),e(`Export process initiated: ${i}`)}async function Mn(r){const e=await D.loadAsync(r),t=new Set;return e.forEach(n=>{if(n.includes("/")){const s=n.split("/")[0];t.add(s)}}),Array.from(t).sort()}async function Nn(r,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${r.name}...`);const n=await D.loadAsync(r);t("Zip file loaded. Analyzing backup contents...");let s="merge";const i=[];for(const u of e){const d=new k(u);let l=!1;try{await d.pfs.stat("/.git"),l=!0}catch{}const g=Object.keys(n.files).some(f=>f.startsWith(`${u}/.git/`));l&&g&&i.push(u)}if(i.length>0){const u=`<ul>${i.map(l=>`<li><strong>${l}</strong></li>`).join("")}</ul>`,d=await b.choice({title:"Replace Garden History?",message:`<p>The backup contains a git history for the following existing garden(s):</p>
                ${u}
                <p>Replacing history is a destructive action. How should we proceed?</p>`,choices:[{id:"replace",text:"Replace History",class:"destructive"},{id:"merge",text:"Merge Files, Keep Local History"},{id:"cancel",text:"Cancel Import"}]});if(!d||d==="cancel"){t("Import cancelled by user.");return}s=d}if(s==="replace"){t("Strategy: Replacing history for conflicting gardens.");for(const u of i){t(`  Deleting existing .git directory for "${u}"...`);const d=new k(u);await $e(d.pfs,"/.git"),t(`  Done deleting for "${u}".`)}}else t("Strategy: Merging files and keeping local history where conflicts exist.");const o=new Map;t("Initializing target gardens...");for(const u of e){const d=new k(u);await d.initRepo(),o.set(u,d)}t("Initialization complete. Starting file writes...");const a=[];n.forEach((u,d)=>{if(d.dir)return;const l=u.split("/")[0];if(!e.includes(l)||u.substring(l.length+1).startsWith(".git/")&&s==="merge"&&i.includes(l))return;const f=`/${u.substring(l.length+1)}`,m=d.async("uint8array").then(async y=>{await o.get(l).writeFile(f,y)});a.push(m)});const c=a.length;let h=0;a.forEach(u=>u.then(()=>{h++,(h%100===0||h===c)&&t(`Writing files... (${h}/${c})`)})),await Promise.all(a),t("Import complete! Reloading page..."),setTimeout(()=>window.location.reload(),1500)}async function Fn(r,e){if(!r||r.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];for(const s of r){e(`Deleting garden: "${s}"...`),n=n.filter(o=>o!==s);const i=`garden-fs-${s}`;await new Promise((o,a)=>{const c=indexedDB.deleteDatabase(i);c.onsuccess=()=>{e(`  Successfully deleted database: ${i}`),o()},c.onerror=h=>{e(`  Error deleting database: ${i}`),a(h.target.error)},c.onblocked=()=>{e(`  Deletion blocked for ${i}. Please refresh and try again.`),a(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(n)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const s=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(r.includes(s)||n.length===0){const i=new URL(import.meta.url).pathname,o=i.lastIndexOf("/src/"),a=o>-1?i.substring(0,o):"";window.location.href=`${window.location.origin}${a}/home`}else window.location.reload()},2e3)}async function Dn(r){r("Starting to reset default settings...");const e=new k("Settings");await e.initRepo(),await e.ensureDir("/keymaps"),await e.ensureDir("/hooks");for(const[t,n]of ke)try{r(`Restoring: ${t}`),await e.writeFile(t,n)}catch(s){r(`ERROR: Failed to restore ${t}: ${s.message}`)}r("Default settings restored. Reloading to apply changes..."),setTimeout(()=>window.location.reload(),2e3)}class Rn{constructor(){const e=new URLSearchParams(window.location.search);this.isEnabled=e.has("debug"),console.log(`[DEBUG] Debug mode is ${this.isEnabled?"ENABLED":"DISABLED"}`)}log(...e){this.isEnabled&&console.log("[DEBUG]",...e)}error(...e){this.isEnabled&&console.error("[DEBUG]",...e)}warn(...e){this.isEnabled&&console.warn("[DEBUG]",...e)}}const C=new Rn;class _n{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const n=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(n),this.signaling.ws.onopen=()=>{C.log(`Connected to signaling server at ${n}`),e()},this.signaling.ws.onclose=()=>{C.log("Disconnected from signaling server"),this.signaling.sync.disconnect()},this.signaling.ws.onerror=s=>{C.error("WebSocket error:",s),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${n}`))},this.signaling.ws.onmessage=s=>{try{const i=JSON.parse(s.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(i)}catch(i){C.error("Error parsing signaling message:",i)}}})}sendJoinSessionRequest(e,t){const n=this.signaling.ws;if(n&&n.readyState===WebSocket.OPEN){const s={type:"join_session",sessionId:e};t&&(s.peerNamePrefix=t),n.send(JSON.stringify(s))}else C.error("Cannot send join session request, WebSocket is not open.")}sendSignal(e,t){const n=this.signaling.ws;n&&n.readyState===WebSocket.OPEN&&n.send(JSON.stringify({type:"signal",target:t,data:e}))}}class Gn{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"welcome":C.log("Received welcome from signaling server.");break;case"session_joined":this.signaling.peerId=e.peerId,t.updateConnectionState("connected-signal","Connected to tracker, waiting for peers..."),e.peers&&e.peers.length>0&&e.peers.forEach(n=>{this.signaling.connectToPeer(n)});break;case"peer_joined":this.signaling.connectToPeer(e.peerId);break;case"signal":e.from&&e.data&&this.signaling.handleSignal(e.from,e.data);break;case"peer_left":e.peerId&&t.handlePeerLeft(e.peerId);break;case"error":t.updateConnectionState("error",`Signaling error: ${e.message}`);break}}}const On=500;class Bn{constructor(e){this.signaling=e,this.sync=e.sync,this.seenMessages=new Set}handleIncomingMessage(e,t){if(!e.payload||!e.messageId){C.warn("Received a message without a payload or messageId, cannot process.",e);return}if(this.seenMessages.has(e.messageId))return;if(this.seenMessages.add(e.messageId),this.seenMessages.size>On){const s=this.seenMessages.values().next().value;this.seenMessages.delete(s)}e.noGossip||this.sendSyncMessage(e.payload,null,e.messageId);const n=e.payload;switch(n.type){case"peer_introduction":this.sync.handlePeerIntroduction(n);break;default:this.sync.fileSync&&this.sync.fileSync.handleSyncMessage(n);break}}sendSyncMessage(e,t=null,n=null){const s=n||crypto.randomUUID(),o=JSON.stringify({messageId:s,payload:e,noGossip:!!t});if(this.seenMessages.add(s),t){const a=this.sync.peerConnections.get(t);if(a&&a.dataChannel&&a.dataChannel.readyState==="open")try{a.dataChannel.send(o)}catch(c){console.error(`Error sending direct message to ${t.substring(0,8)}...:`,c)}}else this.sync.peerConnections.forEach((a,c)=>{if(a.dataChannel&&a.dataChannel.readyState==="open")try{a.dataChannel.send(o)}catch(h){console.error(`Error gossiping message to ${c.substring(0,8)}...:`,h)}})}destroy(){this.seenMessages.clear()}}class qn{constructor(e){this.signaling=e}async connectToPeer(e){const t=this.signaling.sync,n=t.createPeerConnection(e,!0);if(n)try{const s=n.createDataChannel("syncChannel");t.setupDataChannel(e,s);const i=await n.createOffer();await n.setLocalDescription(i),this.signaling.sendSignal({type:"offer",sdp:i.sdp},e)}catch(s){C.error(`Failed to initiate connection to ${e}:`,s)}}}class Un{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this._webSocketManager=new _n(this),this._signalingMessageHandler=new Gn(this),this._webrtcInitiator=new qn(this),this._syncMessageRouter=new Bn(this)}updateSignalingServerUrl(e){this.signalingServerUrl=e,localStorage.setItem("thoughtform_signaling_server",e)}async joinSession(e,t){try{await this._webSocketManager.connectToSignalingServer(),this._webSocketManager.sendJoinSessionRequest(e,t)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server.")}}connectToPeer(e){e!==this.peerId&&this.peerId>e&&this._webrtcInitiator.connectToPeer(e)}sendSignal(e,t){this._webSocketManager.sendSignal(e,t)}async handleSignal(e,t){const n=this.sync;try{let s=n.peerConnections.get(e);if(!s)if(t.type==="offer"){if(s=n.createPeerConnection(e,!1),!s){console.warn(`[SYNC-SIGNAL] Received offer from ${e.substring(0,8)} but at connection limit. Ignoring.`);return}}else{C.warn(`[SYNC-SIGNAL] Received signal from unknown peer ${e.substring(0,8)} before an offer. Discarding.`);return}if(t.type==="offer"){await s.setRemoteDescription(new RTCSessionDescription(t));const i=await s.createAnswer();await s.setLocalDescription(i),this.sendSignal({type:"answer",sdp:i.sdp},e)}else t.type==="answer"?await s.setRemoteDescription(new RTCSessionDescription(t)):t.type==="candidate"&&await s.addIceCandidate(new RTCIceCandidate(t.candidate))}catch(s){C.error(`Error handling signal from ${e}:`,s)}}sendSyncMessage(e,t,n){this._syncMessageRouter.sendSyncMessage(e,t,n)}handleIncomingMessage(e,t){this._syncMessageRouter.handleIncomingMessage(e,t)}destroy(){this.ws&&(this.ws.close(),this.ws=null),this._syncMessageRouter.destroy()}}class jn{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const n=this._listeners[e];for(let s=0,i=n.length;s<i;s++)if(n[s]===t){n.splice(s,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class Hn{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return C.log(`DEBUG: Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return C.log(`DEBUG: Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return C.log("DEBUG: Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return C.log("DEBUG: Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return C.log("DEBUG: _getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class zn{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),C.log("DEBUG: SyncFiles confirmed data channel is open.")},t.onmessage=async n=>{try{const s=JSON.parse(n.data);await e.sync._handleIncomingSyncMessage(s,"P2P")}catch(s){console.error("Error parsing sync message from DataChannel:",s,"Raw data:",n.data)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),C.log("DEBUG: SyncFiles confirmed data channel is closed.")},t.onerror=n=>{const s=n.error;s&&s.name==="OperationError"&&s.message.includes("User-Initiated Abort")?C.log("Data channel closed intentionally by a peer.",n):(console.error("Data channel error:",n),e.sync.addMessage("Data channel error: "+(s?s.message:"Unknown error")))}}}class Te{static async _listAllFiles(e,t){const n=e.pfs;if(!n)throw new Error("gitClient does not have pfs property");let s=[];try{const i=await n.readdir(t);for(const o of i){if(o===".git")continue;const a=t==="/"?`/${o}`:`${t}/${o}`;try{(await n.stat(a)).isDirectory()?s=s.concat(await this._listAllFiles(e,a)):s.push(a)}catch(c){C.warn(`Could not stat ${a}, skipping.`,c)}}}catch(i){C.log(`Directory not readable: ${t}`,i)}return s}static async handleFileUpdate(e,t){e.incrementPendingWrites();try{if(!t.gardenName)throw new Error("Received file update without a gardenName during a full sync.");const n=new k(t.gardenName);if(t.isFullSync){e.deletedGitDirs.has(t.gardenName)||(e.deletedGitDirs.add(t.gardenName),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing to receive garden: ${t.gardenName}...`,type:"info"}})),await n.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Replacing git history for ${t.gardenName}...`,type:"info"}})),await n.rmrf("/.git")),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Writing: ${t.path.substring(1)} (${t.gardenName})`,type:"info"}}));const s=Buffer.from(t.content,"base64");await n.writeFile(t.path,s)}else{const s=t.isBase64?Buffer.from(t.content,"base64"):t.content;await n.writeFile(t.path,s),e.sync.addMessage(`Updated file: ${t.path} in garden ${t.gardenName}`)}}catch(n){console.error("Error handling file update for path:",t.path,n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${n.message}`,type:"error"}}))}finally{e.decrementPendingWrites()}}}class Le{static async handleSyncMessage(e,t){switch(t.type){case"send_initiation":this.handleSendInitiation(e,t);break;case"sync_cancel":this.handleSyncCancel(e,t);break;case"file_update":await Te.handleFileUpdate(e,t);break;case"request_gardens":await this.handleRequestGardens(e,t.gardens,t.requesterId);break;case"garden_zip_chunk":await this.handleGardenZipChunk(e,t);break;case"garden_zip_complete":await this.handleGardenZipComplete(e,t);break;case"full_sync_complete":e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"File stream complete. Waiting for writes to finish...",type:"info"}})),e.markSyncStreamAsComplete();break;default:C.log("Unknown sync message type:",t.type)}}static handleSendInitiation(e,t){e.isSyncCancelled||(e.currentTransferId=t.transferId,e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Incoming transfer from peer for gardens: ${t.gardens.join(", ")}.`,type:"info"}})))}static handleSyncCancel(e,t){e.currentTransferId===t.transferId&&e.cancelSync(!1)}static async handleRequestGardens(e,t=[],n){if(!n){const s="Error: Received garden request without a requesterId. Cannot send response.";console.error(s),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:s,type:"error"}}));return}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received request for gardens: ${t.join(", ")} from ${n.substring(0,8)}...`,type:"info"}})),await this.sendGardens(e,t,[n])}static async sendGardens(e,t,n){if(!t||t.length===0||!n||n.length===0)return;const s=crypto.randomUUID();e.currentTransferId=s,e.targetPeers=n,e.sync.sendSyncMessage({type:"send_initiation",gardens:t,transferId:s});const i=64*1024,o=10*1024*1024,a=c=>new Promise(h=>{if(c.bufferedAmount<o)h();else{const u=()=>{c.bufferedAmount<o&&(c.removeEventListener("bufferedamountlow",u),h())};c.addEventListener("bufferedamountlow",u)}});try{for(const c of t){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Preparing ${c} for transfer...`,type:"info"}}));const h=new D,u=new k(c),d=await this.getAllFilesIncludingGit(u.pfs,"/");e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zipping ${d.length} files from ${c}...`,type:"info"}}));for(const m of d){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const y=await u.pfs.readFile(m),p=m.startsWith("/")?m.substring(1):m;h.file(p,y)}if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const l=await h.generateAsync({type:"uint8array",compression:"DEFLATE",compressionOptions:{level:6}}),g=(l.length/1024/1024).toFixed(2);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Zip created for ${c} (${g} MB).`,type:"info"}}));const f=Math.ceil(l.length/i);for(const m of n){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");const y=e.sync.peerConnections.get(m);if(!y||!y.dataChannel||y.dataChannel.readyState!=="open"){const v=`Error: Cannot send files to ${m.substring(0,8)}... No open data channel.`;console.error(v),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:v,type:"error"}}));continue}const p=y.dataChannel;e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending ${c} to ${m.substring(0,8)}...`,type:"info"}}));for(let v=0;v<f;v++){if(e.isSyncCancelled)throw new Error("Sync cancelled by user.");await a(p);const S=v*i,x=Math.min(S+i,l.length),E=l.slice(S,x);e.sync.sendSyncMessage({type:"garden_zip_chunk",gardenName:c,transferId:s,chunkIndex:v,totalChunks:f,data:Buffer.from(E).toString("base64"),zipSize:l.length},m),((v+1)%10===0||v+1===f)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sent ${v+1} of ${f} chunks for ${c} to ${m.substring(0,8)}...`,type:"info"}}))}e.sync.sendSyncMessage({type:"garden_zip_complete",gardenName:c,transferId:s},m),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Finished sending ${c} to ${m.substring(0,8)}.`,type:"info"}}))}}for(const c of n)e.sync.sendSyncMessage({type:"full_sync_complete"},c);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All selected gardens sent successfully.",type:"complete",action:"send"}}))}catch(c){c.message.includes("cancelled")?e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Sync cancelled by user.",type:"cancelled"}})):(console.error("Error handling garden send/request:",c),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: ${c.message}`,type:"error"}})))}}static async getAllFilesIncludingGit(e,t){let n=[];try{const s=await e.readdir(t);for(const i of s){const o=`${t==="/"?"":t}/${i}`;try{(await e.stat(o)).isDirectory()?n=n.concat(await this.getAllFilesIncludingGit(e,o)):n.push(o)}catch(a){C.warn(`Could not stat ${o}, skipping.`,a)}}}catch(s){C.log(`Directory not readable: ${t}`,s)}return n}static async handleGardenZipChunk(e,t){if(e.isSyncCancelled||e.currentTransferId!==t.transferId)return;e.activeTransfers||(e.activeTransfers=new Map);const n=`${t.gardenName}-${t.transferId}`;e.activeTransfers.has(n)||(e.activeTransfers.set(n,{chunks:new Array(t.totalChunks),receivedCount:0,totalChunks:t.totalChunks,gardenName:t.gardenName,zipSize:t.zipSize}),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Receiving ${t.gardenName} (${(t.zipSize/1024/1024).toFixed(2)} MB)...`,type:"info"}})));const s=e.activeTransfers.get(n);s.chunks[t.chunkIndex]=Buffer.from(t.data,"base64"),s.receivedCount++,(s.receivedCount%10===0||s.receivedCount===s.totalChunks)&&e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Received ${s.receivedCount} of ${s.totalChunks} chunks for ${t.gardenName}...`,type:"info"}}))}static async handleGardenZipComplete(e,t){if(e.isSyncCancelled)return;const n=`${t.gardenName}-${t.transferId}`,s=e.activeTransfers.get(n);if(s){if(s.receivedCount!==s.totalChunks){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: Missing chunks for ${t.gardenName}`,type:"error"}})),e.activeTransfers.delete(n);return}try{e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Reassembling and extracting ${t.gardenName}...`,type:"info"}}));const i=s.chunks.reduce((l,g)=>l+g.length,0),o=new Uint8Array(i);let a=0;for(const l of s.chunks)o.set(l,a),a+=l.length;const c=await D.loadAsync(o),h=new k(t.gardenName);await h.initRepo(),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Clearing existing data for ${t.gardenName}...`,type:"info"}})),await h.rmrf("/.git"),await h.clearWorkdir();const u=Object.entries(c.files);let d=0;for(const[l,g]of u)if(!g.dir){const f=await g.async("uint8array"),m=`/${l}`,y=m.substring(0,m.lastIndexOf("/"));y&&y!=="/"&&await h.ensureDir(y),await h.pfs.writeFile(m,f),d++}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Successfully extracted ${t.gardenName} (${d} files).`,type:"complete"}})),e.activeTransfers.delete(n),e.activeTransfers.size===0&&e.markSyncStreamAsComplete()}catch(i){console.error(`Error extracting garden ${t.gardenName}:`,i),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error extracting ${t.gardenName}: ${i.message}`,type:"error"}})),e.activeTransfers.delete(n)}}}}class ce{static async sendGardensToPeers(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Initiating send process...",type:"info"}})),await Le.sendGardens(e,t.gardens,t.peers)}static requestSpecificGardens(e,t){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting selected gardens from peers...",type:"info"}}));const n=e.sync.signaling.peerId;if(!n){const s="Cannot request gardens: own peer ID is not available.";e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:s,type:"error"}})),console.error(s);return}Object.entries(t).forEach(([s,i])=>{const o=s.substring(0,8);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending request to peer ${o}... for gardens: ${i.join(", ")}`,type:"info"}})),e.sync.sendSyncMessage({type:"request_gardens",gardens:i,requesterId:n},s)}),e.sync.addMessage(`Sent requests for ${Object.keys(t).length} peer(s).`)}static sendFileUpdate(e,t,n,s){e.sync.sendSyncMessage({type:"file_update",path:t,content:n,timestamp:s})}}class Wn extends jn{constructor(e){super(),this.sync=e,this.gitClient=null,this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs=new Set,this.isSyncFailed=!1,this.isSyncCancelled=!1,this.activeTransfers=new Map,this.currentTransferId=null,this.targetPeers=[]}resetFullSyncState(){this.pendingWriteCount=0,this.isSyncCompleteMessageReceived=!1,this.deletedGitDirs.clear(),this.activeTransfers.clear(),this.isSyncFailed=!1,this.isSyncCancelled=!1,this.currentTransferId=null,this.targetPeers=[]}_getGitClient(){return Hn.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){zn.setupDataChannel(this,e)}async handleSyncMessage(e){if(!(this.isSyncCancelled&&e.type!=="sync_cancel"))try{await Le.handleSyncMessage(this,e)}catch(t){console.error("[SyncFiles] Critical error handling sync message:",t),this.isSyncFailed=!0,this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`A critical error occurred: ${t.message}. Aborting sync.`,type:"error"}}))}}async sendGardensToPeers(e){this.resetFullSyncState(),await ce.sendGardensToPeers(this,e)}requestSpecificGardens(e){this.resetFullSyncState(),ce.requestSpecificGardens(this,e)}cancelSync(e=!0){this.isSyncCancelled||(this.isSyncCancelled=!0,this.activeTransfers.clear(),e&&this.currentTransferId&&this.sync.sendSyncMessage({type:"sync_cancel",transferId:this.currentTransferId}),this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Sync cancelled by user.",type:"cancelled"}})))}incrementPendingWrites(){this.pendingWriteCount++}decrementPendingWrites(){this.pendingWriteCount--,this.checkForReload()}markSyncStreamAsComplete(){this.isSyncCompleteMessageReceived=!0,this.checkForReload()}checkForReload(){this.isSyncFailed||this.isSyncCancelled||this.isSyncCompleteMessageReceived&&this.pendingWriteCount===0&&this.activeTransfers.size===0&&(this.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"All files received and written. Reloading...",type:"complete",action:"receive"}})),setTimeout(()=>window.location.reload(),1500))}destroy(){super.destroy(),this.activeTransfers.clear()}async getAllFiles(e){return Te._listAllFiles(e,"/")}}class Jn{constructor(e){this.sync=e,this.syncMethodIndicatorEl=null,this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressActionButton=null,this.connectBtn=null,this.nameInput=null,this.peerPrefixInput=null,this.autoConnectCheckbox=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row">
                <label for="sync-peer-prefix-input" class="sync-label">Peer Name Prefix:</label>
                <input type="text" id="sync-peer-prefix-input" class="eruda-input flex-grow" placeholder="e.g., laptop, desktop (optional)">
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                    <strong>Peers:</strong> <span id="sync-peer-count">0</span>
                    <strong>Peer ID:</strong> <span id="sync-peer-id-display" style="word-break: break-all;">Not Connected</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="send-to-peers-btn" class="eruda-button">Send to Peers...</button>
                <button id="request-all-files-btn" class="eruda-button">Request from Peer...</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"),this.connectBtn=this.sync._container.querySelector("#sync-connect-btn"),this.nameInput=this.sync._container.querySelector("#sync-name-input"),this.peerPrefixInput=this.sync._container.querySelector("#sync-peer-prefix-input"),this.autoConnectCheckbox=this.sync._container.querySelector("#sync-autoconnect-checkbox"))}bindEvents(){if(!this.sync._container){C.error("SyncUI.bindEvents: Container not set");return}this.nameInput.value=localStorage.getItem("thoughtform_sync_name")||"",this.peerPrefixInput.value=localStorage.getItem("thoughtform_peer_prefix")||"",this.autoConnectCheckbox.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",this.peerPrefixInput.addEventListener("input",()=>{if(this.sync.connectionState==="disconnected"||this.sync.connectionState==="error"){const s=this.sync._container.querySelector("#sync-peer-id-display");if(s){const i=this.peerPrefixInput.value.trim();i?s.textContent=`${i}-<random_id>`:s.textContent="Not Connected"}}}),this.connectBtn.addEventListener("click",()=>{const s=this.sync.connectionState;if(s==="disconnected"||s==="error"){const i=this.nameInput.value.trim(),o=this.peerPrefixInput.value.trim(),a=this.autoConnectCheckbox.checked;if(!i){this.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",i),localStorage.setItem("thoughtform_peer_prefix",o),localStorage.setItem("thoughtform_sync_auto_connect",a),this.sync.connect(i,o)}else this.sync.disconnect()});const e=this.sync._container.querySelector("#save-signaling-config");e&&e.addEventListener("click",()=>{const s=this.sync._container.querySelector("#signaling-server-url"),i=s?s.value.trim():"";i?(this.sync.signaling.updateSignalingServerUrl(i),this.addMessage(`Signaling server updated to: ${i}`)):this.addMessage("Please enter a valid signaling server URL.")});const t=this.sync._container.querySelector("#send-to-peers-btn"),n=this.sync._container.querySelector("#request-all-files-btn");t&&t.addEventListener("click",async()=>{const s=localStorage.getItem("thoughtform_gardens"),i=s?JSON.parse(s):["home"],o=this.sync.connectedPeers,a=await b.sendSelection({title:"Send Gardens to Peers",peerData:o,gardenData:i});a?(C.log("User initiated send:",a),this.showSyncProgressModal(),this.sync.fileSync.sendGardensToPeers(a)):C.log("Garden send cancelled by user.")}),n&&n.addEventListener("click",async()=>{const s=await b.selection({title:"Request Gardens from Peers",peerData:this.sync.connectedPeers});s?(C.log("User made selection:",s),this.showSyncProgressModal(),this.sync.fileSync.requestSpecificGardens(s)):C.log("Garden request cancelled by user.")})}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e);const n=this.sync._container.querySelector("#sync-peer-count");n&&(n.textContent=this.sync.connectedPeers.size)}updateControls(e){const t=e==="disconnected"||e==="error",n=e==="connecting";this.connectBtn&&(this.connectBtn.disabled=n,t?this.connectBtn.textContent="Connect":n?this.connectBtn.textContent="Connecting...":this.connectBtn.textContent="Disconnect"),this.nameInput&&(this.nameInput.disabled=!t),this.peerPrefixInput&&(this.peerPrefixInput.disabled=!t),this.autoConnectCheckbox&&(this.autoConnectCheckbox.disabled=!t);const s=e==="connected-p2p"||e==="connected-signal";this.sync._container.querySelectorAll(".sync-actions button").forEach(i=>i.disabled=!s)}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let n="None",s="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),n="Connecting...",s="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),n="WebSocket (Fallback)",s="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),n="WebRTC (P2P)",s="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),n="Error",s="var(--base-accent-destructive)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=n,this.syncMethodIndicatorEl.style.color=s)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const n=document.createElement("div");n.textContent=e,t.appendChild(n),t.scrollTop=t.scrollHeight}}showMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="block")}hideMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="none")}showSyncProgressModal(){this.syncProgressModal&&this.syncProgressModal.destroy(),this.syncProgressModal=new b({title:"File Sync Progress"}),this.syncProgressModal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.syncProgressLogArea=this.syncProgressModal.content.querySelector("#sync-progress-log"),this.syncProgressFinalMessageArea=this.syncProgressModal.content.querySelector("#sync-progress-final-message"),this.syncProgressActionButton=null,this.syncProgressActionButton=this.syncProgressModal.addFooterButton("Cancel",()=>{this.sync.fileSync.cancelSync()}),this.syncProgressModal.show()}updateSyncProgress(e){const{message:t="No message",type:n="info",action:s="receive"}=e.detail;if(this.syncProgressModal||this.showSyncProgressModal(),!this.syncProgressLogArea)return;const i=document.createElement("div"),o=new Date().toLocaleTimeString();switch(i.textContent=`[${o}] ${t}`,i.style.marginBottom="5px",n){case"error":i.style.color="var(--base-accent-destructive)";break;case"complete":i.style.color="var(--base-accent-action)";break;case"cancelled":i.style.color="var(--base-accent-warning)";break;default:i.style.color="var(--color-text-primary)";break}this.syncProgressLogArea.appendChild(i),this.syncProgressLogArea.scrollTop=this.syncProgressLogArea.scrollHeight,["complete","error","cancelled"].includes(n)&&(this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.textContent=t,this.syncProgressFinalMessageArea.style.color=i.style.color),this.syncProgressActionButton&&this.syncProgressActionButton.remove(),this.syncProgressActionButton=this.syncProgressModal.addFooterButton("Close",()=>this.hideSyncProgressModal()),n==="error"&&this.syncProgressActionButton.classList.add("destructive"))}hideSyncProgressModal(){this.syncProgressModal&&(this.sync.fileSync.resetFullSyncState(),this.syncProgressModal.destroy(),this.syncProgressModal=null)}}const le=5;class Kn{constructor(){this.name="sync",this._container=null,this.peerConnections=new Map,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.connectedPeers=new Map,this.signaling=new Un(this),this.fileSync=new Wn(this),this.ui=new Jn(this)}init(e){this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&this.fileSync.addEventListener("syncProgress",this.ui.updateSyncProgress.bind(this.ui));const t=localStorage.getItem("thoughtform_sync_auto_connect")==="true",n=localStorage.getItem("thoughtform_sync_name"),s=localStorage.getItem("thoughtform_peer_prefix")||"";t&&n&&this.connect(n,s),window.thoughtform&&(window.thoughtform.sync=this)}async connect(e,t){this.connectionState!=="disconnected"&&this.connectionState!=="error"||(this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.joinSession(this.syncName,t))}disconnect(){this.signaling.destroy(),this.peerConnections.forEach(e=>e.close()),this.peerConnections.clear(),this.isConnected=!1,this.syncName=null,this.connectedPeers.clear(),this.updateConnectionState("disconnected","Disconnected")}createPeerConnection(e,t=!1){if(this.peerConnections.has(e))return this.peerConnections.get(e);if(this.peerConnections.size>=le)return console.warn(`[SYNC-PC] Max connections (${le}) reached. Not connecting to ${e.substring(0,8)}...`),null;const n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});return this.peerConnections.set(e,n),n.onicecandidate=s=>{s.candidate&&this.signaling.sendSignal({type:"candidate",candidate:s.candidate},e)},n.onconnectionstatechange=()=>{const s=n.connectionState;s==="connected"?this.updateConnectionState("connected-p2p",`P2P Connected (${this.peerConnections.size} peers)`):(s==="failed"||s==="disconnected"||s==="closed")&&this.handlePeerLeft(e)},t||(n.ondatachannel=s=>{this.setupDataChannel(e,s.channel)}),n}setupDataChannel(e,t){const n=this.peerConnections.get(e);n&&(n.dataChannel=t,t.onopen=()=>{this._announcePresence(e)},t.onmessage=async s=>{try{const i=JSON.parse(s.data);await this._handleIncomingSyncMessage(i,`P2P-${e.substring(0,4)}`)}catch(i){console.error("Error parsing sync message from DataChannel:",i)}},t.onclose=()=>this.handlePeerLeft(e),t.onerror=s=>{const i=s.error;i&&i.name==="OperationError"&&i.message.includes("User-Initiated Abort")?C.log(`Data channel for peer ${e.substring(0,8)} closed intentionally.`):console.error(`Data channel error with ${e.substring(0,8)}...:`,s)})}updatePeerIdDisplay(){const e=this._container?.querySelector("#sync-peer-id-display");if(e){const t=this.getPeerId();t?e.textContent=t:this.connectionState==="disconnected"||this.connectionState==="error"?e.textContent="Not Connected":e.textContent="Connecting..."}}updateConnectionState(e,t){this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal",this.updatePeerIdDisplay(),this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e))}_handleIncomingSyncMessage(e,t){this.signaling.handleIncomingMessage(e,t)}_announcePresence(e=null){if(!this.signaling.peerId)return;const t=localStorage.getItem("thoughtform_gardens"),n=t?JSON.parse(t):["home"];this.sendSyncMessage({type:"peer_introduction",peerId:this.signaling.peerId,gardens:n},e)}handlePeerIntroduction(e){if(!e.peerId||e.peerId===this.signaling.peerId)return;const t=!this.connectedPeers.has(e.peerId);this.connectedPeers.set(e.peerId,{id:e.peerId,gardens:e.gardens}),t&&this.addMessage(`Peer ${e.peerId} discovered.`),this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} peer${this.connectedPeers.size===1?"":"s"})`)}handlePeerLeft(e){if(this.connectedPeers.has(e)){const n=this.connectedPeers.get(e);this.connectedPeers.delete(e),this.addMessage(`Peer ${n.id} disconnected.`)}const t=this.peerConnections.get(e);t&&t.signalingState!=="closed"?(t.close(),this.peerConnections.delete(e)):this.peerConnections.has(e)&&this.peerConnections.delete(e),this.peerConnections.size===0&&this.connectionState==="connected-p2p"?this.updateConnectionState("connected-signal","Connected to tracker, waiting for peers..."):this.ui&&this.ui.updateStatus(`P2P Connected (${this.connectedPeers.size} total)`)}getPeerId(){return this.signaling.peerId}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui&&this.ui.addMessage(e)}sendSyncMessage(e,t=null,n=null){this.signaling.sendSyncMessage(e,t,n)}show(){this._container&&(this._container.style.display="block")}hide(){this._container&&(this._container.style.display="none")}destroy(){this.disconnect(),this.fileSync&&this.fileSync.destroy()}}function H(r,e,t=!0){const n=e.map(s=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${s}" ${t?"checked":""}>
      <span>${s}</span>
    </label>
  `).join("");return`
    <div>
      <p>${r}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${n}
      </div>
    </div>
  `}function Vn(){const r=document.getElementById("eruda-container");if(!r)return;A.init({container:r,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1});const e=A.get("console");return e&&e.config.set("maxLogNum",2e3),window.thoughtform&&(window.thoughtform.eruda=A),setTimeout(()=>{const t=r.querySelector(".luna-tab-item")?.parentElement;t&&t.addEventListener("click",n=>{const s=n.target.closest(".luna-tab-item");if(s){const i=s.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,i)}})},500),setTimeout(()=>{const t=r.querySelector(".eruda-elements");if(!t)return;let n=!1;new MutationObserver(()=>{const i=t.style.display!=="none";if(i&&!n){const o=document.querySelector(".eruda-control > .eruda-icon-select");o&&(o.click(),o.click())}n=i}).observe(t,{attributes:!0,attributeFilter:["style"]})},500),A.add({name:"Data",init(t){this._$el=t,t.html(`
        <div>
          <h2>Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">

          <hr>
          
          <h2>Maintenance</h2>
          <button id="update-app-btn" class="eruda-button">Update Application</button>
          <button id="reset-settings-btn" class="eruda-button">Reset Default Settings...</button>
          
          <hr>

          <h2>Danger Zone</h2>
          <p>
            <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
          </p>
        </div>
      `);const n=t.find("#export-btn")[0],s=t.find("#import-btn")[0],i=t.find("#import-file-input")[0],o=t.find("#clear-data-btn")[0],a=t.find("#reset-settings-btn")[0];t.find("#update-app-btn")[0].addEventListener("click",()=>{const h=window.thoughtform.updateApp;if(!h){const g=new b({title:"Error"});g.updateContent("<p>Update check function is not available. The PWA module may not have loaded correctly.</p>"),g.addFooterButton("Close",()=>g.destroy()),g.show();return}const u=new b({title:"Checking for Updates..."});u.updateContent("<p>Contacting server for the latest version...</p>"),u.show();let d=!1;const l=h.onNeedRefresh;l&&(h.onNeedRefresh=()=>{d=!0,u.destroy(),l()}),h(),setTimeout(()=>{d||(u.updateContent("<p>No new update found. You are on the latest version.</p>"),u.clearFooter(),u.addFooterButton("Close",()=>u.destroy())),h.onNeedRefresh!==l&&(h.onNeedRefresh=l)},5e3)}),a.addEventListener("click",async()=>{if(!await b.confirm({title:"Reset Default Settings?",message:"This will overwrite the default configuration and hook files in your 'Settings' garden with the latest versions from the application. <br><br><strong>Your custom scripts and other files will not be affected.</strong>",okText:"Reset Files"}))return;const u=new b({title:"Restoring Settings..."});let d="";const l=g=>{console.log(`[Settings Reset] ${g}`),d+=`<div>${g}</div>`,u.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${d}</div>`)};u.show(),await Dn(l)}),n.addEventListener("click",()=>{const h=localStorage.getItem("thoughtform_gardens"),u=h?JSON.parse(h):["home"],d=new b({title:"Select Gardens to Export"});d.updateContent(H("Choose which gardens to include in the export:",u));const l=d.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(f=>f.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(f=>f.checked=!1);const g=async()=>{const f=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(v=>v.value);d.destroy();const m=new b({title:"Exporting Gardens..."});m.updateContent("<p>Preparing export. Please wait...</p>");let y=!1,p="";m.addFooterButton("Cancel",()=>{y=!0,m.destroy(),console.log("Export cancelled by user.")}),m.show();try{await An(f,v=>{if(y)throw new Error("Export cancelled by user.");console.log(v),p+=v+"<br>",m.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${p}</div>`)}),y||(m.clearFooter(),m.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>m.destroy(),3e3))}catch(v){y||(console.error("Export failed:",v.message),m.clearFooter(),m.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${v.message}</p>`),m.addFooterButton("Close",()=>m.destroy()))}};d.addFooterButton("Export Selected",g),d.addFooterButton("Cancel",()=>d.destroy()),d.show()}),s.addEventListener("click",()=>i.click()),i.addEventListener("change",async()=>{const h=i.files[0];if(!h)return;const u=new b({title:"Select Gardens to Import"});u.updateContent("Scanning zip file..."),u.show();try{const d=await Mn(h);if(d.length===0){u.updateContent("No valid gardens found in this zip file."),u.addFooterButton("Close",()=>u.destroy());return}u.updateContent(H(`Found ${d.length} garden(s). Select which to import:`,d));const l=u.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(f=>f.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(f=>f.checked=!1);const g=async()=>{const f=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(y=>y.value);u.clearFooter(),u.updateContent("Starting import...");let m="";try{await Nn(h,f,y=>{m+=`${y}<br>`,u.updateContent(m)})}catch(y){console.error("Import failed:",y),u.updateContent(`<strong>Error during import:</strong><br>${y.message}`),u.addFooterButton("Close",()=>u.destroy())}};u.addFooterButton("Import Selected",g),u.addFooterButton("Cancel",()=>u.destroy())}catch(d){console.error("Failed to read zip file:",d),u.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${d.message}`),u.addFooterButton("Close",()=>u.destroy())}finally{i.value=""}}),o.addEventListener("click",()=>{const h=localStorage.getItem("thoughtform_gardens"),u=h?JSON.parse(h):[],d=new b({title:"Clear Garden Data"});d.updateContent(H("Select gardens to permanently delete:",u,!1));const l=d.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(m=>m.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(m=>m.checked=!1);const g=async()=>{const m=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(p=>p.value);d.clearFooter(),d.updateContent("Starting deletion...");let y="";try{await Fn(m,p=>{y+=`${p}<br>`,d.updateContent(y)})}catch(p){console.error("Deletion failed:",p),d.updateContent(`<strong>Error during deletion:</strong><br>${p.message}`),d.addFooterButton("Close",()=>d.destroy()).classList.add("destructive")}};d.addFooterButton("Delete Selected",g).classList.add("destructive"),d.addFooterButton("Cancel",()=>d.destroy()),d.show()})},show(){this._$el.show()},hide(){this._$el.hide()}}),A.add({name:"Sync",init(t){this.sync=new Kn,this.sync.init(t.get(0))},show(){this.sync.show()},hide(){this.sync.hide()},destroy(){this.sync.destroy()}}),A.add({name:"AI",init(t){this._$el=t,t.html(`
        <div style="padding: 10px;">
          <h2>AI Configuration</h2>
          <div class="sync-panel">
            <h3>Google Gemini</h3>
            <div class="sync-row" style="margin-bottom: 10px;">
              <label for="gemini-api-key" class="sync-label">API Key:</label>
              <input type="password" id="gemini-api-key" class="eruda-input flex-grow">
            </div>
            <div class="sync-row">
              <label for="gemini-model-name" class="sync-label">Model Name:</label>
              <input type="text" id="gemini-model-name" class="eruda-input flex-grow" placeholder="e.g., gemini-2.5-flash">
            </div>
          </div>
          <div class="sync-panel" style="margin-top: 15px;">
            <h3>Content Proxy</h3>
            <div class="sync-row">
              <label for="proxy-url" class="sync-label">Proxy URL:</label>
              <input type="text" id="proxy-url" class="eruda-input flex-grow" placeholder="https://proxy.thoughtform.garden">
            </div>
          </div>
          <button id="ai-save-config" class="eruda-button" style="margin-top: 15px;">Save</button>
          <div id="ai-save-status" style="margin-top: 10px; color: var(--base-accent-action);"></div>
        </div>
      `);const n=t.find("#gemini-api-key")[0],s=t.find("#gemini-model-name")[0],i=t.find("#proxy-url")[0],o=t.find("#ai-save-config")[0],a=t.find("#ai-save-status")[0];n.value=localStorage.getItem("thoughtform_gemini_api_key")||"",s.value=localStorage.getItem("thoughtform_gemini_model_name")||"gemini-2.5-flash",i.value=localStorage.getItem("thoughtform_proxy_url")||"";const c=()=>{const h=n.value.trim(),u=s.value.trim()||"gemini-2.5-flash",d=i.value.trim();localStorage.setItem("thoughtform_gemini_api_key",h),localStorage.setItem("thoughtform_gemini_model_name",u),localStorage.setItem("thoughtform_proxy_url",d),window.thoughtform.ai?.loadConfig(),a.textContent="Configuration saved!",setTimeout(()=>{a.textContent=""},3e3)};n.addEventListener("input",c),s.addEventListener("input",c),i.addEventListener("input",c),o.addEventListener("click",c)},show(){this._$el.show()},hide(){this._$el.hide()}}),A}class Yn{constructor({gitClient:e,editor:t}){this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="search",this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],n=[];await Promise.all(t.map(async s=>{const i=new k(s),o=await this.editor.sidebar.listAllPaths(i,"/");for(const a of o)if(!a.isDirectory){const c=a.path;n.push({garden:s,path:c,searchString:`${s} ${c.substring(1)}`.toLowerCase()})}})),this.crossGardenFileCache=n}async open(e="search"){if(!window.thoughtform.workspace.getActiveEditor()){console.error("CommandPalette cannot open: no active editor found.");return}if(!this.isOpen){if(this.isOpen=!0,this.mode=e,this.mode==="execute"?(this.titleElement.textContent="Executing a File...",this.input.placeholder="Find a .js file to execute across all gardens..."):(this.titleElement.textContent="Searching Files...",this.input.placeholder="Find file across all gardens..."),this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const t=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=t,this.input.disabled=!1,this.input.focus()}await this.search("")}}close(){if(!this.isOpen)return;this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown);const e=window.thoughtform.workspace.getActiveEditor();e&&e.editorView&&e.editorView.focus()}async search(e){this.query=e.toLowerCase();let t=this.crossGardenFileCache;this.mode==="execute"&&(t=this.crossGardenFileCache.filter(i=>i.path.endsWith(".js")));const n=await window.thoughtform.workspace.getActiveGitClient(),s=n?n.gardenName:"";this.query?this.results=t.filter(i=>{let o=0,a=0;for(;o<this.query.length&&a<i.searchString.length;)this.query[o]===i.searchString[a]&&o++,a++;return o===this.query.length}).sort((i,o)=>{const a=i.garden===s,c=o.garden===s;return a&&!c?-1:!a&&c?1:0}):this.results=(this.mode==="execute"?t:t.filter(i=>i.garden===s)).slice(0,100),this.selectedIndex=0,this.renderResults()}async renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="command-no-results">No matches found</li>';return}const e=await window.thoughtform.workspace.getActiveGitClient(),t=e?e.gardenName:"";this.results.forEach((n,s)=>{const i=document.createElement("li");i.className="command-result-item",i.dataset.index=s;const o=n.path.startsWith("/")?n.path.substring(1):n.path;n.garden!==t?i.innerHTML=`<span class="command-path">${o}</span> <span class="command-garden">${n.garden}</span>`:i.textContent=o,s===this.selectedIndex&&(i.classList.add("active"),i.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(i)})}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(this.mode==="execute"){this.close();const n=window.thoughtform.workspace.getActiveEditor(),s=await window.thoughtform.workspace.getActiveGitClient();if(n&&s){const i=`${t.garden}#${t.path}`;Z(i,n,s)}}else window.thoughtform.workspace.openFile(t.garden,t.path),this.close()}async handleInput(e){await this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".command-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}async function Ie(r,e){const t=r.pfs;let n=[];try{const s=await t.readdir(e);for(const i of s){if(i===".git")continue;const o=`${e==="/"?"":e}/${i}`;try{(await t.stat(o)).isDirectory()?n=n.concat(await Ie(r,o)):n.push(o)}catch{console.warn(`[Migration] Could not stat ${o}, skipping.`)}}}catch{console.warn(`[Migration] Could not read directory: ${e}.`)}return n}async function Xn(){console.log("%cStarting Thoughtform data migration...","font-weight: bold; font-size: 1.2em;"),console.log("This will convert all files from the old JSON format to raw content. This only needs to be run once.");const r=localStorage.getItem("thoughtform_gardens"),e=r?JSON.parse(r):["home"];if(e.length===0){console.log("No gardens found to migrate.");return}let t=0,n=0;for(const s of e){console.log(`%cProcessing garden: "${s}"`,"font-weight: bold; color: blue;");const i=new k(s),o=await Ie(i,"/");if(o.length===0){console.log("No files found in this garden.");continue}for(const a of o){t++;try{const c=await i.readFile(a);let h;try{h=JSON.parse(c)}catch{console.log(`- ${a} is not in JSON format, skipping.`);continue}if(h&&typeof h.content<"u"){const u=h.content;c!==u?(console.log(`%c  MIGRATING: ${a}`,"color: green;"),await i.writeFile(a,u),n++):console.log(`- ${a} content is already raw, skipping.`)}else console.log(`- ${a} is valid JSON but not the old format, skipping.`)}catch(c){console.error(`%c  ERROR: Failed to process ${a}.`,"color: red;",c)}}}console.log("%cMigration complete!","font-weight: bold; font-size: 1.2em;"),console.log(`Checked ${t} files across ${e.length} garden(s).`),console.log(`Migrated ${n} files.`),console.log("You should now refresh the page.")}async function Zn(r,e,t){const n=`https://generativelanguage.googleapis.com/v1beta/models/${e}:streamGenerateContent?key=${r}&alt=sse`,s={contents:[{parts:[{text:t}]}]};try{const i=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!i.ok){const c=await i.json();throw console.error("Gemini API Error:",c),new Error(`API request failed: ${c.error?.message||i.statusText}`)}const o=i.body.getReader(),a=new TextDecoder;return new ReadableStream({async pull(c){for(;;){const{done:h,value:u}=await o.read();if(h){c.close();break}const l=a.decode(u,{stream:!0}).split(`
`);for(const g of l)if(g.startsWith("data: "))try{const f=g.substring(5).trim(),y=JSON.parse(f)?.candidates?.[0]?.content?.parts?.[0]?.text;y&&c.enqueue(y)}catch{}}}})}catch(i){throw console.error("Failed to fetch from Gemini API:",i),i}}class Qn{constructor(e){if(!e)throw new Error("Traversal helper requires a gitClient instance.");this.gitClient=e}extractWikilinks(e){const t=/\[\[([^\[\]]+?)\]\]/g,n=new Set;let s;for(;s=t.exec(e);){const i=s[1].split("|")[0].trim();n.add(i)}return Array.from(n)}async readLinkContent(e,t){let n=t,s=e;e.includes("#")&&([n,s]=e.split("#")),s.startsWith("/")||(s=`/${s}`);const i=n!==this.gitClient.gardenName?`${n}#${s}`:s,o=n!==this.gitClient.gardenName?new k(n):this.gitClient;try{return{content:await o.readFile(s),fullIdentifier:i,gardenName:n}}catch(a){return console.error(`[Agent] Error reading ${i}:`,a),{content:null,fullIdentifier:i,gardenName:null}}}}const de=`You are a librarian's assistant, tasked with finding relevant information.
Your user has a goal. You have a list of potential documents (wikilinks) to investigate.
Your job is to quickly determine which of these documents are likely to contain information relevant to the user's goal.

**User Goal:**
{{goal}}

**Current Context Summary:**
{{context_summary}}

**Available Documents (Wikilinks):**
{{links}}

**Instructions:**
- Evaluate each link based on its name and the user's goal.
- You must respond ONLY with a valid JSON object.
- The JSON object should contain a single key, "relevant_links", which is an array of strings.
- The array should contain the exact names of the links you have deemed relevant.
- If no links are relevant, return an empty array.

**Example Response:**
{
  "relevant_links": ["/path/to/file.md", "/another/relevant-topic"]
}`,es=`You are a meticulous research assistant performing a self-critique.
You have been gathering information to answer a user's goal. Your task is to determine if you have enough information to form a reasonably confident and helpful answer.

**User Goal:**
{{goal}}

**Collected Context:**
---
{{context_buffer}}
---

**Instructions:**
-   Read the user's goal and the collected context.
-   Can you form a reasonably confident answer based on this context?
-   It's okay if the context is sparse, as long as you can use it to reason about the user's goal. For subjective questions (e.g., "is this a good idea?"), the user's own notes are often all the context you need.
-   Identify specific knowledge gaps only if the question is factual and the context is missing key information.
-   You must respond ONLY with a valid JSON object.

**JSON Schema:**
{
  "is_sufficient": boolean, // Can you provide a helpful, reasoned answer with this context?
  "gaps": string[] // If factual information is missing, list the key questions that remain. For subjective queries, this can be empty.
}

**Example Response (Insufficient for a factual question):**
{
  "is_sufficient": false,
  "gaps": ["The context explains what the gossip protocol is, but not how it's implemented in the server code.", "There are no details on the WebRTC handshake process."]
}

**Example Response (Sufficient for a subjective question):**
{
  "is_sufficient": true,
  "gaps": []
}`,ts=`You are an AI assistant embedded in Thoughtform.Garden, a personal knowledge system. Your role is to act as a direct extension of the user's thought process.

**Core Instructions:**
-   **Be direct and concise.** Get straight to the point.
-   **Do not introduce yourself or refer to your role as an AI.** Avoid all conversational filler.
-   **Synthesize, don't just summarize.** Provide a direct answer or reflection based on the user's goal and the provided context.
-   You can form a reasoned perspective based on the user's own notes, especially for subjective questions.
-   If the context is truly insufficient for a factual question, state what is missing.
-   Format your answer using Markdown.

**User's Goal:**
{{goal}}

**Provided Context:**
---
{{context_buffer}}
---

**Final Answer:**`,ns=2,z=2;function ss(r){const e=new Set,t=/(https?:\/\/[^\s"'`\]\)]+)|\[[^\]]+\]\((https?:\/\/[^\s"'`\]\)]+)\)/g;let n;for(;n=t.exec(r);){let s=n[2]||n[1];s&&(s=s.replace(/[.,;:`\])\s]+$/,""),e.add(s))}return e}async function is(r){try{const n=`${(localStorage.getItem("thoughtform_proxy_url")||"https://proxy.thoughtform.garden").replace(/\/$/,"")}?thoughtformgardenproxy=${encodeURIComponent(r)}`,s=await fetch(n);if(!s.ok){const o=await s.text();throw new Error(`Proxy request failed with status ${s.status}: ${o}`)}const i=await s.text();return`<context><website src="${r}">${i}</website></context>

---

`}catch(e){return console.error(`[Agent] Failed to fetch URL via proxy: ${r}`,e),`<context><website src="${r}">Error: Could not retrieve content. ${e.message}</website></context>

---

`}}class os{constructor({gitClient:e,aiService:t,startingFilePath:n}){this.gitClient=e,this.aiService=t,this.traversal=new Qn(this.gitClient),this.startingFilePath=n}run(e){const t={controller:null,enqueue(s){this.controller?.enqueue(s)},close(){this.controller?.close()},error(s){this.controller?.error(s)}},n=new ReadableStream({start(s){t.controller=s}});return this._orchestrate(e,t).catch(s=>{console.error("[Agent] Orchestration failed:",s),t.enqueue(`**Agent Error:**
> ${s.message}`),t.close()}),n}_sendStatus(e,t){e.enqueue(`[STATUS] ${t}`)}async _orchestrate(e,t){this._sendStatus(t,`Starting with goal: "${e}"`);let n="";const s=new Set;let i=0;const o=await this.gitClient.readFile(this.startingFilePath);n+=`## Context from ${this.startingFilePath}

${o}

---

`,s.add(this.startingFilePath),this._sendStatus(t,`Reading starting file: ${this.startingFilePath}`);const a=new Set;for(;i<z;){i++,this._sendStatus(t,`Analyzing context (Critique Loop ${i}/${z})...`),this._sendStatus(t,"Traversing internal links...");const d=await this._traverse(e,o,s,0,this.gitClient.gardenName,t);n+=d;const l=ss(n+`
`+e),g=Array.from(l).filter(m=>!a.has(m));if(g.length>0){this._sendStatus(t,`Found ${g.length} new external link(s). Evaluating relevance...`);const m=this._fillPrompt(de,{goal:e,context_summary:n.substring(0,2e3)+"...",links:JSON.stringify(g)}),p=(await this._getJsonCompletion(m)).relevant_links||[];if(p.length>0){this._sendStatus(t,`Found ${p.length} relevant external links. Fetching content...`);for(const v of p){this._sendStatus(t,`Fetching: ${v}`),a.add(v);const S=await is(v);n+=S}}else this._sendStatus(t,"No new relevant external links found.")}this._sendStatus(t,"Critiquing all gathered context for sufficiency...");const f=await this._critique(e,n);if(f.is_sufficient){this._sendStatus(t,"Context is sufficient. Synthesizing final answer...");break}else console.warn("[Agent] Critique failed. Gaps identified:",f.gaps),this._sendStatus(t,`Context is not yet sufficient. Gaps: ${f.gaps.join(", ")}`),i>=z&&(console.warn("[Agent] Max critique loops reached. Synthesizing with available info."),this._sendStatus(t,"Max loops reached. Synthesizing with available information..."))}const c=this._fillPrompt(ts,{goal:e,context_buffer:n}),u=(await this.aiService.getCompletion(c)).getReader();for(;;){const{done:d,value:l}=await u.read();if(d)break;t.enqueue(l)}t.close()}async _traverse(e,t,n,s,i,o){if(s>=ns)return"";const a=this.traversal.extractWikilinks(t);if(a.length===0)return"";const c=a.filter(g=>!n.has(g));if(c.length===0)return"";const h=this._fillPrompt(de,{goal:e,context_summary:t.substring(0,2e3)+"...",links:JSON.stringify(c)}),d=(await this._getJsonCompletion(h)).relevant_links||[];if(d.length===0)return"";this._sendStatus(o,`Found relevant internal links: ${d.join(", ")}`);let l="";for(const g of d){const{content:f,fullIdentifier:m,gardenName:y}=await this.traversal.readLinkContent(g,i);f!==null&&!n.has(m)&&(n.add(m),this._sendStatus(o,`Reading content from: ${m}`),l+=`## Context from ${m}

${f}

---

`,l+=await this._traverse(e,f,n,s+1,y,o))}return l}async _critique(e,t){const n=this._fillPrompt(es,{goal:e,context_buffer:t});return this._getJsonCompletion(n)}async _getJsonCompletion(e){const n=(await this.aiService.getCompletion(e)).getReader();let s="";for(;;){const{done:i,value:o}=await n.read();if(i)break;s+=o}try{const i=s.match(/```json\n([\s\S]*?)\n```|({[\s\S]*})/);if(!i)throw new Error("No JSON object found in the LLM response.");const o=i[1]||i[2];return JSON.parse(o)}catch(i){throw console.error("[Agent] Failed to parse JSON from LLM response:",i),console.error("[Agent] Raw response was:",s),new Error("The AI assistant did not return valid JSON. Please try again.")}}_fillPrompt(e,t){let n=e;for(const[s,i]of Object.entries(t))n=n.replace(new RegExp(`{{${s}}}`,"g"),String(i));return n}}class rs{constructor(){this.config={geminiApiKey:"",geminiModelName:"gemini-2.5-flash"},this.loadConfig()}loadConfig(){this.config.geminiApiKey=localStorage.getItem("thoughtform_gemini_api_key")||"";const e=localStorage.getItem("thoughtform_gemini_model_name");this.config.geminiModelName=e||"gemini-2.5-flash"}saveConfig(e,t){localStorage.setItem("thoughtform_gemini_api_key",e||""),localStorage.setItem("thoughtform_gemini_model_name",t||""),this.loadConfig()}async getCompletion(e){if(this.loadConfig(),!this.config.geminiApiKey)throw new Error("Gemini API key is not set. Please configure it in the AI dev tools panel.");return Zn(this.config.geminiApiKey,this.config.geminiModelName,e)}async handleAiChatRequest(e){let t=-1;const n="🤖 Thinking...";try{const s=e.state.selection.main.head,i=e.state.doc.lineAt(s),o=e.state.doc.toString();let a=i.number;for(;a>1&&e.state.doc.line(a-1).text.trim().startsWith(">$");)a--;let c=i.number;for(;c<e.state.doc.lines&&e.state.doc.line(c+1).text.trim().startsWith(">$");)c++;const h=e.state.doc.line(a).from,u=e.state.doc.line(c).to;let d=e.state.sliceDoc(h,u);d=d.split(`
`).map(L=>L.trim().replace(/^>\$\s*/,"")).join(`
`);const l=/\[\[.+?\]\]/.test(o);let g;const f=u,m={changes:{from:f,insert:`
${n}`}};if(e.dispatch(m),t=f+1,l){const L=window.thoughtform.workspace.getActiveEditor();if(!L||!L.gitClient)throw new Error("Cannot find active editor or gitClient instance for agent.");g=new os({gitClient:L.gitClient,aiService:this,startingFilePath:L.filePath}).run(d)}else{const L=`CONTEXT:
---
${o}
---

Based on the context above, respond to the following prompt:

${d}`;g=await this.getCompletion(L)}const y=g.getReader(),p=`
<response>
`;e.dispatch({changes:{from:t,to:t+n.length,insert:p}});let v=!1,S="",x=t+p.length,E=x;for(;;){const{done:L,value:Q}=await y.read();if(L)break;const M=Q;if(M.startsWith("[STATUS]")){if(v)continue;S+=`  <div class="agent-status">${M.substring(8).trim()}</div>
`,e.dispatch({changes:{from:x,to:E,insert:S}}),E=x+S.length}else v?(e.dispatch({changes:{from:E,insert:M}}),E+=M.length):(v=!0,e.dispatch({changes:{from:x,to:E,insert:M}}),E=x+M.length)}const F=`
</response>

>$ `;e.dispatch({changes:{from:E,insert:F},selection:{anchor:E+F.length}})}catch(s){console.error("AI Chat Error:",s),t!==-1&&e.dispatch({changes:{from:t,to:t+n.length,insert:`🚨 Error: ${s.message}`}})}}}function as(){return new rs}const cs={"interface.yml":W(Se),"keymaps.yml":W(Ee)};class ls{constructor(){this.cache=new Map,this.isInitialized=!1}async initialize(){this.isInitialized||(this.isInitialized=!0)}async get(e,t){await this.initialize();const n=window.thoughtform.editor?.gitClient.gardenName;if(!n)return{value:this._getHardcoded(e,t),sourceGarden:null};if(n!=="Settings"){const o=`settings/${e}`,{value:a,sourceGarden:c}=await this._readAndCache(n,o,t);if(a!==void 0)return{value:a,sourceGarden:c}}const{value:s,sourceGarden:i}=await this._readAndCache("Settings",e,t);return s!==void 0?{value:s,sourceGarden:i}:{value:this._getHardcoded(e,t),sourceGarden:null}}async getHook(e){const t=window.thoughtform.editor.gitClient.gardenName,n=`hooks/${e}`;if(t!=="Settings"){const o=`settings/${n}`,a=new k(t);try{return await a.pfs.stat(`/${o}`),`${t}#${o}`}catch{}}const s=n,i=new k("Settings");try{return await i.pfs.stat(`/${s}`),`Settings#${s}`}catch{}return null}async _readAndCache(e,t,n){const s=`/${t}`,i=`${e}#${s}`;if(this.cache.has(i)){const o=this.cache.get(i);return{value:n?o?.[n]:o,sourceGarden:e}}try{const o=new k(e),a=await o.readFile(s);try{await o.pfs.stat(s)}catch{return{value:void 0,sourceGarden:null}}const c=W(a);return this.cache.set(i,c),{value:n?c?.[n]:c,sourceGarden:e}}catch(o){return console.warn(`[ConfigService] Could not read or parse ${i}.`,o),this.cache.set(i,null),{value:void 0,sourceGarden:null}}}_getHardcoded(e,t){const n=cs[e];return t?n?.[t]:n}invalidate(e,t){const n=`${e}#/${t}`;this.cache.delete(n)}}function ds(){return new ls}class hs{constructor(){this.subscribers={}}subscribe(e,t){return this.subscribers[e]||(this.subscribers[e]=[]),this.subscribers[e].push(t),()=>{this.subscribers[e]=this.subscribers[e].filter(n=>n!==t)}}publish(e,t=null){this.subscribers[e]&&this.subscribers[e].forEach(n=>{try{n(t)}catch(s){console.error(`[EventBus] Error in subscriber for event "${e}":`,s)}})}}function us(){return new hs}const he={"app:load":"load.js","file:create":"create.js","file:delete":"delete.js"};class gs{constructor(e){this.eventBus=e,this.config=window.thoughtform.config}initialize(){for(const e in he)this.eventBus.subscribe(e,t=>{this.handleEvent(e,t)})}async handleEvent(e,t){const n=he[e];if(!n)return;const s=window.thoughtform.workspace.getActiveEditor(),i=window.thoughtform.workspace.getActiveGitClient();if(!s||!i)return;const o=await this.config.getHook(n);o&&Z(o,s,i,t)}}const fs="modulepreload",ms=function(r){return"/"+r},ue={},ps=function(e,t,n){let s=Promise.resolve();if(t&&t.length>0){let c=function(h){return Promise.all(h.map(u=>Promise.resolve(u).then(d=>({status:"fulfilled",value:d}),d=>({status:"rejected",reason:d}))))};document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),a=o?.nonce||o?.getAttribute("nonce");s=c(t.map(h=>{if(h=ms(h),h in ue)return;ue[h]=!0;const u=h.endsWith(".css"),d=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${h}"]${d}`))return;const l=document.createElement("link");if(l.rel=u?"stylesheet":fs,u||(l.as="script"),l.crossOrigin="",l.href=h,a&&l.setAttribute("nonce",a),document.head.appendChild(l),u)return new Promise((g,f)=>{l.addEventListener("load",g),l.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${h}`)))})}))}function i(o){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=o,window.dispatchEvent(a),!a.defaultPrevented)throw o}return s.then(o=>{for(const a of o||[])a.status==="rejected"&&i(a.reason);return e().catch(i)})};function ys(r={}){const{immediate:e=!1,onNeedRefresh:t,onOfflineReady:n,onRegistered:s,onRegisteredSW:i,onRegisterError:o}=r;let a,c,h;const u=async(l=!0)=>{await c,h?.()};async function d(){if("serviceWorker"in navigator){if(a=await ps(async()=>{const{Workbox:l}=await import("./chunk-vendor.js").then(g=>g.Y);return{Workbox:l}},__vite__mapDeps([0,1])).then(({Workbox:l})=>new l("/sw.js",{scope:"/",type:"classic"})).catch(l=>{o?.(l)}),!a)return;h=()=>{a?.messageSkipWaiting()};{let l=!1;const g=()=>{l=!0,a?.addEventListener("controlling",f=>{f.isUpdate&&window.location.reload()}),t?.()};a.addEventListener("installed",f=>{typeof f.isUpdate>"u"?typeof f.isExternal<"u"&&f.isExternal?g():!l&&n?.():f.isUpdate||n?.()}),a.addEventListener("waiting",g)}a.register({immediate:e}).then(l=>{i?i("/sw.js",l):s?.(l)}).catch(l=>{o?.(l)})}}return c=d(),u}class ws{constructor(e){this.initialGitClient=e,this.paneTree=this.createInitialPaneTree(),this.panes=new Map,this.activePaneId="pane-1",this.mainContainer=document.querySelector("main"),this.isResizing=!1,this.gitClients=new Map,this.gitClients.set(e.gardenName,e)}createInitialPaneTree(){const e=(window.location.hash||"#/home").substring(1);return{type:"leaf",id:"pane-1",activeBufferIndex:0,buffers:[{garden:this.initialGitClient.gardenName,path:e}]}}async getGitClient(e){if(!this.gitClients.has(e)){const t=new k(e);await t.initRepo(),this.gitClients.set(e,t)}return this.gitClients.get(e)}async render(){this.mainContainer.style.display="flex",this.mainContainer.style.gridTemplateColumns="",this.mainContainer.style.gridTemplateRows="",this.panes.forEach(({editor:e})=>{e&&e.editorView&&e.editorView.destroy()}),this.panes.clear(),this.mainContainer.innerHTML="",await this._renderNode(this.paneTree,this.mainContainer),this.setActivePane(this.activePaneId)}async _renderNode(e,t){if(e.type==="leaf"){const n=document.createElement("div");n.className="pane",n.dataset.paneId=e.id,t.appendChild(n);const s=e.buffers[e.activeBufferIndex],i=await this.getGitClient(s.garden),o=new O({target:n,gitClient:i,commandPalette:window.thoughtform.commandPalette,initialFile:s.path});await new Promise(a=>{const c=setInterval(()=>{o.isReady&&(clearInterval(c),a())},50)}),this.panes.set(e.id,{element:n,editor:o}),n.addEventListener("click",()=>{this.setActivePane(e.id)})}else if(e.type.startsWith("split-")){const n=e.type.split("-")[1];t.style.display="grid";const[s,i]=e.children,o=document.createElement("div");o.className="pane-container";const a=document.createElement("div");a.className="pane-container";const c=document.createElement("div");c.className=`pane-resizer pane-resizer-${n}`,n==="vertical"?t.style.gridTemplateColumns=`${e.splitPercentage}% auto 1fr`:t.style.gridTemplateRows=`${e.splitPercentage}% auto 1fr`,t.appendChild(o),t.appendChild(c),t.appendChild(a),this._initializeResizer(c,t,e,n),await this._renderNode(s,o),await this._renderNode(i,a)}}_initializeResizer(e,t,n,s){const i=o=>{o.preventDefault(),this.isResizing=!0;const a=document.getElementById("resize-overlay");a.style.display="block",a.style.cursor=s==="vertical"?"col-resize":"row-resize";const c=u=>{if(!this.isResizing)return;const d=t.getBoundingClientRect();if(s==="vertical"){const l=(u.clientX-d.left)/d.width*100;n.splitPercentage=Math.max(10,Math.min(90,l)),t.style.gridTemplateColumns=`${n.splitPercentage}% auto 1fr`}else{const l=(u.clientY-d.top)/d.height*100;n.splitPercentage=Math.max(10,Math.min(90,l)),t.style.gridTemplateRows=`${n.splitPercentage}% auto 1fr`}},h=()=>{this.isResizing=!1,a.style.display="none",a.style.cursor="default",document.removeEventListener("mousemove",c),document.removeEventListener("mouseup",h),document.removeEventListener("touchmove",c),document.removeEventListener("touchend",h)};document.addEventListener("mousemove",c),document.addEventListener("mouseup",h),document.addEventListener("touchmove",c,{passive:!1}),document.addEventListener("touchend",h)};e.addEventListener("mousedown",i),e.addEventListener("touchstart",i,{passive:!1})}setActivePane(e){if(!this.panes.has(e))return;this.activePaneId=e,this.panes.forEach((n,s)=>{n.element.classList.toggle("is-active-pane",s===e)}),this.panes.get(e)?.editor?.editorView.focus(),this._updateURL(),window.thoughtform.sidebar?.refresh()}async splitPane(e,t){let n=null;const s=i=>{if(i.type==="leaf"&&i.id===e){n=`pane-${Date.now()}`;const o=JSON.parse(JSON.stringify(i));return o.id=n,{type:`split-${t}`,splitPercentage:50,children:[i,o]}}return i.type.startsWith("split-")&&(i.children=i.children.map(o=>s(o))),i};this.paneTree=s(this.paneTree),await this.render(),n&&this.setActivePane(n)}async openFile(e,t){const n=this.getActivePaneInfo();if(!n)return;const{node:s,pane:i}=n,o=s.buffers.findIndex(c=>c.garden===e&&c.path===t);o!==-1?s.activeBufferIndex=o:(s.buffers.push({garden:e,path:t}),s.activeBufferIndex=s.buffers.length-1);const a=await this.getGitClient(e);i.editor.gitClient=a,await i.editor.loadFile(t),this.setActivePane(this.activePaneId),this._updateURL()}_updateURL(){const e=this.getActivePaneInfo();if(!e)return;const t=e.node.buffers[e.node.activeBufferIndex],n=new URL(import.meta.url).pathname,s=n.lastIndexOf("/src/"),o=`${s>-1?n.substring(0,s):""}/${encodeURIComponent(t.garden)}`,a=`#${encodeURI(t.path)}`,c=`${o}${a}`;(window.location.pathname!==o||window.location.hash!==a)&&window.history.pushState(null,"",c)}_getPaneList(){const e=[],t=n=>{n.type==="leaf"?e.push(n):n.type.startsWith("split-")&&n.children.forEach(t)};return t(this.paneTree),e}selectNextPane(){const e=this._getPaneList(),t=e.findIndex(s=>s.id===this.activePaneId);if(t===-1)return;const n=(t+1)%e.length;this.setActivePane(e[n].id)}selectPrevPane(){const e=this._getPaneList(),t=e.findIndex(s=>s.id===this.activePaneId);if(t===-1)return;const n=(t-1+e.length)%e.length;this.setActivePane(e[n].id)}_findAndSwap(e){let t=null,n=-1;const s=i=>{if(i.type.startsWith("split-")){const o=i.children.findIndex(a=>a.id===this.activePaneId);if(o!==-1){t=i,n=o;return}i.children.forEach(s)}};s(this.paneTree),t&&(e==="up"&&n>0?([t.children[n],t.children[n-1]]=[t.children[n-1],t.children[n]],this.render()):e==="down"&&n<t.children.length-1&&([t.children[n],t.children[n+1]]=[t.children[n+1],t.children[n]],this.render()))}movePaneUp(){this._findAndSwap("up")}movePaneDown(){this._findAndSwap("down")}async closeActivePane(){const e=this._getPaneList();if(e.length<=1){console.log("Cannot close the last pane.");return}const t=e.findIndex(o=>o.id===this.activePaneId);if(t===-1)return;const n=(t+1)%e.length,s=e[n===t?0:n].id,i=o=>{if(!o||o.type==="leaf")return o;const a=o.children.findIndex(c=>c.id===this.activePaneId);if(a!==-1){const c=1-a;return o.children[c]}return o.children=o.children.map(c=>i(c)).filter(Boolean),o.children.length===1?o.children[0]:o};this.paneTree=i(this.paneTree),await this.render(),this.setActivePane(s)}getActivePaneInfo(){if(!this.activePaneId)return null;let e=null;const t=s=>{s.type==="leaf"&&s.id===this.activePaneId?e=s:s.type.startsWith("split-")&&s.children.forEach(t)};t(this.paneTree);const n=this.panes.get(this.activePaneId);return e&&n?{node:e,pane:n}:null}getActiveEditor(){const e=this.panes.get(this.activePaneId);return e?e.editor:null}async getActiveGitClient(){const e=this.getActivePaneInfo();if(!e)return this.initialGitClient;const t=e.node.buffers[e.node.activeBufferIndex];return await this.getGitClient(t.garden)}}function vs(r){return new ws(r)}window.Buffer=Me.Buffer;window.process={env:{}};function bs(){window.addEventListener("popstate",async()=>{const r=new URL(import.meta.url).pathname,e=r.lastIndexOf("/src/"),t=e>-1?r.substring(0,e):"";let n=window.location.pathname.startsWith(t)?window.location.pathname.substring(t.length):window.location.pathname;n=n.replace(/^\/|\/$/g,"")||"home",n=decodeURIComponent(n);let s=(window.location.hash||"#/home").substring(1);s=decodeURI(s),await window.thoughtform.workspace.openFile(n,s)})}async function Cs(){const r=new URL(import.meta.url).pathname,e=r.lastIndexOf("/src/"),t=e>-1?r.substring(0,e):"";await new k("Settings").initRepo();let s=window.location.pathname.startsWith(t)?window.location.pathname.substring(t.length):window.location.pathname;s=s.replace(/^\/|\/$/g,"")||"home",s=decodeURIComponent(s),console.log(`Base Path: "${t}"`),console.log(`Loading garden: "${s}"`);const i=new k(s);window.thoughtform={ui:{},ai:as(),config:ds(),events:us(),workspace:vs(i)};const o=ys({onNeedRefresh(){b.confirm({title:"Update Available",message:"A new version of Thoughtform Garden is available. Reload to apply the update?",okText:"Reload"}).then(d=>{d&&o(!0)})},onOfflineReady(){console.log("App is ready for offline use.")}});window.thoughtform.updateApp=o,Tn(),Vn(),window.thoughtform.runMigration=Xn,window.onerror=function(d,l,g,f,m){return console.error("Caught global error:",d,m),window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1},window.onunhandledrejection=function(d){console.error("Caught unhandled promise rejection:",d.reason),window.thoughtform.ui.toggleDevtools?.(!0,"console")};const a={gitClient:i};window.thoughtform.editor=a;const c=new Yn({gitClient:null,editor:null});window.thoughtform.commandPalette=c,await window.thoughtform.workspace.render();const h=window.thoughtform.workspace.getActiveEditor();if(!h){console.error("FATAL: Workspace manager failed to create an initial editor.");return}window.thoughtform.editor=h,c.gitClient=h.gitClient,c.editor=h,window.thoughtform.config.initialize();const u=new gs(window.thoughtform.events);u.initialize(),window.thoughtform.hooks=u,bs(),window.thoughtform.events.publish("app:load")}Cs();
