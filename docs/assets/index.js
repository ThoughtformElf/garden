import{Q as oe,e as f,R as I,U as N,V as K,W as ae}from"./chunk-vendor.js";import{E as $,H as re,s as ce,D as v,V as S,R as E,S as X,k as Y,a as le,b as de,m as he,L as A,j as Z,h as Q,c as ee,y as ue,x as ge,d as me,e as fe,C as _,A as pe,f as ye,v as we,g as be,l as Ce,i as ve}from"./chunk-codemirror.js";import{F as Se,g as b}from"./chunk-git.js";import{c as Ee}from"./chunk-gpt-tokenizer.js";import{e as P}from"./chunk-eruda.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();class H{constructor({targetSelector:e,items:t,containerItems:n=[],itemSelector:s,dataAttribute:o}){if(this.targetSelector=e,this.items=t,this.containerItems=n,this.itemSelector=s,o){const r=o.replace("data-","");this.dataAttributeKey=r.replace(/-([a-z])/g,a=>a[1].toUpperCase())}else this.dataAttributeKey=null;this.menuElement=null,this.longPressTimeout=null,this.boundHideMenu=this.hideMenu.bind(this),this.init()}init(){this.createMenuElement(),document.addEventListener("contextmenu",this.handleContextMenu.bind(this)),document.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.handleTouchEnd.bind(this)),document.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}createMenuElement(){this.menuElement=document.createElement("div"),this.menuElement.className="context-menu",document.body.appendChild(this.menuElement)}handleContextMenu(e){const t=e.target.closest(this.targetSelector);if(!t)return;e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null;n?this.showMenu(e.clientX,e.clientY,this.items,n):this.showMenu(e.clientX,e.clientY,this.containerItems,t)}handleTouchStart(e){const t=e.target.closest(this.targetSelector);t&&(this.longPressTimeout=setTimeout(()=>{e.preventDefault();const n=this.itemSelector?e.target.closest(this.itemSelector):null,s=n?this.items:this.containerItems;this.showMenu(e.touches[0].clientX,e.touches[0].clientY,s,n||t),this.longPressTimeout=null},500))}handleTouchEnd(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}showMenu(e,t,n,s){this.menuElement.innerHTML="",this.menuElement.style.display="block";const o=this.dataAttributeKey&&s.dataset[this.dataAttributeKey]?s.dataset[this.dataAttributeKey]:null;n.forEach(u=>{if(u.type==="separator"){const p=document.createElement("div");p.className="context-menu-separator",this.menuElement.appendChild(p);return}const m=document.createElement("button");m.className="context-menu-item",m.textContent=u.label,m.addEventListener("click",()=>{u.action(o),this.hideMenu()}),this.menuElement.appendChild(m)});const r=this.menuElement.offsetWidth,a=this.menuElement.offsetHeight,{innerWidth:c,innerHeight:l}=window;let g=e,d=t;e+r>c&&(g=c-r-5),t+a>l&&(d=l-a-5),this.menuElement.style.top=`${d}px`,this.menuElement.style.left=`${g}px`,document.addEventListener("click",this.boundHideMenu),document.addEventListener("contextmenu",this.boundHideMenu)}hideMenu(e){e&&this.menuElement.contains(e.target)||this.menuElement.style.display==="block"&&(this.menuElement.style.display="none",document.removeEventListener("click",this.boundHideMenu),document.removeEventListener("contextmenu",this.boundHideMenu))}}class w{constructor({title:e="Notice"}={}){this.overlay=document.createElement("div"),this.overlay.className="modal-overlay hidden",this.container=document.createElement("div"),this.container.className="modal-container",this.header=document.createElement("div"),this.header.className="modal-header",this.header.textContent=e,this.content=document.createElement("div"),this.content.className="modal-content",this.content.innerHTML="Loading...",this.footer=document.createElement("div"),this.footer.className="modal-footer",this.footer.style.display="none",this.container.appendChild(this.header),this.container.appendChild(this.content),this.container.appendChild(this.footer),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}destroy(){this.overlay.parentNode&&this.overlay.remove()}updateContent(e){this.content.innerHTML=e}addFooterButton(e,t){this.footer.style.display="flex";const n=document.createElement("button");return n.textContent=e,n.addEventListener("click",t),this.footer.appendChild(n),n}clearFooter(){this.footer.innerHTML="",this.footer.style.display="none"}static prompt({title:e,label:t,defaultValue:n=""}){return new Promise(s=>{const o=new w({title:e}),r=`modal-input-${Date.now()}`,a=`
        <div class="modal-prompt">
          <label for="${r}">${t}</label>
          <input type="text" id="${r}" value="${n}">
        </div>
      `;o.updateContent(a);const c=o.content.querySelector(`#${r}`),l=()=>{s(c.value),o.destroy()},g=()=>{s(null),o.destroy()};c.addEventListener("keydown",d=>{d.key==="Enter"?(d.preventDefault(),l()):d.key==="Escape"&&g()}),o.addFooterButton("OK",l),o.addFooterButton("Cancel",g),o.show(),c.focus(),c.select()})}static confirm({title:e,message:t,okText:n="OK",cancelText:s="Cancel",destructive:o=!1}){return new Promise(r=>{const a=new w({title:e});a.updateContent(`<p>${t}</p>`);const c=()=>{r(!0),a.destroy()},l=()=>{r(!1),a.destroy()},g=a.addFooterButton(n,c);o&&g.classList.add("destructive"),a.addFooterButton(s,l),a.show()})}}const ke={async renderFiles(i){try{const e=await this.listFiles(this.gitClient,"/"),t=new Map;for(const[o,r,a]of i)r!==a&&t.set(`/${o}`,"modified");const n=decodeURIComponent(window.location.hash.substring(1)),s=e.sort().map(o=>{const r=`#${o}`,a=t.get(o)||"unmodified",c=o.startsWith("/")?o.substring(1):o,l=[`status-${a}`];return o===n&&l.push("active"),`<li><a href="${r}" class="${l.join(" ")}" data-filepath="${o}">${c}</a></li>`}).join("");this.contentContainer.innerHTML=`<ul>${s}</ul>`}catch(e){console.error("Error rendering file list:",e),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load files.</p>'}},async handleNewFile(){const i=await w.prompt({title:"New File",label:"Enter new file name:"});if(!i)return;const e=`/${i}`;try{await this.gitClient.pfs.stat(e),await this.showAlert({title:"File Exists",message:`File "${i}" already exists.`})}catch(t){if(t.code==="ENOENT"){const n={content:"",lastModified:new Date().toISOString()};await this.gitClient.writeFile(e,JSON.stringify(n,null,2)),window.location.hash=`#${e}`}else console.error("Error checking for file:",t),await this.showAlert({title:"Error",message:"An error occurred while creating the file."})}},async handleRename(i){const e=await w.prompt({title:"Rename File",label:`Enter new name for ${i.substring(1)}:`,defaultValue:i.substring(1)});if(!e||e===i.substring(1))return;const t=`/${e}`;try{const n=t.substring(0,t.lastIndexOf("/"));n&&await this.ensureDir(n),await this.gitClient.pfs.rename(i,t),decodeURIComponent(window.location.hash)===`#${i}`?window.location.hash=`#${t}`:await this.refresh()}catch(n){console.error("Error renaming file:",n),await this.showAlert({title:"Error",message:"Failed to rename file. Check console for details."})}},async handleDuplicate(i){const e=i.substring(0,i.lastIndexOf("/")),t=i.substring(i.lastIndexOf("/")+1),n=t.lastIndexOf("."),s=n>0;let o;if(s){const c=t.substring(0,n),l=t.substring(n);o=`${c} (copy)${l}`}else o=`${t} (copy)`;const r=await w.prompt({title:"Duplicate File",label:"Enter name for duplicated file:",defaultValue:o});if(!r)return;const a=`${e}/${r}`;try{const c=await this.gitClient.pfs.readFile(i,"utf8");let l=c;try{const d=JSON.parse(c);d&&typeof d.content<"u"&&(l=d.content)}catch{}const g={content:l,lastModified:new Date().toISOString()};await this.gitClient.writeFile(a,JSON.stringify(g,null,2)),await this.refresh()}catch(c){console.error("Error duplicating file:",c),await this.showAlert({title:"Error",message:"Failed to duplicate file."})}},async handleDelete(i){if(await this.showConfirm({title:"Delete File",message:`Are you sure you want to permanently delete "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=decodeURIComponent(window.location.hash)===`#${i}`;await this.gitClient.pfs.unlink(i),t?window.location.hash="#/README.md":await this.refresh()}catch(t){console.error("Error deleting file:",t),await this.showAlert({title:"Error",message:"Failed to delete file."})}}};class k{constructor(e){if(!e)throw new Error("A garden name is required to initialize the Git client.");this.gardenName=e,this.fs=new Se(`garden-fs-${this.gardenName}`),this.pfs=this.fs.promises}async initRepo(){try{await this.pfs.stat("/.git"),console.log(`Garden "${this.gardenName}" already exists. Loading it.`);return}catch{}console.log(`Initializing new garden: "${this.gardenName}"...`);try{await b.init({fs:this.fs,dir:"/",defaultBranch:"main"});const e=`# Welcome to your new garden: ${this.gardenName}

Start writing your thoughts here.`;await this.pfs.writeFile("/README.md",e,"utf8"),this.registerNewGarden(),console.log("New garden initialized successfully.")}catch(e){console.error("Error initializing repository:",e)}}registerNewGarden(){try{const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):[];t.includes(this.gardenName)||(t.push(this.gardenName),localStorage.setItem("thoughtform_gardens",JSON.stringify(t)))}catch(e){console.error("Failed to update garden registry:",e)}}async stage(e){const t=e.startsWith("/")?e.substring(1):e;await b.add({fs:this.fs,dir:"/",filepath:t})}async unstage(e){const t=e.startsWith("/")?e.substring(1):e;await b.remove({fs:this.fs,dir:"/",filepath:t})}async discard(e){console.log(`[discard] Starting discard for: ${e}`);const t=e.startsWith("/")?e.substring(1):e;try{const s=(await this.getStatuses()).find(r=>r[0]===t);if(!s){console.warn(`[discard] Could not find status for "${t}".`);return}s[1]===0?(console.log(`[discard] File is untracked. Deleting: ${e}`),await this.pfs.unlink(e),console.log(`[discard] Successfully unlinked ${e}.`)):(console.log(`[discard] File is tracked. Force checking out from HEAD: ${t}`),await b.checkout({fs:this.fs,dir:"/",filepaths:[t],force:!0}),console.log(`[discard] Successfully checked out ${t}.`))}catch(n){console.error(`[discard] An error occurred for ${e}:`,n)}}async commit(e){const t=await b.commit({fs:this.fs,dir:"/",message:e,author:{name:"User",email:"user@thoughtform.garden"}});return this.markGardenAsDirty(!1),t}async log(){try{return await b.log({fs:this.fs,dir:"/",depth:20})}catch{return console.log("No commit history found."),[]}}async getChangedFiles(e){try{const n=(await b.readCommit({fs:this.fs,dir:"/",oid:e})).commit.parent[0];if(!n)return(await b.listFiles({fs:this.fs,dir:"/",ref:e})).map(r=>`/${r}`);const s=[];return await b.walk({fs:this.fs,dir:"/",trees:[b.TREE({ref:n}),b.TREE({ref:e})],map:async function(o,[r,a]){if(o===".")return;const c=r?await r.oid():null,l=a?await a.oid():null;if(c===l)return;(a?await a.type():r?await r.type():null)==="blob"&&s.push(`/${o}`)}}),s}catch(t){return console.error(`Error getting changed files for commit ${e}:`,t),[]}}async readBlob(e){return this.readBlobFromCommit("HEAD",e)}async readBlobFromCommit(e,t){const n=t.startsWith("/")?t.substring(1):t;if(!e)return"";try{const s=e==="HEAD"?await b.resolveRef({fs:this.fs,dir:"/",ref:"HEAD"}):e,{blob:o}=await b.readBlob({fs:this.fs,dir:"/",oid:s,filepath:n});return new TextDecoder().decode(o)}catch(s){return s.name==="NotFoundError"?"":(console.error(`Could not read blob for ${n} from commit ${e}:`,s),null)}}async readFile(e){try{return await this.pfs.readFile(e,"utf8")}catch{return console.warn(`File not found: ${e}`),`// "${e}" does not exist yet, type anywhere to create it.`}}async writeFile(e,t){try{await this.pfs.writeFile(e,t,"utf8"),this.markGardenAsDirty(!0)}catch(n){if(n.code==="ENOENT")try{const s=e.substring(0,e.lastIndexOf("/"));if(s&&s!=="/"){try{await this.pfs.mkdir(s,{recursive:!0})}catch(o){console.warn(`Warning: Could not ensure directory exists for ${e} (Tried to create ${s}):`,o.message||o)}await this.pfs.writeFile(e,t,"utf8"),this.markGardenAsDirty(!0)}else throw console.error(`Unexpected ENOENT error for filepath '${e}' where dirname is '${s}':`,n),n}catch(s){throw console.error(`Error after retrying write for ${e}. Original error:`,n.message||n),console.error("Retry error:",s.message||s),s}else throw console.error(`Error writing file ${e}:`,n),n}}markGardenAsDirty(e){try{const t=localStorage.getItem("dirty_gardens"),n=t?JSON.parse(t):[],s=n.indexOf(this.gardenName);e&&s===-1?n.push(this.gardenName):!e&&s!==-1&&n.splice(s,1),localStorage.setItem("dirty_gardens",JSON.stringify(n))}catch(t){console.error("Failed to update dirty garden registry:",t)}}async getStatuses(){return b.statusMatrix({fs:this.fs,dir:"/"})}}const xe={async renderGardens(){try{const i=localStorage.getItem("thoughtform_gardens"),e=i?JSON.parse(i):[],t=localStorage.getItem("dirty_gardens"),n=t?new Set(JSON.parse(t||"[]")):new Set;if(e.length===0){this.contentContainer.innerHTML='<p class="sidebar-info">No gardens found. Create one!</p>';return}let s="";for(const o of e.sort()){const r=decodeURIComponent(o),a=n.has(r),c=`/${encodeURIComponent(o)}`,l=this.gitClient.gardenName===r,g=[];l&&g.push("active"),a&&g.push("status-modified"),s+=`<li><a href="${c}" class="${g.join(" ")}" data-garden-name="${o}">${r}</a></li>`}this.contentContainer.innerHTML=`<ul>${s}</ul>`,this.contentContainer.querySelectorAll("[data-garden-name]").forEach(o=>{o.addEventListener("click",r=>{this.gitClient.gardenName!==r.target.dataset.gardenName&&sessionStorage.setItem("sidebarActiveTab","Files")})})}catch(i){console.error("Error rendering garden list:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load gardens.</p>'}},async handleNewGarden(){const i=await w.prompt({title:"New Garden",label:"Enter new garden name:"});if(!i||!i.trim())return;const e=localStorage.getItem("thoughtform_gardens");if((e?JSON.parse(e):[]).includes(i)){await this.showAlert({title:"Garden Exists",message:`Garden "${i}" already exists.`});return}sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname=`/${encodeURIComponent(i)}`},async handleDuplicateGarden(i){if(!i)return;const t=`${decodeURIComponent(i)} (copy)`,n=await w.prompt({title:"Duplicate Garden",label:"Enter name for new garden:",defaultValue:t});if(!n||!n.trim()||n===i)return;const s=this.contentContainer.innerHTML;this.contentContainer.innerHTML='<p class="sidebar-info">Preparing duplication...<br>(UI may be unresponsive)</p>',setTimeout(async()=>{try{const o=new k(i),r=new k(n);await r.initRepo();const a=await this.listFiles(o,"/");let c=0;for(const l of a){c++,this.contentContainer.innerHTML=`<p class="sidebar-info">Copying file ${c} of ${a.length}:<br>${l.substring(1)}</p>`;const g=await o.readFile(l);await r.writeFile(l,g)}sessionStorage.setItem("sidebarActiveTab","Files"),this.contentContainer.innerHTML='<p class="sidebar-info">Duplication complete. Redirecting...</p>',setTimeout(()=>{window.location.replace(`/${encodeURIComponent(n)}`)},500)}catch(o){console.error("Error duplicating garden:",o),await this.showAlert({title:"Error",message:"Failed to duplicate garden. Check console for details."}),this.contentContainer.innerHTML=s}},100)},async handleDeleteGarden(i){if(!i)return;if(i==="home"){await this.showAlert({title:"Action Not Allowed",message:'The default "home" garden cannot be deleted.'});return}if(await this.showConfirm({title:"Delete Garden",message:`ARE YOU SURE you want to permanently delete the garden "${i}"? This cannot be undone.`,okText:"Delete",destructive:!0}))try{const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];n=n.filter(o=>o!==i),localStorage.setItem("thoughtform_gardens",JSON.stringify(n));const s=`garden-fs-${i}`;await new Promise((o,r)=>{const a=indexedDB.deleteDatabase(s);a.onsuccess=()=>o(),a.onerror=c=>r(c.target.error),a.onblocked=()=>{this.showAlert({title:"Deletion Blocked",message:"Could not delete the database because it's still in use. Please refresh the page and try again."}),r(new Error("Deletion blocked"))}}),this.gitClient.gardenName===i?(sessionStorage.setItem("sidebarActiveTab","Files"),window.location.pathname="/home"):await this.refresh()}catch(t){console.error("Error deleting garden:",t),t.message!=="Deletion blocked"&&await this.showAlert({title:"Error",message:"Failed to delete garden."})}}},Fe={async renderGitView(){try{const[i,e]=await Promise.all([this.gitClient.getStatuses(),this.gitClient.log()]),t=[],n=[];for(const[g,d,u,m]of i){const p=`/${g}`;(d!==u||d!==m)&&(u===m?t.push({filepath:p,status:"staged"}):n.push({filepath:p,status:"unstaged"}))}const s=`
        <div class="git-commit-area">
          <textarea id="git-commit-message" placeholder="Commit message..." rows="3"></textarea>
          <button id="git-commit-button" disabled>Commit</button>
        </div>
      `,o=this.renderFileSection("Changes",n,!1),r=this.renderFileSection("Staged Changes",t,!0),a=this.renderHistorySection(e),c=this.contentContainer.querySelector("#git-commit-message")?.value||"";this.contentContainer.innerHTML=`
        <div class="git-view-container">
          ${s}
          ${r}
          ${o}
          ${a}
        </div>
      `;const l=this.contentContainer.querySelector("#git-commit-message");l&&(l.value=c),this.addGitViewListeners(),this.updateCommitButtonState()}catch(i){console.error("Error rendering Git view:",i),this.contentContainer.innerHTML='<p class="sidebar-error">Could not load Git status.</p>'}},renderFileSection(i,e,t){const n=t?'<button class="git-action-button unstage" title="Unstage Changes">-</button>':'<button class="git-action-button stage" title="Stage Changes">+</button>';let s="";return e.length>0?s=e.map(r=>{const a=r.filepath.startsWith("/")?r.filepath.substring(1):r.filepath;return`
          <li class="git-file-item ${this.editor.filePath===r.filepath?"active":""}" data-filepath="${r.filepath}">
            <span class="git-file-path">${a}</span>
            <span class="git-file-actions">
              <button class="git-action-button discard" title="Discard Changes">⭯</button>
              ${n}
            </span>
          </li>
        `}).join(""):s=`<li><span class="no-changes">No ${t?"staged ":""}changes.</span></li>`,`
      <div class="git-file-section ${t?"git-staged-section":""}">
        <h3 class="git-section-header">${i} (${e.length})</h3>
        <ul class="git-file-list">
          ${s}
        </ul>
      </div>
    `},renderHistorySection(i){let e="";return i.length>0?e=i.map(t=>{const n=t.commit.message.split(`
`)[0],s=t.oid.substring(0,7),o=t.commit.author.name,r=new Date(t.commit.author.timestamp*1e3).toLocaleString(),a=t.commit.parent[0]||"";return`
              <li class="git-history-item" data-oid="${t.oid}" data-parent-oid="${a}" data-author="${o}" data-date="${r}">
                <div class="git-history-header">
                  <span class="git-history-message">${n}</span>
                  <span class="git-history-oid">${s}</span>
                </div>
                <div class="git-history-details" style="display: none;"></div>
              </li>
            `}).join(""):e='<li><span class="no-changes">No commit history.</span></li>',`
        <div class="git-history-section">
            <h3 class="git-section-header">History</h3>
            <ul class="git-history-list">
                ${e}
            </ul>
        </div>
    `},updateCommitButtonState(){const i=this.contentContainer.querySelector("#git-commit-message"),e=this.contentContainer.querySelector("#git-commit-button");if(!i||!e)return;const t=this.contentContainer.querySelector(".git-staged-section .git-file-item")!==null,n=i.value.trim().length>0;e.disabled=!(t&&n)},addGitViewListeners(){const i=this.contentContainer.querySelector("#git-commit-message");i&&!i.dataset.listenerAttached&&(i.dataset.listenerAttached="true",i.addEventListener("input",()=>this.updateCommitButtonState()));const e=this.contentContainer.querySelector(".git-view-container");e&&!e.dataset.listenerAttached&&(e.dataset.listenerAttached="true",e.addEventListener("click",async n=>{const s=n.target,o=s.closest(".git-file-item"),r=s.closest(".git-history-item");if(o){const a=o.dataset.filepath;s.matches(".git-file-path")?(this.editor.filePath!==a&&await this.editor.loadFile(a),this.editor.showDiff(await this.gitClient.readBlob(a))):s.matches(".git-action-button")&&(n.stopPropagation(),s.classList.contains("discard")?await this.showConfirm({title:"Discard Changes",message:`Are you sure you want to discard all changes to "${a}"? This cannot be undone.`,okText:"Discard",destructive:!0})&&(await this.gitClient.discard(a),this.editor.filePath===a&&await this.editor.forceReloadFile(a),await this.refresh()):s.classList.contains("stage")?(await this.gitClient.stage(a),await this.renderGitView()):s.classList.contains("unstage")&&(await this.gitClient.unstage(a),await this.renderGitView()))}else if(r&&s.closest(".git-history-header")){const a=r.querySelector(".git-history-details");if(a.style.display!=="none")a.style.display="none";else if(a.style.display="block",!a.dataset.loaded){a.innerHTML='<span class="no-changes">Loading...</span>';const l=r.dataset.oid,g=await this.gitClient.getChangedFiles(l),d=r.dataset.author,u=r.dataset.date,m=g.map(p=>{const y=typeof p=="string"?p:p.path;return`<div class="history-file-path" data-path="${y}">${y.substring(1)}</div>`}).join("");a.innerHTML=`
                    <div class="commit-meta">
                      <div><strong>Author:</strong> ${d}</div>
                      <div><strong>Date:</strong> ${u}</div>
                    </div>
                    <div class="history-file-list">${m||'<span class="no-changes">No files changed.</span>'}</div>
                  `,a.dataset.loaded="true"}}else if(s.closest(".history-file-path")){e.querySelectorAll(".history-file-path.active").forEach(d=>d.classList.remove("active")),s.classList.add("active");const a=s.closest(".git-history-item"),c=s.dataset.path,l=a.dataset.oid,g=a.dataset.parentOid;await this.editor.previewHistoricalFile(c,l,g)}}));const t=this.contentContainer.querySelector("#git-commit-button");t&&!t.dataset.listenerAttached&&(t.dataset.listenerAttached="true",t.addEventListener("click",async()=>{const s=this.contentContainer.querySelector("#git-commit-message").value.trim();if(s)try{t.disabled=!0,t.textContent="Committing...",await this.gitClient.commit(s),this.editor.hideDiff(),await this.refresh()}catch(o){console.error("Commit failed:",o),await this.showAlert({title:"Commit Failed",message:"The commit failed. Please see the console for more details."}),this.updateCommitButtonState(),t.textContent="Commit"}}))}};class Pe{constructor({target:e,gitClient:t,editor:n}){if(!t)throw new Error("Sidebar requires a gitClient instance.");if(!n)throw new Error("Sidebar requires an editor instance.");this.gitClient=t,this.editor=n,this.targetSelector=e;const s=document.querySelector(this.targetSelector);if(!s){console.error(`Sidebar container not found: ${this.targetSelector}`);return}this.container=s,this.tabsContainer=document.createElement("div"),this.tabsContainer.className="sidebar-tabs",this.contentContainer=document.createElement("div"),this.contentContainer.className="sidebar-content",this.container.appendChild(this.tabsContainer),this.container.appendChild(this.contentContainer),this.activeTab=sessionStorage.getItem("sidebarActiveTab")||"Files",Object.assign(this,ke),Object.assign(this,xe),Object.assign(this,Fe)}async init(){console.log("Initializing sidebar..."),this.renderTabs(),this.setupContextMenus(),await this.refresh(),console.log("Sidebar initialized.")}async showAlert({title:e="Notice",message:t}){return new Promise(n=>{const s=new w({title:e});s.updateContent(`<p>${t}</p>`),s.addFooterButton("OK",()=>{s.destroy(),n()}),s.show()})}async showConfirm({title:e,message:t,okText:n="OK",destructive:s=!1}){return w.confirm({title:e,message:t,okText:n,destructive:s,cancelText:"Cancel"})}async ensureDir(e){const t=e.split("/").filter(s=>s);let n="";for(const s of t){n+=`/${s}`;try{await this.gitClient.pfs.stat(n)}catch(o){if(o.code==="ENOENT")try{await this.gitClient.pfs.mkdir(n)}catch(r){if(r.code!=="EEXIST")throw r}else throw o}}}setupContextMenus(){const e=[{type:"separator"},{label:"Command Palette",action:()=>window.thoughtform.commandPalette.open()}];new H({targetSelector:".sidebar-content.files-view",itemSelector:"[data-filepath]",dataAttribute:"data-filepath",items:[{label:"New File",action:()=>this.handleNewFile()},{label:"Rename",action:t=>this.handleRename(t)},{label:"Duplicate",action:t=>this.handleDuplicate(t)},{label:"Delete",action:t=>this.handleDelete(t)},...e],containerItems:[{label:"New File",action:()=>this.handleNewFile()},...e]}),new H({targetSelector:".sidebar-content.gardens-view",itemSelector:"[data-garden-name]",dataAttribute:"data-garden-name",items:[{label:"New Garden",action:()=>this.handleNewGarden()},{label:"Duplicate",action:t=>this.handleDuplicateGarden(t)},{label:"Delete",action:t=>this.handleDeleteGarden(t)},...e],containerItems:[{label:"New Garden",action:()=>this.handleNewGarden()},...e]})}renderTabs(){this.tabsContainer.innerHTML=`
      <button class="sidebar-tab" data-tab="Files">Files</button>
      <button class="sidebar-tab" data-tab="Gardens">Gardens</button>
      <button class="sidebar-tab" data-tab="Git">Git</button>
    `,this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(e=>{e.addEventListener("click",t=>{const n=t.target.dataset.tab,s=this.activeTab;if(this.activeTab=n,sessionStorage.setItem("sidebarActiveTab",this.activeTab),s==="Git"&&n!=="Git"){const o=this.editor.getFilePath(window.location.hash);this.editor.loadFile(o)}this.refresh()})})}async refresh(){this.tabsContainer.querySelectorAll(".sidebar-tab").forEach(n=>{n.classList.toggle("active",n.dataset.tab===this.activeTab)}),this.contentContainer.className="sidebar-content",this.contentContainer.classList.add(`${this.activeTab.toLowerCase()}-view`);const e=await this.gitClient.getStatuses();this.activeTab==="Files"?await this.renderFiles(e):this.activeTab==="Gardens"?await this.renderGardens():this.activeTab==="Git"&&await this.renderGitView();const t=e.some(([,n,s])=>n!==s);this.tabsContainer.querySelector('[data-tab="Git"]').classList.toggle("dirty",t)}async listFiles(e,t){const n=e.pfs;let s=[];try{const o=await n.readdir(t);for(const r of o){if(r===".git")continue;const a=`${t==="/"?"":t}/${r}`;try{(await n.stat(a)).isDirectory()?s=s.concat(await this.listFiles(e,a)):s.push(a)}catch{console.warn(`Could not stat ${a}, skipping.`)}}}catch{console.log(`Directory not found: ${t}. No files to list.`)}return s}}const $e=oe.define(),Le=$.theme({"&":{color:"var(--color-text-primary)",backgroundColor:"var(--color-background-primary)"},".cm-content":{caretColor:"var(--color-text-bright)"},"&.cm-focused .cm-cursor":{borderLeftColor:"var(--color-text-bright)"},"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"var(--color-background-hover)"},".cm-gutters":{backgroundColor:"var(--color-background-primary)",color:"var(--color-text-secondary)",border:"none"}},{dark:!0}),De=re.define([{tag:f.keyword,color:"var(--base-accent-emphasis)",class:"cm-keyword"},{tag:[f.name,f.deleted,f.character,f.propertyName,f.macroName],color:"var(--base-accent-info)",class:"cm-name"},{tag:[f.processingInstruction,f.string,f.inserted],color:"var(--base-accent-emphasis)",class:"cm-string"},{tag:[f.function(f.variableName),f.labelName],color:"var(--base-accent-action)",class:"cm-function"},{tag:[f.color,f.constant(f.name),f.standard(f.name)],color:"var(--base-accent-action)",class:"cm-constant"},{tag:[f.definition(f.name),f.separator],color:"var(--base-text-primary)",class:"cm-definition"},{tag:[f.typeName,f.className,f.number,f.changed,f.annotation,f.modifier,f.self,f.namespace],color:"var(--base-accent-action)",class:"cm-type"},{tag:[f.operator,f.operatorKeyword,f.url,f.escape,f.regexp,f.link,f.special(f.string)],color:"var(--base-text-primary)",class:"cm-operator"},{tag:[f.meta,f.comment],color:"var(--base-text-muted)",class:"cm-comment"},{tag:$e,color:"var(--base-accent-highlight)",fontStyle:"italic",class:"cm-hashtag"},{tag:f.strong,fontWeight:"bold",class:"cm-strong"},{tag:f.emphasis,fontStyle:"italic",class:"cm-emphasis"},{tag:f.strikethrough,textDecoration:"line-through",class:"cm-strikethrough"},{tag:f.link,color:"var(--base-syntax-wikilink-bg)",textDecoration:"underline",class:"cm-link"},{tag:f.heading,fontWeight:"bold",color:"var(--base-accent-info)",class:"cm-heading"},{tag:[f.atom,f.bool,f.special(f.variableName)],color:"var(--base-accent-action)",class:"cm-atom"},{tag:f.invalid,color:"var(--base-accent-destructive)",class:"cm-invalid"}]),Ie=[Le,ce(De)];function Me(i,e){const t=document.createElement("div");t.id="drag-overlay",t.innerHTML="<p>Drop files or folders to add them to the garden</p>",document.body.appendChild(t);const n=l=>{l&&(t.innerHTML=`<p>${l}</p>`),t.classList.add("visible")},s=()=>{t.classList.remove("visible")},o=async l=>{const g=await l.text(),d=`/${l.name}`;console.log(`[DragDrop] Writing file: ${d}`),await i.writeFile(d,g)},r=async l=>{const g=await I.loadAsync(l),d=[];g.forEach((u,m)=>{if(!m.dir){const p=m.async("string").then(y=>{const C=`/${u}`;return console.log(`[DragDrop] Extracting: ${C}`),i.writeFile(C,y)});d.push(p)}}),await Promise.all(d)},a=async l=>{const g=[],d=[],u=async(p,y)=>{if(p.isFile){const C=await new Promise(F=>p.file(F)),T=`${y}/${C.name}`;C.name.toLowerCase().endsWith(".zip")?d.push(C):g.push({file:C,path:T})}else if(p.isDirectory){const C=p.createReader(),T=await new Promise(F=>C.readEntries(F));for(const F of T)await u(F,`${y}/${p.name}`)}};for(const p of l)await u(p,"");g.length>0&&d.length===0&&n(`Importing ${g.length} file(s)...`);const m=g.map(async({file:p,path:y})=>{const C=await p.text();return console.log(`[DragDrop] Writing file: ${y}`),i.writeFile(y,C)});await Promise.all(m);for(const p of d)await c(p)},c=l=>new Promise(g=>{const d=new w({title:`Import Zip File: ${l.name}`});d.updateContent("<p>How would you like to import this .zip file?</p>"),d.addFooterButton("Extract Files to Garden",async()=>{d.updateContent("<p>Extracting files...</p>"),d.clearFooter();try{await r(l)}catch(u){console.error("Zip extraction failed",u),d.updateContent("<p>Error during extraction. Check console.</p>")}d.destroy(),g()}),d.addFooterButton("Import as Single .zip File",async()=>{d.updateContent("<p>Importing file...</p>"),d.clearFooter();try{await o(l)}catch(u){console.error("Zip import failed",u),d.updateContent("<p>Error during import. Check console.</p>")}d.destroy(),g()}),d.addFooterButton("Cancel",()=>{d.destroy(),g()}),d.show()});window.addEventListener("dragenter",l=>{l.preventDefault(),l.dataTransfer.types.includes("Files")&&n("Drop files or folders to add them to the garden")}),window.addEventListener("dragover",l=>{l.preventDefault()}),window.addEventListener("dragleave",l=>{l.clientX===0&&l.clientY===0&&s()}),window.addEventListener("drop",async l=>{l.preventDefault(),s();const g=l.dataTransfer.items;if(!g||g.length===0)return;const d=Array.from(g).map(u=>u.webkitGetAsEntry()).filter(Boolean);if(d.length>0){console.log(`[DragDrop] Processing ${d.length} dropped item(s).`);try{await a(d),console.log("[DragDrop] All items processed.")}catch(u){console.error("[DragDrop] An error occurred during import:",u),await e.showAlert({title:"Import Error",message:"An error occurred while importing. Please check the console."})}finally{await e.refresh(),setTimeout(()=>{s()},500)}}})}const Te=v.mark({class:"cm-hashtag"}),Ne=S.fromClass(class{decorations;constructor(i){this.decorations=this.findHashtags(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findHashtags(i.view))}findHashtags(i){const e=new E,t=/#[\w-]+/g;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let r;for(;r=t.exec(o);){const a=n+r.index,c=a+r[0].length,l=i.state.doc.lineAt(a);if(a>l.from){const m=i.state.doc.sliceString(a-1,a);if(/\s/.test(m)===!1)continue}const g=/https?:\/\/[^\s]+/g;let d,u=!1;for(;d=g.exec(l.text);){const m=l.from+d.index,p=m+d[0].length;if(a>=m&&c<=p){u=!0;break}}u||e.add(a,c,Te)}}return e.finish()}},{decorations:i=>i.decorations}),O=X.define({create:()=>({gitClient:null,sidebar:null}),update:(i,e)=>i});async function Ae(i,e){if(!e.sidebar||!e.gitClient)return null;const t=await e.sidebar.listFiles(e.gitClient,"/"),n=i.toLowerCase().endsWith(".md")?i.toLowerCase():`${i.toLowerCase()}.md`;for(const s of t)if((s.startsWith("/")?s.substring(1):s).toLowerCase()===n)return s;return null}async function te(i,e){if(!i)return;let t=i.split("|")[0].trim(),n=null;if(t.includes("#")&&([n,t]=t.split("#")),n){t.startsWith("/")||(t=`/${t}`),/\.[^/.]+$/.test(t)||(t=`${t}.md`);const s=new URL(import.meta.url).pathname,o=s.lastIndexOf("/src/"),r=o>-1?s.substring(0,o):"";window.location.href=`${window.location.origin}${r}/${encodeURIComponent(n)}#${encodeURIComponent(t)}`}else{const s=await Ae(t,e);let o;s?o=s:(/\.[^/.]+$/.test(t)||(t=`${t}.md`),o=t.startsWith("/")?t:`/${t}`),window.location.hash=`#${encodeURIComponent(o)}`}}const Re=Y.of([{key:"Mod-Enter",run:i=>{const e=i.state.field(O);if(!e.gitClient)return!1;const t=i.state.selection.main.head,n=i.state.doc.lineAt(t),s=[{type:"wikilink",regex:/\[\[([^\[\]]+?)\]\]/g},{type:"markdown",regex:/\[[^\]]*\]\(([^)]+)\)/g},{type:"naked",regex:/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g}];for(const{type:o,regex:r}of s){let a;for(;a=r.exec(n.text);){const c=n.from+a.index,l=c+a[0].length;if(t>=c&&t<=l){if(o==="wikilink")te(a[1],e);else{let g=o==="markdown"?a[1]:a[0];g.startsWith("www.")&&(g=`https://${g}`),window.open(g,"_blank","noopener,noreferrer")}return!0}}}return!1}}]),Ue=v.mark({class:"cm-wikilink"});class Ge{constructor(e){this.view=e,this.decorations=this.findWikilinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove)}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=this.view.state.field(O);t.gitClient&&te(e.textContent.slice(2,-2),t)}onMouseDown(e){const t=e.target.closest(".cm-wikilink");t&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleNavigation(t))}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){const t=e.target.closest(".cm-wikilink");t&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(t),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findWikilinks(e.view))}findWikilinks(e){const t=new E,n=/\[\[([^\[\]]+?)\]\]/g;for(const{from:s,to:o}of e.visibleRanges){const r=e.state.doc.sliceString(s,o);let a;for(;a=n.exec(r);){const c=s+a.index,l=c+a[0].length;t.add(c,l,Ue)}}return t.finish()}}const Be=S.fromClass(Ge,{decorations:i=>i.decorations}),_e=v.mark({class:"cm-checkbox-todo"}),qe=v.mark({class:"cm-checkbox-done"}),Oe=v.mark({class:"cm-checkbox-doing"}),He=S.fromClass(class{decorations;constructor(i){this.decorations=this.findCheckboxes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findCheckboxes(i.view))}findCheckboxes(i){const e=new E,t=/^\s*(\[([ |x|-])\])/gm;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let r;for(;r=t.exec(o);){const a=r[2],c=n+r.index+r[0].indexOf("["),l=c+3;a===" "?e.add(c,l,_e):a==="x"?e.add(c,l,qe):a==="-"&&e.add(c,l,Oe)}}return e.finish()}},{decorations:i=>i.decorations}),We=v.mark({class:"cm-timestamp"}),ze=S.fromClass(class{decorations;constructor(i){this.decorations=this.findTimestamps(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findTimestamps(i.view))}findTimestamps(i){const e=new E,t=/^\s*(?:>\s*)*(\d{4,})\s/gm;for(const{from:n,to:s}of i.visibleRanges){const o=i.state.doc.sliceString(n,s);let r;for(;r=t.exec(o);){const a=r[0],c=r[1],l=n+r.index+a.indexOf(c),g=l+c.length;e.add(l,g,We)}}return e.finish()}},{decorations:i=>i.decorations}),je=v.mark({class:"cm-naked-link"});function Je(i){return i?i.startsWith("www.")?"https://"+i:i:null}class Ve{constructor(e){this.view=e,this.decorations=this.findNakedLinks(e),this.longPressTimeout=null,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.view.dom.addEventListener("mousedown",this.onMouseDown),this.view.dom.addEventListener("mouseup",this.onMouseUp),this.view.dom.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.view.dom.addEventListener("touchend",this.onTouchEnd),this.view.dom.addEventListener("touchmove",this.onTouchMove)}destroy(){this.clearLongPressTimeout(),this.view.dom.removeEventListener("mousedown",this.onMouseDown),this.view.dom.removeEventListener("mouseup",this.onMouseUp),this.view.dom.removeEventListener("touchstart",this.onTouchStart),this.view.dom.removeEventListener("touchend",this.onTouchEnd),this.view.dom.removeEventListener("touchmove",this.onTouchMove)}handleNavigation(e){const t=e.target.closest(".cm-naked-link, .cm-url");if(!t)return!1;const n=Je(t.textContent);return n&&window.open(n,"_blank","noopener,noreferrer"),!0}onMouseDown(e){(e.ctrlKey||e.metaKey)&&this.handleNavigation(e)&&e.preventDefault()}onMouseUp(){this.clearLongPressTimeout()}onTouchStart(e){e.target.closest(".cm-naked-link, .cm-url")&&(e.preventDefault(),this.longPressTimeout=setTimeout(()=>{this.handleNavigation(e),this.longPressTimeout=null},500))}onTouchEnd(){this.clearLongPressTimeout()}onTouchMove(){this.clearLongPressTimeout()}clearLongPressTimeout(){this.longPressTimeout&&(clearTimeout(this.longPressTimeout),this.longPressTimeout=null)}update(e){(e.docChanged||e.viewportChanged)&&(this.decorations=this.findNakedLinks(e.view))}findNakedLinks(e){const t=new E,n=/(https?:\/\/[^\s]+)|(www\.[^\s]+)/g;for(const{from:s,to:o}of e.visibleRanges){const r=e.state.doc.sliceString(s,o);let a;for(;a=n.exec(r);){const c=e.state.doc.lineAt(s+a.index);if(/\[.*\]\(.*\)/.test(c.text)&&c.text.includes(`](${a[0]})`))continue;const l=s+a.index,g=l+a[0].length;t.add(l,g,je)}}return t.finish()}}const Ke=S.fromClass(Ve,{decorations:i=>i.decorations}),Xe=v.line({class:"cm-blockquote"}),Ye=S.fromClass(class{decorations;constructor(i){this.decorations=this.findBlockquotes(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findBlockquotes(i.view))}findBlockquotes(i){const e=new E,t=/^\s*>\s/;for(const{from:n,to:s}of i.visibleRanges){let o=n;for(;o<=s;){const r=i.state.doc.lineAt(o);t.test(r.text)&&e.add(r.from,r.from,Xe),o=r.to+1}}return e.finish()}},{decorations:i=>i.decorations}),Ze=v.line({class:"cm-hr"}),Qe=S.fromClass(class{decorations;constructor(i){this.decorations=this.findRulers(i)}update(i){(i.docChanged||i.viewportChanged)&&(this.decorations=this.findRulers(i.view))}findRulers(i){const e=new E,t=/^\s*([-=*_]){3,}\s*$/;for(const{from:n,to:s}of i.visibleRanges){let o=n;for(;o<=s;){const r=i.state.doc.lineAt(o);t.test(r.text)&&e.add(r.from,r.from,Ze),o=r.to+1}}return e.finish()}},{decorations:i=>i.decorations}),et=[Ne,Be,He,ze,Ke,Ye,Qe],W=le.define(de),tt=he({base:fe,codeLanguages:[A.of({name:"javascript",load:()=>Promise.resolve(Z())}),A.of({name:"html",load:()=>Promise.resolve(Q())}),A.of({name:"css",load:()=>Promise.resolve(ee())})]});function z(i){const e=i.split("/").pop(),t=e.includes(".")?e.split(".").pop().toLowerCase():"";switch(e){case".gitignore":case".npmrc":case".editorconfig":case"Dockerfile":return W}switch(t){case"js":return Z();case"css":return ee();case"html":return Q();case"json":return me();case"xml":return ge();case"yaml":case"yml":return ue();case"sh":case"bash":case"zsh":return W;default:return tt}}const nt=v.mark({class:"cm-diff-inserted"});function j(i,e){const t=[],n=e.doc.toString(),s=N(i,n);let o=0;for(const[r,a]of s)r===N.INSERT&&t.push(nt.range(o,o+a.length)),r!==N.DELETE&&(o+=a.length);return v.set(t)}const R=new _;function st(i){return X.define({create(e){return j(i,e)},update(e,t){return t.docChanged?j(i,t.state):e.map(t.changes)},provide:e=>$.decorations.from(e)})}const it=S.fromClass(class{constructor(i){this.view=i,this.statusBar=document.createElement("div"),this.statusBar.className="token-status-bar",this.countElement=document.createElement("span"),this.countElement.className="token-count",this.statusBar.appendChild(this.countElement);const e=i.dom.closest("main");e?e.appendChild(this.statusBar):i.dom.parentNode.insertBefore(this.statusBar,i.dom.nextSibling),this.debouncedUpdate=K(this.updateTokenCount.bind(this),250),this.updateTokenCount()}update(i){i.docChanged&&this.debouncedUpdate()}updateTokenCount(){try{const i=this.view.state.doc.toString(),e=Ee(i);this.countElement.textContent=`Tokens: ${e.toLocaleString()}`}catch(i){console.warn("Token counting error:",i),this.countElement.textContent="Tokens: Error"}}destroy(){this.debouncedUpdate.cancel(),this.statusBar&&this.statusBar.remove()}});function ot(){return it}const D=pe.define();class M{static editors=[];constructor({url:e,target:t="body main",editorConfig:n={},gitClient:s}){if(!s)throw new Error("Editor requires a gitClient instance.");window.location.hash||(window.location.hash="#README.md"),this.targetSelector=t,this.url=e||window.location.hash,this.editorConfig=n,this.gitClient=s,this.editorView=null,this.sidebar=null,this.filePath=this.getFilePath(this.url),this.isReady=!1,this.languageCompartment=new _,this.tokenCounterCompartment=new _,this.debouncedHandleUpdate=K(this.handleUpdate.bind(this),500),this.init()}async init(){const e=document.querySelector(this.targetSelector);if(!e){console.error(`Target container not found: ${this.targetSelector}`);return}await this.gitClient.initRepo(),this.sidebar=new Pe({target:"#sidebar",gitClient:this.gitClient,editor:this}),await this.sidebar.init(),Me(this.gitClient,this.sidebar);const t=await this.loadFileContent(this.filePath),n=document.getElementById("loading-indicator");n&&n.remove(),e.style.display="flex";const s=$.updateListener.of(o=>{o.docChanged&&!o.transactions.some(r=>r.annotation(D))&&this.debouncedHandleUpdate(o.state.doc.toString())});ye.map("jj","<Esc>","insert"),this.editorView=new $({doc:t,extensions:[O.init(()=>({gitClient:this.gitClient,sidebar:this.sidebar})),Re,Y.of([ve]),we(),be,$.lineWrapping,Ce,Ie,this.languageCompartment.of(z(this.filePath)),s,...et,R.of([]),this.tokenCounterCompartment.of(ot()),...this.editorConfig.extensions||[]],parent:e}),M.editors.push(this),this.isReady=!0,this.listenForNavigation(),this.editorView.focus()}async loadFileContent(e){try{const t=await this.gitClient.readFile(e);try{const n=JSON.parse(t);if(n&&typeof n.content<"u")return n.content}catch{}return t}catch(t){return console.warn(`Could not read file ${e}, starting with empty content.`,t),""}}async showDiff(e){if(e===null){console.error("Cannot show diff, original content is null."),this.hideDiff();return}const t=st(e);this.editorView.dispatch({effects:R.reconfigure(t)})}hideDiff(){this.editorView.dispatch({effects:R.reconfigure([])})}listenForNavigation(){window.addEventListener("hashchange",async()=>{this.hideDiff();const e=this.getFilePath(window.location.hash);e&&this.filePath!==e&&await this.loadFile(e)})}async previewHistoricalFile(e,t,n){const[s,o]=await Promise.all([this.gitClient.readBlobFromCommit(t,e),this.gitClient.readBlobFromCommit(n,e)]);if(s===null||o===null){await this.sidebar.showAlert({title:"Error",message:"Could not load historical diff for this file."});return}this.editorView.dispatch({changes:{from:0,to:this.editorView.state.doc.length,insert:s},annotations:D.of(!0)}),this.showDiff(o)}async loadFile(e){console.log(`Loading ${e}...`),this.hideDiff();const t=await this.loadFileContent(e);this.filePath=e;const n=z(e);this.editorView.dispatch({effects:this.languageCompartment.reconfigure(n)});const s=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:s.length,insert:t},annotations:D.of(!0)}),this.sidebar&&await this.sidebar.refresh(),this.editorView.focus()}async forceReloadFile(e){console.log(`forceReloadFile: Forcibly reloading ${e} from disk.`);const t=await this.loadFileContent(e);this.filePath=e;const n=this.editorView.state.doc;this.editorView.dispatch({changes:{from:0,to:n.length,insert:t},annotations:D.of(!0)}),this.hideDiff()}async handleUpdate(e){if(!this.isReady)return;if(this.filePath!==this.getFilePath(window.location.hash)){console.log("In preview mode, not saving changes.");return}const t={content:e,lastModified:new Date().toISOString()};console.log(`Saving ${this.filePath}...`),await this.gitClient.writeFile(this.filePath,JSON.stringify(t,null,2)),this.sidebar&&await this.sidebar.refresh()}getFilePath(e){let t=e.startsWith("#")?e.substring(1):e;return t=decodeURIComponent(t),t||(t="README.md"),t}}window.Editor=M;function at(){rt(),ct()}function rt(){const i=document.querySelector(".app-container"),e=document.getElementById("resizer"),t=document.getElementById("resize-overlay");if(!i||!e||!t)return;const n=document.createElement("button");n.id="sidebar-toggle-icon",n.title="Toggle Sidebar (Ctrl + [)",e.appendChild(n);let s=0,o=!1;const r=()=>{if(i.classList.contains("sidebar-collapsed")){const m=localStorage.getItem("sidebarWidth")||"250px";i.classList.remove("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width",m),localStorage.setItem("sidebarCollapsed","false"),n.textContent="‹"}else{const m=document.documentElement.style.getPropertyValue("--sidebar-width");m!=="0px"&&localStorage.setItem("sidebarWidth",m),i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),localStorage.setItem("sidebarCollapsed","true"),n.textContent="›"}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleSidebar=r);const a=u=>{u.type==="touchmove"&&u.preventDefault();const m=u.clientX||u.touches&&u.touches[0].clientX;if(Math.abs(m-s)>5&&(o=!0),o){const p=Math.max(24,Math.min(m,window.innerWidth-100));document.documentElement.style.setProperty("--sidebar-width",`${p}px`),i.classList.remove("sidebar-collapsed"),n.textContent="‹"}},c=()=>{if(t.style.display="none",document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o){const u=document.documentElement.style.getPropertyValue("--sidebar-width");localStorage.setItem("sidebarWidth",u),localStorage.setItem("sidebarCollapsed","false")}else r()},l=u=>{s=u.clientX||u.touches&&u.touches[0].clientX,o=!1,u.preventDefault(),t.style.display="block",document.body.style.cursor="col-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a,{passive:!1}),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c)};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const g=localStorage.getItem("sidebarWidth");localStorage.getItem("sidebarCollapsed")==="true"?(i.classList.add("sidebar-collapsed"),document.documentElement.style.setProperty("--sidebar-width","0px"),n.textContent="›"):(document.documentElement.style.setProperty("--sidebar-width",g||"250px"),n.textContent="‹")}function ct(){const i=document.getElementById("eruda-container"),e=document.getElementById("eruda-resizer");let t;if(!i||!e)return;const n=document.createElement("button");n.id="eruda-toggle",n.title="Toggle DevTools (Ctrl + `)",e.appendChild(n);let s=0,o=!1;const r=(d=null,u=null)=>{if(t=document.querySelector(".eruda-dev-tools"),!t)return;const m=t.style.height==="0px"||t.offsetHeight<10;if(d===null?m:d){const y=localStorage.getItem("erudaHeight")||"250px";t.style.height=y,n.textContent="▼",localStorage.setItem("erudaCollapsed","false"),u&&setTimeout(()=>window.thoughtform.eruda?.show(u),50)}else{if(m)return;localStorage.setItem("erudaHeight",t.style.height),t.style.height="0px",n.textContent="▲",localStorage.setItem("erudaCollapsed","true")}};window.thoughtform&&window.thoughtform.ui&&(window.thoughtform.ui.toggleDevtools=r);const a=d=>{d.type==="touchmove"&&d.preventDefault();const u=d.clientY||d.touches&&d.touches[0].clientY;if(Math.abs(u-s)>5&&(o=!0),!o)return;const m=window.innerHeight-u,p=42,y=window.innerHeight-100;t.style.height=`${Math.max(p,Math.min(m,y))}px`,n.textContent="▼"},c=()=>{document.body.style.cursor="default",document.body.style.userSelect="auto",document.removeEventListener("mousemove",a),document.removeEventListener("touchmove",a),document.removeEventListener("mouseup",c),document.removeEventListener("touchend",c),o?(localStorage.setItem("erudaHeight",t.style.height),localStorage.setItem("erudaCollapsed","false")):r(null,null)},l=d=>{s=d.clientY||d.touches&&d.touches[0].clientY,o=!1,d.preventDefault(),t=document.querySelector(".eruda-dev-tools"),t&&(document.body.style.cursor="row-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",a),document.addEventListener("touchmove",a,{passive:!1}),document.addEventListener("mouseup",c),document.addEventListener("touchend",c))};e.addEventListener("mousedown",l),e.addEventListener("touchstart",l,{passive:!1});const g=new MutationObserver(()=>{t=document.querySelector(".eruda-dev-tools"),t&&(localStorage.getItem("erudaCollapsed")==="true"?(t.style.height="0px",n.textContent="▲"):(t.style.height=localStorage.getItem("erudaHeight")||"150px",n.textContent="▼"),g.disconnect())});g.observe(i,{childList:!0})}async function ne(i,e){const t=i.pfs;let n=[];try{const s=await t.readdir(e);for(const o of s){if(o===".git")continue;const r=`${e==="/"?"":e}/${o}`;try{(await t.stat(r)).isDirectory()?n=n.concat(await ne(i,r)):n.push(r)}catch{console.warn(`Could not stat ${r}, skipping.`)}}}catch{console.log(`Could not read directory: ${e}.`)}return n}async function lt(i,e){e("Starting export...");const t=new I;if(!i||i.length===0)throw new Error("No gardens were selected for export.");for(const a of i){e(`Processing garden: "${a}"...`);const c=t.folder(a),l=new k(a),g=await ne(l,"/");for(const d of g){const u=await l.readFile(d),m=d.startsWith("/")?d.substring(1):d;c.file(m,u)}}e("Generating zip file...");const n=await t.generateAsync({type:"blob"}),o=`thoughtform-gardens-backup-${new Date().toISOString().replace(/[:.]/g,"-")}.zip`,r=document.createElement("a");r.href=URL.createObjectURL(n),r.download=o,document.body.appendChild(r),r.click(),document.body.removeChild(r),e(`Export process initiated: ${o}`)}async function dt(i){const e=await I.loadAsync(i),t=new Set;return e.forEach(n=>{if(n.includes("/")){const s=n.split("/")[0];t.add(s)}}),Array.from(t).sort()}async function ht(i,e,t){if(!e||e.length===0)throw new Error("No gardens were selected for import.");t(`Reading ${i.name}...`);const n=await I.loadAsync(i);t("Zip file loaded. Starting import of selected gardens...");const s=[];n.forEach((o,r)=>{if(r.dir)return;const a=o.split("/")[0];if(e.includes(a)){const c=`/${o.substring(a.length+1)}`,l=r.async("string").then(async g=>{t(`  Importing: ${a}${c}`);const d=new k(a);await d.initRepo(),await d.writeFile(c,g)});s.push(l)}}),await Promise.all(s),t("Import complete! Reloading page..."),setTimeout(()=>{window.location.reload()},1500)}async function ut(i,e){if(!i||i.length===0)throw new Error("No gardens were selected for deletion.");e("Starting deletion process...");const t=localStorage.getItem("thoughtform_gardens");let n=t?JSON.parse(t):[];for(const s of i){e(`Deleting garden: "${s}"...`),n=n.filter(r=>r!==s);const o=`garden-fs-${s}`;await new Promise((r,a)=>{const c=indexedDB.deleteDatabase(o);c.onsuccess=()=>{e(`  Successfully deleted database: ${o}`),r()},c.onerror=l=>{e(`  Error deleting database: ${o}`),a(l.target.error)},c.onblocked=()=>{e(`  Deletion blocked for ${o}. Please refresh and try again.`),a(new Error("Deletion blocked"))}})}localStorage.setItem("thoughtform_gardens",JSON.stringify(n)),e("Updated garden registry in localStorage."),e("Deletion complete. Reloading..."),setTimeout(()=>{const s=decodeURIComponent(window.location.pathname.split("/").pop()||"home");if(i.includes(s)||n.length===0){const o=new URL(import.meta.url).pathname,r=o.lastIndexOf("/src/"),a=r>-1?o.substring(0,r):"";window.location.href=`${window.location.origin}${a}/home`}else window.location.reload()},2e3)}class gt{constructor(){const e=new URLSearchParams(window.location.search);this.isEnabled=e.has("debug"),console.log(`[DEBUG] Debug mode is ${this.isEnabled?"ENABLED":"DISABLED"}`)}log(...e){this.isEnabled&&console.log("[DEBUG]",...e)}error(...e){this.isEnabled&&console.error("[DEBUG]",...e)}warn(...e){this.isEnabled&&console.warn("[DEBUG]",...e)}}const h=new gt;class mt{constructor(e){this.signaling=e}connectToSignalingServer(){return new Promise((e,t)=>{const n=this.signaling.signalingServerUrl;if(this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN){e();return}this.signaling.ws=new WebSocket(n),this.signaling.ws.onopen=()=>{h.log(`Connected to signaling server at ${n}`),e()},this.signaling.ws.onclose=()=>{h.log("Disconnected from signaling server"),this.signaling.sync.connectionState!=="connected-p2p"&&this.signaling.sync.updateConnectionState("disconnected","Signaling server disconnected.")},this.signaling.ws.onerror=s=>{h.error("WebSocket error:",s),this.signaling.sync.updateConnectionState("error","Signaling server connection error."),t(new Error(`Failed to connect to signaling server at ${n}`))},this.signaling.ws.onmessage=s=>{try{const o=JSON.parse(s.data);this.signaling._signalingMessageHandler&&this.signaling._signalingMessageHandler.handleSignalingMessage(o)}catch(o){h.error("Error parsing signaling message:",o)}}})}sendCreateSessionRequest(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN?t.send(JSON.stringify({type:"create_session",sessionId:e})):(h.error("Cannot send create session request, WebSocket is not open."),this.signaling.sync.updateConnectionState("error","Cannot create session, not connected."))}sendSignal(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN&&t.send(JSON.stringify({type:"signal",data:e}))}}class ft{constructor(e){this.signaling=e}handleSignalingMessage(e){const t=this.signaling.sync;switch(e.type){case"session_created":this.signaling.isNegotiating&&this.signaling.startSession(e.sessionId);break;case"peer_joined":t.isInitiator&&e.peerId&&(this.signaling.targetPeerId=e.peerId),t.updateConnectionState("connected-signal","Peer joined. Establishing P2P connection..."),t.isInitiator&&this.signaling._webrtcInitiator&&(h.log("Initiator creating offer after peer joined."),this.signaling._webrtcInitiator.createOfferAfterPeerJoined());break;case"signal":this.signaling.handleSignal(e.data);break;case"peer_left":t.addMessage("Peer disconnected from session."),this.signaling.targetPeerId=null,t.isInitiator?(h.log("Initiator resetting peer connection, ready for next peer."),this.signaling._webrtcInitiator.setupPeerConnection(),t.updateConnectionState("connected-signal","Peer left. Ready for new connection.")):t.updateConnectionState("connected-signal","Peer left. Using WebSocket fallback.");break;case"error":if(h.error("Signaling error:",e.message),this.signaling.isNegotiating&&e.message.includes("already exists"))this.signaling.attemptToJoinSession();else if(e.message.includes("Session closed by initiator")){h.log("Initiator left. This client will attempt to re-establish the session."),t.addMessage("Host disconnected. Attempting to reconnect...");const n=t.syncName;n&&(t.disconnect(),setTimeout(()=>{t.connect(n)},500))}else t.updateConnectionState("error",`Signaling error: ${e.message}`);break;case"direct_sync_message":e.message&&t.fileSync&&t.fileSync.handleSyncMessage(e.message);break;default:h.log("Unknown signaling message type received:",e.type)}}}class pt{constructor(e){this.signaling=e}setupPeerConnection(){const e=this.signaling.sync;e.peerConnection&&(e.peerConnection.close(),e.peerConnection=null);try{e.peerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}]}),e.peerConnection.onconnectionstatechange=()=>{h.log("P2P Connection state:",e.peerConnection.connectionState),e.peerConnection.connectionState==="failed"&&e.updateConnectionState("connected-signal","P2P connection failed. Using fallback.")},e.dataChannel=e.peerConnection.createDataChannel("syncChannel"),e.dataChannel.onopen=()=>{e.updateConnectionState("connected-p2p","P2P connection established."),e.fileSync&&e.fileSync.setupDataChannel(e.dataChannel)},e.dataChannel.onclose=()=>{e.connectionState==="connected-p2p"&&e.updateConnectionState("connected-signal","P2P channel closed. Using fallback.")},e.dataChannel.onerror=t=>{h.error("Data channel error:",t),e.addMessage(`Data channel error: ${t.message}`),e.updateConnectionState("connected-signal","P2P channel error. Using fallback.")},e.peerConnection.onicecandidate=t=>{t.candidate&&this.signaling.sendSignal({type:"candidate",candidate:t.candidate})}}catch(t){h.error("Error setting up peer connection:",t),e.updateConnectionState("error",`Error: ${t.message}`)}}async startSession(e){const t=this.signaling.sync;t.isInitiator=!0,t.syncName=e,this.setupPeerConnection(),t.updateConnectionState("connected-signal","Waiting for peer to join...")}async createOfferAfterPeerJoined(){const e=this.signaling.sync;try{if(!e.peerConnection){h.error("Cannot create offer, peerConnection is not initialized.");return}const t=await e.peerConnection.createOffer();await e.peerConnection.setLocalDescription(t),this.signaling.sendSignal({type:"offer",sdp:t.sdp})}catch(t){h.error("Error creating offer:",t),e.updateConnectionState("error",`Error creating P2P offer: ${t.message}`)}}}class yt{constructor(e){this.signaling=e}async joinSession(e){const t=this.signaling.sync;try{if(t.isInitiator=!1,t.syncName=e,this.signaling.ws&&this.signaling.ws.readyState===WebSocket.OPEN)this.signaling.ws.send(JSON.stringify({type:"join_session",sessionId:e}));else{t.updateConnectionState("error","Error: WebSocket not connected.");return}t.peerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}]}),t.peerConnection.onconnectionstatechange=()=>{h.log("P2P Connection state:",t.peerConnection.connectionState),t.peerConnection.connectionState==="failed"&&t.updateConnectionState("connected-signal","P2P connection failed. Using fallback.")},t.peerConnection.ondatachannel=n=>{h.log("Data channel received"),t.dataChannel=n.channel,t.dataChannel.onopen=()=>{t.updateConnectionState("connected-p2p","P2P connection established."),t.fileSync&&t.fileSync.setupDataChannel(t.dataChannel)},t.dataChannel.onclose=()=>{t.connectionState==="connected-p2p"&&t.updateConnectionState("connected-signal","P2P channel closed. Using fallback.")},t.dataChannel.onerror=s=>{h.error("Data channel error:",s),t.addMessage(`Data channel error: ${s.message}`),t.updateConnectionState("connected-signal","P2P channel error. Using fallback.")}},t.peerConnection.onicecandidate=n=>{n.candidate&&this.signaling.sendSignal({type:"candidate",candidate:n.candidate})},t.updateConnectionState("connected-signal","Joining session, waiting for offer...")}catch(n){h.error("Error joining session:",n),t.updateConnectionState("error",`Error joining session: ${n.message}`)}}}class wt{constructor(e){this.signaling=e}sendSyncMessage(e){const n=this.signaling.sync.dataChannel;n&&n.readyState==="open"?(h.log("Sent sync message via data channel"),n.send(JSON.stringify(e))):(h.log("Data channel not open, falling back to signaling for sync message"),this.sendSyncMessageViaSignaling(e))}sendSyncMessageViaSignaling(e){const t=this.signaling.ws;t&&t.readyState===WebSocket.OPEN?(h.log("Sent sync message via signaling (broadcast)"),t.send(JSON.stringify({type:"direct_sync_message",message:e}))):(h.warn("Signaling WebSocket not open, could not send sync message."),this.signaling.sync&&this.signaling.sync.addMessage("Error: Not connected to signaling server for message send."))}}class bt{constructor(e){this.sync=e,this.ws=null,this.signalingServerUrl=localStorage.getItem("thoughtform_signaling_server")||"wss://socket.thoughtform.garden",this.peerId=null,this.targetPeerId=null,this.isNegotiating=!1,this.negotiationSyncName=null,this._webSocketManager=new mt(this),this._signalingMessageHandler=new ft(this),this._webrtcInitiator=new pt(this),this._webrtcJoiner=new yt(this),this._syncMessageRouter=new wt(this)}updateSignalingServerUrl(e){this.signalingServerUrl=e,localStorage.setItem("thoughtform_signaling_server",e)}async negotiateSession(e){if(!this.isNegotiating){this.isNegotiating=!0,this.negotiationSyncName=e,this.sync.isInitiator=!1;try{await this.connectToSignalingServer(),h.log(`Attempting to create session with persistent name: ${e}`),this._webSocketManager.sendCreateSessionRequest(e)}catch{this.sync.updateConnectionState("error","Failed to connect to signaling server."),this.isNegotiating=!1}}}attemptToJoinSession(){h.log(`Create failed, now attempting to join session: ${this.negotiationSyncName}`),this.joinSession(this.negotiationSyncName)}async startSession(e){return this.isNegotiating=!1,this._webrtcInitiator.startSession(e)}async joinSession(e){return this.isNegotiating=!1,this._webrtcJoiner.joinSession(e)}connectToSignalingServer(){return this._webSocketManager.connectToSignalingServer()}sendSignal(e){return this._webSocketManager.sendSignal(e)}sendSyncMessage(e){return this._syncMessageRouter.sendSyncMessage(e)}async handleSignal(e){const t=this.sync;try{if(!t.peerConnection){h.error("Received signal but peerConnection is not initialized.");return}if(e.type==="offer"){await t.peerConnection.setRemoteDescription(new RTCSessionDescription(e));const n=await t.peerConnection.createAnswer();await t.peerConnection.setLocalDescription(n),this.sendSignal({type:"answer",sdp:n.sdp})}else e.type==="answer"?await t.peerConnection.setRemoteDescription(new RTCSessionDescription(e)):e.type==="candidate"&&await t.peerConnection.addIceCandidate(new RTCIceCandidate(e.candidate))}catch(n){h.error("Error handling signal:",n),t.addMessage(`WebRTC error: ${n.message}`),this.sync.updateConnectionState("error",`WebRTC Error: ${n.message}`)}}destroy(){this.isNegotiating=!1,this.negotiationSyncName=null,this.ws&&(this.ws.close(),this.ws=null)}}class Ct{constructor(){this._listeners={}}addEventListener(e,t){e in this._listeners||(this._listeners[e]=[]),this._listeners[e].push(t)}removeEventListener(e,t){if(!(e in this._listeners))return;const n=this._listeners[e];for(let s=0,o=n.length;s<o;s++)if(n[s]===t){n.splice(s,1);return}}dispatchEvent(e){if(!(e.type in this._listeners))return!0;const t=this._listeners[e.type].slice();for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);return!e.defaultPrevented}destroy(){this._listeners={}}}class vt{static getGitClient(e){if(e.gitClient)return e.gitClient;if(e.sync&&e.sync.gitClient)return e.sync.gitClient;if(window.thoughtform){for(const t in window.thoughtform)if(window.thoughtform[t]&&typeof window.thoughtform[t]=="object"){if(window.thoughtform[t].hasOwnProperty("readFile")&&window.thoughtform[t].hasOwnProperty("writeFile"))return h.log(`DEBUG: Found potential gitClient-like object at window.thoughtform.${t}`),window.thoughtform[t];if(window.thoughtform[t].gitClient)return h.log(`DEBUG: Found gitClient at window.thoughtform.${t}.gitClient`),window.thoughtform[t].gitClient}if(window.thoughtform.gitClient)return h.log("DEBUG: Found gitClient at window.thoughtform.gitClient"),window.thoughtform.gitClient;if(window.thoughtform.editor&&window.thoughtform.editor.gitClient)return h.log("DEBUG: Found gitClient at window.thoughtform.editor.gitClient"),window.thoughtform.editor.gitClient}return h.log("DEBUG: _getGitClient: No gitClient found in standard locations or window.thoughtform"),null}}class St{static setupDataChannel(e,t){t.onopen=()=>{e.sync.isConnected=!0,e.sync.ui.showMessages(),e.sync.addMessage("File sync data channel is open."),h.log("DEBUG: SyncFiles confirmed data channel is open.")},t.onmessage=async n=>{try{const s=JSON.parse(n.data);await e.handleSyncMessage(s)}catch(s){console.error("Error parsing sync message:",s),e.sync.addMessage("Received: "+n.data),h.error("Error parsing sync message:",s)}},t.onclose=()=>{e.sync.isConnected=!1,e.sync.ui.hideMessages(),e.sync.addMessage("File sync data channel closed."),h.log("DEBUG: SyncFiles confirmed data channel is closed.")},t.onerror=n=>{const s=n.error;s&&s.name==="OperationError"&&s.message.includes("User-Initiated Abort")?h.log("Data channel closed intentionally by a peer.",n):(console.error("Data channel error:",n),e.sync.addMessage("Data channel error: "+(s?s.message:"Unknown error")),h.error("Data channel error:",n))}}}class L{static async getAllFiles(e){if(!e)return[];try{let t=[];try{t=await e.listFiles(e,"/"),h.log("DEBUG: getAllFiles succeeded with listFiles(gitClient, '/')")}catch(n){h.log("DEBUG: listFiles(gitClient, '/') failed, trying listFiles('/')",n);try{t=await e.listFiles("/")}catch(s){h.log("DEBUG: listFiles('/') failed, trying internal _listFiles helper",s),t=await this._listAllFiles(e,"/")}}return t.filter(n=>n!=="/.git")}catch(t){return console.error("Error getting file list:",t),h.error("Error getting file list:",t),[]}}static async _listAllFiles(e,t){const n=e.pfs;if(!n)throw new Error("gitClient does not have pfs property for file listing");let s=[];try{const o=await n.readdir(t);for(const r of o){if(r===".git")continue;const a=t==="/"?`/${r}`:`${t}/${r}`;try{(await n.stat(a)).isDirectory()?s=s.concat(await this._listAllFiles(e,a)):s.push(a)}catch(c){h.warn(`Could not stat ${a}, skipping.`,c)}}}catch(o){h.log(`Directory not found or not readable: ${t}. It might be empty.`,o)}return s}static async handleFileUpdate(e,t){const n=e._getGitClient();if(!n){console.warn("Git client not set, cannot handle file update"),e.sync.addMessage("Error: Git client not available, cannot handle file update"),h.warn("Git client not set, cannot handle file update"),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error: Git client not available, cannot handle file update for ${t.path}`,type:"error"}}));return}try{let s=null,o=0;try{s=await n.readFile(t.path);try{const r=JSON.parse(s);r&&typeof r.content<"u"&&typeof r.lastupdated<"u"&&(o=r.lastupdated)}catch{}}catch{h.log(`DEBUG: File ${t.path} not found locally, will accept incoming update.`),o=-1}if(t.timestamp>=o){h.log(`DEBUG: Updating file ${t.path} (remote: ${t.timestamp}, local: ${o})`),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Updating file: ${t.path}`,type:"info"}})),await n.writeFile(t.path,t.content),e.sync.addMessage(`Updated file: ${t.path}`),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Successfully updated file: ${t.path}`,type:"info"}}));const r=[e.sync.editor,window.thoughtform&&window.thoughtform.editor,window.thoughtform&&window.thoughtform.activeEditor];for(const a of r)if(a&&a.filePath===t.path&&typeof a.forceReloadFile=="function"){await a.forceReloadFile(t.path);break}}else h.log(`DEBUG: Skipped updating file ${t.path} (remote: ${t.timestamp}, local: ${o})`),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Skipped file (not newer): ${t.path}`,type:"info"}}))}catch(s){console.error("Error handling file update for path:",t.path,s),e.sync.addMessage(`Error updating file ${t.path}: ${s.message}`),h.error("Error handling file update for path:",t.path,s),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error updating file ${t.path}: ${s.message}`,type:"error"}}))}}}class U{static async handleSyncMessage(e,t){switch(t.type){case"file_update":await L.handleFileUpdate(e,t);break;case"request_all_files":await e.handleRequestAllFiles();break;case"all_files":await e.handleAllFiles(t);break;default:console.log("Unknown sync message type:",t.type),h.log("Unknown sync message type:",t.type)}}static async handleRequestAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Received request for all files.",type:"info"}}));const t=e._getGitClient();if(!t){console.warn("Git client not set, cannot send all files"),e.sync.addMessage("Error: Git client not available, cannot send all files"),h.warn("Git client not set, cannot send all files"),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Error: Git client not available, cannot send all files",type:"error"}}));return}try{const n=await L.getAllFiles(t);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${n.length} files to send.`,type:"info"}}));for(const s of n)try{e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Reading file: ${s}`,type:"info"}}));const o=await t.readFile(s);let r=0;try{r=JSON.parse(o).lastupdated||0}catch{r=0}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending file: ${s}`,type:"info"}})),e.sync.signaling.sendSyncMessage({type:"file_update",path:s,content:o,timestamp:r})}catch(o){console.warn(`Could not read file ${s} for sync:`,o),h.warn(`Could not read file ${s} for sync:`,o),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Warning: Could not read file ${s} for sync: ${o.message}`,type:"error"}}))}e.sync.addMessage("Sent all files to peer"),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Finished sending all files to peer.",type:"complete"}}))}catch(n){console.error("Error sending all files:",n),e.sync.addMessage(`Error sending all files: ${n.message}`),h.error("Error sending all files:",n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error sending all files: ${n.message}`,type:"error"}}))}}static async handleAllFiles(e,t){e.sync.addMessage("Received all files from peer"),h.log("Received all files from peer"),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Received all files from peer.",type:"info"}}))}}class G{static async syncAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Starting to send all files...",type:"info"}}));const t=e._getGitClient();if(!t){if(e.sync.addMessage("Git client not available. Please make sure a garden is loaded."),console.error("syncAllFiles: Git client not available from any source."),h.error("syncAllFiles: Git client not available from any source."),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Error: Git client not available. Please make sure a garden is loaded.",type:"error"}})),h.log("DEBUG: this.gitClient:",e.gitClient),h.log("DEBUG: this.sync.gitClient:",e.sync?.gitClient),h.log("DEBUG: window.thoughtform keys:",Object.keys(window.thoughtform||{})),window.thoughtform)for(const n in window.thoughtform)typeof window.thoughtform[n]=="object"&&window.thoughtform[n]!==null&&h.log(`DEBUG: window.thoughtform.${n} keys:`,Object.keys(window.thoughtform[n]));return}h.log("DEBUG: syncAllFiles: Got gitClient to use");try{let n="unknown";if(typeof t.gardenName=="string"?n=t.gardenName:t.dir&&(n=t.dir.replace(/^\//,"")),!await w.confirm({title:"Send All Files",message:`Are you sure you want to send all files from your garden '${n}' to the connected peer? This will update their files if yours are newer.`,okText:"Send Files",cancelText:"Cancel"})){e.sync.addMessage("Send all files cancelled."),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Send all files cancelled by user.",type:"cancelled"}}));return}e.sync.addMessage("Syncing all files...");const o=await L.getAllFiles(t);e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Found ${o.length} files to sync.`,type:"info"}}));let r=0;for(const a of o)try{e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Reading file: ${a}`,type:"info"}}));const c=await t.readFile(a);let l=0;try{l=JSON.parse(c).lastupdated||0}catch{l=0}e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sending file: ${a} (${r+1}/${o.length})`,type:"info"}})),e.sync.signaling.sendSyncMessage({type:"file_update",path:a,content:c,timestamp:l}),r++}catch(c){console.warn(`Could not read/send file ${a} for sync:`,c),e.sync.addMessage(`Warning: Could not process file ${a}`),h.warn(`Could not read/send file ${a} for sync:`,c),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Warning: Could not process file ${a}: ${c.message}`,type:"error"}}))}e.sync.addMessage(`Synced all files with peer. Sent ${r}/${o.length} files.`),h.log(`DEBUG: syncAllFiles completed. Sent ${r}/${o.length} files.`),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Sync completed successfully. Sent ${r}/${o.length} files.`,type:"complete"}}))}catch(n){console.error("Error syncing all files:",n),e.sync.addMessage(`Error syncing all files: ${n.message}`),h.error("Error syncing all files:",n),e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:`Error syncing all files: ${n.message}`,type:"error"}}))}}static requestAllFiles(e){e.dispatchEvent(new CustomEvent("syncProgress",{detail:{message:"Requesting all files from peer...",type:"info"}})),e.sync.signaling.sendSyncMessage({type:"request_all_files"}),e.sync.addMessage("Requested all files from peer")}static sendFileUpdate(e,t,n,s){e.sync.signaling.sendSyncMessage({type:"file_update",path:t,content:n,timestamp:s})}}class Et extends Ct{constructor(e){super(),this.sync=e,this.gitClient=null}_getGitClient(){return vt.getGitClient(this)}setGitClient(e){this.gitClient=e}setupDataChannel(e){St.setupDataChannel(this,e)}async handleSyncMessage(e){await U.handleSyncMessage(this,e)}async handleRequestAllFiles(){await U.handleRequestAllFiles(this)}async handleAllFiles(e){await U.handleAllFiles(this,e)}async syncAllFiles(){await G.syncAllFiles(this)}requestAllFiles(){G.requestAllFiles(this)}sendFileUpdate(e,t,n){G.sendFileUpdate(this,e,t,n)}destroy(){super.destroy()}async getAllFiles(e){return L.getAllFiles(e)}async _listAllFiles(e,t){return L._listAllFiles(e,t)}}class kt{constructor(e){this.sync=e,this.syncMethodIndicatorEl=null,this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressCloseButton=null,this.connectBtn=null,this.nameInput=null,this.autoConnectCheckbox=null}render(){this.sync._container&&(this.sync._container.innerHTML=`
        <div class="sync-container">
          <div class="sync-panel">
              <h3>Signaling Server</h3>
              <div class="sync-row">
                <label for="signaling-server-url" class="sync-label">Server URL:</label>
                <input type="text" id="signaling-server-url" class="eruda-input flex-grow" value="${this.sync.signaling.signalingServerUrl}">
                <button id="save-signaling-config" class="eruda-button">Save</button>
              </div>
            </div>
            <div class="sync-panel">
              <h3>Sync Configuration</h3>
              <div class="sync-row">
                <label for="sync-name-input" class="sync-label">Sync Name:</label>
                <input type="text" id="sync-name-input" class="eruda-input" placeholder="e.g., my-devices">
                <button id="sync-connect-btn" class="eruda-button">Connect</button>
              </div>
              <div class="sync-row space-between">
                <label class="flex-center">
                  <input type="checkbox" id="sync-autoconnect-checkbox">
                  <span>Auto-connect on startup</span>
                </label>
              </div>
            </div>
            <div class="sync-panel">
                <div class="sync-status-grid">
                    <strong>Status:</strong> <span id="sync-status">Disconnected</span>
                    <strong>Method:</strong> <span id="sync-method-indicator">None</span>
                </div>
            </div>
            <div class="sync-panel sync-actions">
              <h4>File Sync Actions</h4>
              <div class="sync-row">
                <button id="sync-all-files-btn" class="eruda-button">Send All Files</button>
                <button id="request-all-files-btn" class="eruda-button">Request All Files</button>
              </div>
            </div>
            <div class="sync-messages-container hidden" id="eruda-sync-messages">
              <h3>Messages</h3>
              <div id="eruda-messages-list" class="sync-messages-list"></div>
            </div>
        </div>
      `,this.syncMethodIndicatorEl=this.sync._container.querySelector("#sync-method-indicator"),this.connectBtn=this.sync._container.querySelector("#sync-connect-btn"),this.nameInput=this.sync._container.querySelector("#sync-name-input"),this.autoConnectCheckbox=this.sync._container.querySelector("#sync-autoconnect-checkbox"))}bindEvents(){if(!this.sync._container){h.error("SyncUI.bindEvents: Container not set");return}this.nameInput.value=localStorage.getItem("thoughtform_sync_name")||"",this.autoConnectCheckbox.checked=localStorage.getItem("thoughtform_sync_auto_connect")==="true",this.connectBtn.addEventListener("click",()=>{const s=this.sync.connectionState;if(s==="disconnected"||s==="error"){const o=this.nameInput.value.trim(),r=this.autoConnectCheckbox.checked;if(!o){this.addMessage("Please enter a Sync Name.");return}localStorage.setItem("thoughtform_sync_name",o),localStorage.setItem("thoughtform_sync_auto_connect",r),h.log("UI: Connect button clicked"),this.sync.connect(o)}else h.log("UI: Disconnect button clicked"),this.sync.disconnect()});const e=this.sync._container.querySelector("#save-signaling-config");e&&e.addEventListener("click",()=>{const s=this.sync._container.querySelector("#signaling-server-url"),o=s?s.value.trim():"";o?(this.sync.signaling.updateSignalingServerUrl(o),this.addMessage(`Signaling server updated to: ${o}`),h.log("UI: Save Config button clicked with URL:",o)):this.addMessage("Please enter a valid signaling server URL.")});const t=this.sync._container.querySelector("#sync-all-files-btn"),n=this.sync._container.querySelector("#request-all-files-btn");t&&t.addEventListener("click",async()=>{h.log("UI: Send All Files button clicked"),this.showSyncProgressModal(),await this.sync.fileSync.syncAllFiles()}),n&&n.addEventListener("click",()=>{h.log("UI: Request All Files button clicked"),this.showSyncProgressModal(),this.sync.fileSync.requestAllFiles()})}updateStatus(e){const t=this.sync._container.querySelector("#sync-status");t&&(t.textContent=e)}updateControls(e){const t=e==="disconnected"||e==="error",n=e==="connecting";this.connectBtn&&(this.connectBtn.disabled=n,t?this.connectBtn.textContent="Connect":n?this.connectBtn.textContent="Connecting...":this.connectBtn.textContent="Disconnect"),this.nameInput&&(this.nameInput.disabled=!t),this.autoConnectCheckbox&&(this.autoConnectCheckbox.disabled=!t);const s=this.sync._container.querySelectorAll(".eruda-sync-main .eruda-button"),o=e==="connected-p2p"||e==="connected-signal";s.forEach(r=>r.disabled=!o)}updateConnectionIndicator(e){const t=document.querySelector('.luna-tab-item[data-id="Sync"]');if(t){t.classList.remove("sync-status-connecting","sync-status-p2p","sync-status-signal","sync-status-error");let n="None",s="var(--color-text-secondary)";switch(e){case"connecting":t.classList.add("sync-status-connecting"),n="Connecting...",s="var(--base-accent-warning)";break;case"connected-signal":t.classList.add("sync-status-signal"),n="WebSocket (Fallback)",s="var(--base-accent-warning)";break;case"connected-p2p":t.classList.add("sync-status-p2p"),n="WebRTC (P2P)",s="var(--base-accent-action)";break;case"error":t.classList.add("sync-status-error"),n="Error",s="var(--base-accent-destructive)";break;case"disconnected":default:n="None",s="var(--color-text-secondary)";break}this.syncMethodIndicatorEl&&(this.syncMethodIndicatorEl.textContent=n,this.syncMethodIndicatorEl.style.color=s)}}addMessage(e){const t=this.sync._container.querySelector("#eruda-messages-list");if(t){const n=document.createElement("div");n.textContent=e,t.appendChild(n),t.scrollTop=t.scrollHeight}}showMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="block")}hideMessages(){const e=this.sync._container.querySelector("#eruda-sync-messages");e&&(e.style.display="none")}showSyncProgressModal(){this.syncProgressModal&&this.syncProgressModal.destroy(),this.syncProgressModal=new w({title:"File Sync Progress"}),this.syncProgressModal.updateContent(`
      <div id="sync-progress-log" style="height: 300px; overflow-y: auto; border: 1px solid var(--color-border-primary); padding: 1rem; background-color: var(--base-dark); margin-bottom: 1rem;"></div>
      <div id="sync-progress-final-message" style="font-weight: bold; padding: 5px; min-height: 20px;"></div>
    `),this.syncProgressLogArea=this.syncProgressModal.content.querySelector("#sync-progress-log"),this.syncProgressFinalMessageArea=this.syncProgressModal.content.querySelector("#sync-progress-final-message"),this.syncProgressCloseButton=this.syncProgressModal.addFooterButton("Close",()=>this.hideSyncProgressModal()),this.syncProgressCloseButton.disabled=!0,this.syncProgressModal.show()}updateSyncProgress(e){if(!this.syncProgressModal||!this.syncProgressLogArea)return;const{message:t="No message",type:n="info"}=e.detail,s=document.createElement("div"),o=new Date().toLocaleTimeString();switch(s.textContent=`[${o}] ${t}`,s.style.marginBottom="5px",n){case"error":s.style.color="var(--base-accent-destructive)";break;case"complete":s.style.color="var(--base-accent-action)";break;case"cancelled":s.style.color="var(--base-accent-warning)";break;default:s.style.color="var(--color-text-primary)";break}this.syncProgressLogArea.appendChild(s),this.syncProgressLogArea.scrollTop=this.syncProgressLogArea.scrollHeight,["complete","error","cancelled"].includes(n)&&(this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.textContent=t),this.syncProgressFinalMessageArea&&(this.syncProgressFinalMessageArea.style.color=s.style.color),this.syncProgressCloseButton&&(this.syncProgressCloseButton.disabled=!1))}hideSyncProgressModal(){this.syncProgressModal&&(this.syncProgressModal.destroy(),this.syncProgressModal=null,this.syncProgressLogArea=null,this.syncProgressFinalMessageArea=null,this.syncProgressCloseButton=null)}}class xt{constructor(){this.name="sync",this._container=null,this.peerConnection=null,this.dataChannel=null,this.isInitiator=!1,this.isConnected=!1,this.gitClient=null,this.connectionState="disconnected",this.syncName=null,this.signaling=new bt(this),this.fileSync=new Et(this),this.ui=new kt(this)}init(e){this._container=e,this._container.style.padding="1rem",this._container.style.overflowY="auto",this.ui.render(),this.ui.bindEvents(),this.ui.updateControls(this.connectionState),this.ui.updateConnectionIndicator(this.connectionState),this.fileSync&&this.ui&&typeof this.ui.updateSyncProgress=="function"&&(this.fileSync.addEventListener("syncProgress",this.ui.updateSyncProgress.bind(this.ui)),h.log("DEBUG: Connected SyncFiles syncProgress event to SyncUI handler"));const t=localStorage.getItem("thoughtform_sync_auto_connect")==="true",n=localStorage.getItem("thoughtform_sync_name");t&&n&&(h.log(`Auto-connecting with sync name: ${n}`),this.connect(n))}async connect(e){if(this.connectionState!=="disconnected"&&this.connectionState!=="error"){h.warn(`Connect called while not in a disconnected state (${this.connectionState}). Ignoring.`);return}this.syncName=e,this.updateConnectionState("connecting","Connecting..."),await this.signaling.negotiateSession(this.syncName)}disconnect(){h.log("Disconnecting..."),this.signaling.destroy(),this.peerConnection&&(this.peerConnection.close(),this.peerConnection=null),this.dataChannel&&(this.dataChannel.close(),this.dataChannel=null),this.isConnected=!1,this.isInitiator=!1,this.syncName=null,this.updateConnectionState("disconnected","Disconnected")}updateConnectionState(e,t){this.connectionState!==e&&(h.log(`Connection state changed: ${this.connectionState} -> ${e}`),this.connectionState=e,this.isConnected=e==="connected-p2p"||e==="connected-signal",this.ui&&(t&&this.ui.updateStatus(t),this.ui.updateConnectionIndicator(e),this.ui.updateControls(e)))}setGitClient(e){this.gitClient=e,this.fileSync.setGitClient(e)}addMessage(e){this.ui.addMessage(e)}sendSyncMessage(e){this.signaling.sendSyncMessage(e)}sendFileUpdate(e,t,n){this.fileSync.sendFileUpdate(e,t,n)}show(){this._container.style.display="block"}hide(){this._container.style.display="none"}destroy(){this.disconnect(),this.fileSync&&this.fileSync.destroy()}}function B(i,e,t=!0){const n=e.map(s=>`
    <label>
      <input type="checkbox" class="garden-select-checkbox" value="${s}" ${t?"checked":""}>
      <span>${s}</span>
    </label>
  `).join("");return`
    <div>
      <p>${i}</p>
      <div>
        <button type="button" class="select-all-btn">Select All</button>
        <button type="button" class="select-none-btn">Deselect All</button>
      </div>
      <div class="garden-selection-list">
        ${n}
      </div>
    </div>
  `}function Ft(){const i=document.getElementById("eruda-container");if(i)return P.init({container:i,tool:["console","elements","network","resources"],inline:!0,useShadowDom:!1}),window.thoughtform&&(window.thoughtform.eruda=P),setTimeout(()=>{const e=i.querySelector(".luna-tab-item")?.parentElement;e&&e.addEventListener("click",t=>{const n=t.target.closest(".luna-tab-item");if(n){const s=n.innerText.toLowerCase();window.thoughtform.ui.toggleDevtools?.(!0,s)}})},500),setTimeout(()=>{const e=i.querySelector(".eruda-elements");if(!e)return;let t=!1;new MutationObserver(()=>{const s=e.style.display!=="none";if(s&&!t){const o=document.querySelector(".eruda-control > .eruda-icon-select");o&&(o.click(),o.click())}t=s}).observe(e,{attributes:!0,attributeFilter:["style"]})},500),P.add({name:"Data",init(e){this._$el=e,e.html(`
        <div>
          <h2>Data Portability</h2>
          <button id="export-btn" class="eruda-button">Export...</button>
          <button id="import-btn" class="eruda-button">Import...</button>
          <input type="file" id="import-file-input" accept=".zip" style="display: none;">

          <hr>

          <h2>Danger Zone</h2>
          <p>
            <button id="clear-data-btn" class="eruda-button destructive">Clear Data...</button>
          </p>
        </div>
      `);const t=e.find("#export-btn")[0],n=e.find("#import-btn")[0],s=e.find("#import-file-input")[0],o=e.find("#clear-data-btn")[0];t.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),a=r?JSON.parse(r):["home"],c=new w({title:"Select Gardens to Export"});c.updateContent(B("Choose which gardens to include in the export:",a));const l=c.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(d=>d.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(d=>d.checked=!1);const g=async()=>{const d=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(y=>y.value);c.destroy();const u=new w({title:"Exporting Gardens..."});u.updateContent("<p>Preparing export. Please wait...</p>");let m=!1,p="";u.addFooterButton("Cancel",()=>{m=!0,u.destroy(),console.log("Export cancelled by user.")}),u.show();try{await lt(d,y=>{if(m)throw new Error("Export cancelled by user.");console.log(y),p+=y+"<br>",u.updateContent(`<div style="font-family: monospace; max-height: 300px; overflow-y: auto;">${p}</div>`)}),m||(u.clearFooter(),u.updateContent("<p>Export complete! The download will begin shortly.</p>"),setTimeout(()=>u.destroy(),3e3))}catch(y){m||(console.error("Export failed:",y.message),u.clearFooter(),u.updateContent(`<p style="color: #F44747;"><strong>Export Failed</strong><br>${y.message}</p>`),u.addFooterButton("Close",()=>u.destroy()))}};c.addFooterButton("Export Selected",g),c.addFooterButton("Cancel",()=>c.destroy()),c.show()}),n.addEventListener("click",()=>s.click()),s.addEventListener("change",async()=>{const r=s.files[0];if(!r)return;const a=new w({title:"Select Gardens to Import"});a.updateContent("Scanning zip file..."),a.show();try{const c=await dt(r);if(c.length===0){a.updateContent("No valid gardens found in this zip file."),a.addFooterButton("Close",()=>a.destroy());return}a.updateContent(B(`Found ${c.length} garden(s). Select which to import:`,c));const l=a.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(d=>d.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(d=>d.checked=!1);const g=async()=>{const d=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(m=>m.value);a.clearFooter(),a.updateContent("Starting import...");let u="";try{await ht(r,d,m=>{u+=`${m}<br>`,a.updateContent(u)})}catch(m){console.error("Import failed:",m),a.updateContent(`<strong>Error during import:</strong><br>${m.message}`),a.addFooterButton("Close",()=>a.destroy())}};a.addFooterButton("Import Selected",g),a.addFooterButton("Cancel",()=>a.destroy())}catch(c){console.error("Failed to read zip file:",c),a.updateContent(`<strong>Error:</strong> Could not read the zip file.<br>${c.message}`),a.addFooterButton("Close",()=>a.destroy())}finally{s.value=""}}),o.addEventListener("click",()=>{const r=localStorage.getItem("thoughtform_gardens"),a=r?JSON.parse(r):[],c=new w({title:"Clear Garden Data"});c.updateContent(B("Select gardens to permanently delete:",a,!1));const l=c.content;l.querySelector(".select-all-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!0),l.querySelector(".select-none-btn").onclick=()=>l.querySelectorAll(".garden-select-checkbox").forEach(u=>u.checked=!1);const g=async()=>{const u=Array.from(l.querySelectorAll(".garden-select-checkbox:checked")).map(p=>p.value);c.clearFooter(),c.updateContent("Starting deletion...");let m="";try{await ut(u,p=>{m+=`${p}<br>`,c.updateContent(m)})}catch(p){console.error("Deletion failed:",p),c.updateContent(`<strong>Error during deletion:</strong><br>${p.message}`),c.addFooterButton("Close",()=>c.destroy()).classList.add("destructive")}};c.addFooterButton("Delete Selected",g).classList.add("destructive"),c.addFooterButton("Cancel",()=>c.destroy()),c.show()})},show(){this._$el.show()},hide(){this._$el.hide()}}),P.add({name:"Sync",init(e){this.sync=new xt,this.sync.init(e.get(0))},show(){this.sync.show()},hide(){this.sync.hide()},destroy(){this.sync.destroy()}}),P}class Pt{constructor({gitClient:e,editor:t}){if(!e||!t)throw new Error("CommandPalette requires a gitClient and editor instance.");this.gitClient=e,this.editor=t,this.isOpen=!1,this.query="",this.results=[],this.selectedIndex=0,this.mode="search",this.crossGardenFileCache=null,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleInput=this.handleInput.bind(this),this.handleResultClick=this.handleResultClick.bind(this),this.close=this.close.bind(this),this.createDOMElements()}createDOMElements(){this.overlay=document.createElement("div"),this.overlay.className="command-overlay hidden",this.overlay.addEventListener("click",this.close),this.container=document.createElement("div"),this.container.className="command-container",this.container.addEventListener("click",e=>e.stopPropagation()),this.titleElement=document.createElement("div"),this.titleElement.className="command-title",this.input=document.createElement("input"),this.input.type="text",this.input.className="command-input",this.input.addEventListener("input",this.handleInput),this.resultsList=document.createElement("ul"),this.resultsList.className="command-results-list",this.resultsList.addEventListener("click",this.handleResultClick),this.container.appendChild(this.titleElement),this.container.appendChild(this.input),this.container.appendChild(this.resultsList),this.overlay.appendChild(this.container),document.body.appendChild(this.overlay)}async _buildCrossGardenIndex(){const e=localStorage.getItem("thoughtform_gardens"),t=e?JSON.parse(e):["home"],n=[];await Promise.all(t.map(async s=>{const o=new k(s),r=await this.editor.sidebar.listFiles(o,"/");for(const a of r)n.push({garden:s,path:a,searchString:`${s} ${a.substring(1)}`.toLowerCase()})})),this.crossGardenFileCache=n}async open(e="search"){if(!this.isOpen){if(this.isOpen=!0,this.mode=e,this.mode==="execute"?(this.titleElement.textContent="Executing a File...",this.input.placeholder="Find a .js file to execute..."):(this.titleElement.textContent="Searching Files...",this.input.placeholder="Find file across all gardens..."),this.overlay.classList.remove("hidden"),this.input.focus(),document.addEventListener("keydown",this.handleKeyDown),!this.crossGardenFileCache){const t=this.input.placeholder;this.input.placeholder="Indexing all gardens...",this.input.disabled=!0,await this._buildCrossGardenIndex(),this.input.placeholder=t,this.input.disabled=!1,this.input.focus()}this.search("")}}close(){this.isOpen&&(this.isOpen=!1,this.overlay.classList.add("hidden"),this.input.value="",this.query="",this.results=[],this.selectedIndex=0,document.removeEventListener("keydown",this.handleKeyDown))}search(e){this.query=e.toLowerCase();let t=this.crossGardenFileCache;this.mode==="execute"&&(t=this.crossGardenFileCache.filter(n=>n.garden===this.gitClient.gardenName&&n.path.endsWith(".js"))),this.query?this.results=t.filter(n=>{let s=0,o=0;for(;s<this.query.length&&o<n.searchString.length;)this.query[s]===n.searchString[o]&&s++,o++;return s===this.query.length}).sort((n,s)=>{const o=n.garden===this.gitClient.gardenName,r=s.garden===this.gitClient.gardenName;return o&&!r?-1:!o&&r?1:0}):this.results=(this.mode==="execute"?t:t.filter(n=>n.garden===this.gitClient.gardenName)).slice(0,100),this.selectedIndex=0,this.renderResults()}renderResults(){if(this.resultsList.innerHTML="",this.results.length===0){this.resultsList.innerHTML='<li class="command-no-results">No matches found</li>';return}this.results.forEach((e,t)=>{const n=document.createElement("li");n.className="command-result-item",n.dataset.index=t;const s=e.path.startsWith("/")?e.path.substring(1):e.path;e.garden!==this.gitClient.gardenName?n.innerHTML=`<span class="command-path">${s}</span> <span class="command-garden">${e.garden}</span>`:n.textContent=s,t===this.selectedIndex&&(n.classList.add("active"),n.scrollIntoView({block:"nearest"})),this.resultsList.appendChild(n)})}async selectItem(e){if(e<0||e>=this.results.length)return;const t=this.results[e];if(this.mode==="execute"){console.log(`Executing: ${t.path}`),this.close();try{const n=await this.gitClient.readFile(t.path),o=new Function(n)();console.log(`Execution successful for ${t.path}. Result:`,o)}catch(n){console.error(`Execution failed for ${t.path}:`,n),window.thoughtform.ui.toggleDevtools?.(!0,"console")}}else{if(t.garden!==this.gitClient.gardenName){const n=new URL(import.meta.url).pathname,s=n.lastIndexOf("/src/"),o=s>-1?n.substring(0,s):"";window.location.href=`${window.location.origin}${o}/${encodeURIComponent(t.garden)}#${encodeURIComponent(t.path)}`}else window.location.hash=`#${encodeURIComponent(t.path)}`;this.close()}}handleInput(e){this.search(e.target.value)}handleResultClick(e){const t=e.target.closest(".command-result-item");t&&this.selectItem(parseInt(t.dataset.index,10))}handleKeyDown(e){if(this.isOpen)switch(e.key){case"ArrowDown":e.preventDefault(),this.selectedIndex=(this.selectedIndex+1)%this.results.length,this.renderResults();break;case"ArrowUp":e.preventDefault(),this.selectedIndex=(this.selectedIndex-1+this.results.length)%this.results.length,this.renderResults();break;case"Enter":e.preventDefault(),this.results.length>0&&this.selectItem(this.selectedIndex);break;case"Escape":e.preventDefault(),this.close();break}}}window.Buffer=ae.Buffer;window.process={env:{}};window.thoughtform={ui:{}};const se=new URL(import.meta.url).pathname,J=se.lastIndexOf("/src/"),q=J>-1?se.substring(0,J):"";let x=window.location.pathname.startsWith(q)?window.location.pathname.substring(q.length):window.location.pathname;x=x.replace(/^\/|\/$/g,"")||"home";x=decodeURIComponent(x);console.log(`Base Path: "${q}"`);console.log(`Loading garden: "${x}"`);const ie=new k(x);at();Ft();window.onerror=function(i,e,t,n,s){return console.error("Caught global error:",i,s),window.thoughtform.ui.toggleDevtools?.(!0,"console"),!1};window.onunhandledrejection=function(i){console.error("Caught unhandled promise rejection:",i.reason),window.thoughtform.ui.toggleDevtools?.(!0,"console")};const V=new M({target:"main",gitClient:ie}),$t=setInterval(()=>{if(V.isReady){clearInterval($t);const i=new Pt({gitClient:ie,editor:V});window.thoughtform.commandPalette=i,window.addEventListener("keydown",e=>{const t=document.activeElement;if(!(t&&(t.tagName==="INPUT"||t.tagName==="TEXTAREA")&&!t.classList.contains("cm-content")||!(navigator.platform.toUpperCase().indexOf("MAC")>=0?e.metaKey:e.ctrlKey)))switch(e.key.toLowerCase()){case"p":e.preventDefault(),e.stopPropagation(),e.shiftKey?i.open("execute"):i.open("search");break;case"[":e.preventDefault(),e.stopPropagation(),window.thoughtform.ui.toggleSidebar?.();break;case"`":e.preventDefault(),e.stopPropagation(),window.thoughtform.ui.toggleDevtools?.(null,null);break}},{capture:!0})}},100);
